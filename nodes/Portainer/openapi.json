{
  "basePath": "/api",
  "definitions": {
    "auth.authenticatePayload": {
      "properties": {
        "password": {
          "description": "Password",
          "example": "mypassword",
          "type": "string"
        },
        "username": {
          "description": "Username",
          "example": "admin",
          "type": "string"
        }
      },
      "required": [
        "password",
        "username"
      ],
      "type": "object"
    },
    "auth.authenticateResponse": {
      "properties": {
        "jwt": {
          "description": "JWT token used to authenticate against the API",
          "example": "abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789abcdefghijklmnopqrstuvwxyzAB",
          "type": "string"
        }
      },
      "type": "object"
    },
    "auth.oauthPayload": {
      "properties": {
        "code": {
          "description": "OAuth code returned from OAuth Provided",
          "type": "string"
        }
      },
      "type": "object"
    },
    "backup.backupPayload": {
      "properties": {
        "password": {
          "type": "string"
        }
      },
      "type": "object"
    },
    "backup.restorePayload": {
      "properties": {
        "fileContent": {
          "items": {
            "type": "integer"
          },
          "type": "array"
        },
        "fileName": {
          "type": "string"
        },
        "password": {
          "type": "string"
        }
      },
      "type": "object"
    },
    "build.BuildInfo": {
      "properties": {
        "buildNumber": {
          "type": "string"
        },
        "gitCommit": {
          "type": "string"
        },
        "goVersion": {
          "type": "string"
        },
        "imageTag": {
          "type": "string"
        },
        "nodejsVersion": {
          "type": "string"
        },
        "webpackVersion": {
          "type": "string"
        },
        "yarnVersion": {
          "type": "string"
        }
      },
      "type": "object"
    },
    "build.DependenciesInfo": {
      "properties": {
        "composeVersion": {
          "type": "string"
        },
        "dockerVersion": {
          "type": "string"
        },
        "helmVersion": {
          "type": "string"
        },
        "kubectlVersion": {
          "type": "string"
        }
      },
      "type": "object"
    },
    "build.RuntimeInfo": {
      "properties": {
        "env": {
          "items": {
            "type": "string"
          },
          "type": "array"
        }
      },
      "type": "object"
    },
    "containers.containerGpusResponse": {
      "properties": {
        "gpus": {
          "type": "string"
        }
      },
      "type": "object"
    },
    "customtemplates.customTemplateFromFileContentPayload": {
      "properties": {
        "description": {
          "description": "Description of the template",
          "example": "High performance web server",
          "type": "string"
        },
        "edgeTemplate": {
          "description": "EdgeTemplate indicates if this template purpose for Edge Stack",
          "example": false,
          "type": "boolean"
        },
        "fileContent": {
          "description": "Content of stack file",
          "type": "string"
        },
        "logo": {
          "description": "URL of the template's logo",
          "example": "https://portainer.io/img/logo.svg",
          "type": "string"
        },
        "note": {
          "description": "A note that will be displayed in the UI. Supports HTML content",
          "example": "This is my <b>custom</b> template",
          "type": "string"
        },
        "platform": {
          "description": "Platform associated to the template.\nValid values are: 1 - 'linux', 2 - 'windows'\nRequired for Docker stacks",
          "enum": [
            1,
            2
          ],
          "example": 1,
          "type": "integer"
        },
        "title": {
          "description": "Title of the template",
          "example": "Nginx",
          "type": "string"
        },
        "type": {
          "description": "Type of created stack:\n* 1 - swarm\n* 2 - compose\n* 3 - kubernetes",
          "enum": [
            1,
            2,
            3
          ],
          "example": 1,
          "type": "integer"
        },
        "variables": {
          "description": "Definitions of variables in the stack file",
          "items": {
            "$ref": "#/definitions/portainer.CustomTemplateVariableDefinition"
          },
          "type": "array"
        }
      },
      "required": [
        "description",
        "fileContent",
        "title",
        "type"
      ],
      "type": "object"
    },
    "customtemplates.customTemplateFromGitRepositoryPayload": {
      "properties": {
        "composeFilePathInRepository": {
          "default": "docker-compose.yml",
          "description": "Path to the Stack file inside the Git repository",
          "example": "docker-compose.yml",
          "type": "string"
        },
        "description": {
          "description": "Description of the template",
          "example": "High performance web server",
          "type": "string"
        },
        "edgeTemplate": {
          "description": "EdgeTemplate indicates if this template purpose for Edge Stack",
          "example": false,
          "type": "boolean"
        },
        "isComposeFormat": {
          "description": "IsComposeFormat indicates if the Kubernetes template is created from a Docker Compose file",
          "example": false,
          "type": "boolean"
        },
        "logo": {
          "description": "URL of the template's logo",
          "example": "https://portainer.io/img/logo.svg",
          "type": "string"
        },
        "note": {
          "description": "A note that will be displayed in the UI. Supports HTML content",
          "example": "This is my <b>custom</b> template",
          "type": "string"
        },
        "platform": {
          "description": "Platform associated to the template.\nValid values are: 1 - 'linux', 2 - 'windows'\nRequired for Docker stacks",
          "enum": [
            1,
            2
          ],
          "example": 1,
          "type": "integer"
        },
        "repositoryAuthentication": {
          "description": "Use basic authentication to clone the Git repository",
          "example": true,
          "type": "boolean"
        },
        "repositoryPassword": {
          "description": "Password used in basic authentication. Required when RepositoryAuthentication is true.",
          "example": "myGitPassword",
          "type": "string"
        },
        "repositoryReferenceName": {
          "description": "Reference name of a Git repository hosting the Stack file",
          "example": "refs/heads/master",
          "type": "string"
        },
        "repositoryURL": {
          "description": "URL of a Git repository hosting the Stack file",
          "example": "https://github.com/openfaas/faas",
          "type": "string"
        },
        "repositoryUsername": {
          "description": "Username used in basic authentication. Required when RepositoryAuthentication is true.",
          "example": "myGitUsername",
          "type": "string"
        },
        "title": {
          "description": "Title of the template",
          "example": "Nginx",
          "type": "string"
        },
        "tlsskipVerify": {
          "description": "TLSSkipVerify skips SSL verification when cloning the Git repository",
          "example": false,
          "type": "boolean"
        },
        "type": {
          "description": "Type of created stack:\n* 1 - swarm\n* 2 - compose\n* 3 - kubernetes",
          "enum": [
            1,
            2
          ],
          "example": 1,
          "type": "integer"
        },
        "variables": {
          "description": "Definitions of variables in the stack file",
          "items": {
            "$ref": "#/definitions/portainer.CustomTemplateVariableDefinition"
          },
          "type": "array"
        }
      },
      "required": [
        "description",
        "repositoryURL",
        "title",
        "type"
      ],
      "type": "object"
    },
    "customtemplates.customTemplateUpdatePayload": {
      "properties": {
        "composeFilePathInRepository": {
          "default": "docker-compose.yml",
          "description": "Path to the Stack file inside the Git repository",
          "example": "docker-compose.yml",
          "type": "string"
        },
        "description": {
          "description": "Description of the template",
          "example": "High performance web server",
          "type": "string"
        },
        "edgeTemplate": {
          "description": "EdgeTemplate indicates if this template purpose for Edge Stack",
          "example": false,
          "type": "boolean"
        },
        "fileContent": {
          "description": "Content of stack file",
          "type": "string"
        },
        "isComposeFormat": {
          "description": "IsComposeFormat indicates if the Kubernetes template is created from a Docker Compose file",
          "example": false,
          "type": "boolean"
        },
        "logo": {
          "description": "URL of the template's logo",
          "example": "https://portainer.io/img/logo.svg",
          "type": "string"
        },
        "note": {
          "description": "A note that will be displayed in the UI. Supports HTML content",
          "example": "This is my <b>custom</b> template",
          "type": "string"
        },
        "platform": {
          "description": "Platform associated to the template.\nValid values are: 1 - 'linux', 2 - 'windows'\nRequired for Docker stacks",
          "enum": [
            1,
            2
          ],
          "example": 1,
          "type": "integer"
        },
        "repositoryAuthentication": {
          "description": "Use basic authentication to clone the Git repository",
          "example": true,
          "type": "boolean"
        },
        "repositoryGitCredentialID": {
          "description": "GitCredentialID used to identify the bound git credential. Required when RepositoryAuthentication\nis true and RepositoryUsername/RepositoryPassword are not provided",
          "example": 0,
          "type": "integer"
        },
        "repositoryPassword": {
          "description": "Password used in basic authentication. Required when RepositoryAuthentication is true\nand RepositoryGitCredentialID is 0",
          "example": "myGitPassword",
          "type": "string"
        },
        "repositoryReferenceName": {
          "description": "Reference name of a Git repository hosting the Stack file",
          "example": "refs/heads/master",
          "type": "string"
        },
        "repositoryURL": {
          "description": "URL of a Git repository hosting the Stack file",
          "example": "https://github.com/openfaas/faas",
          "type": "string"
        },
        "repositoryUsername": {
          "description": "Username used in basic authentication. Required when RepositoryAuthentication is true\nand RepositoryGitCredentialID is 0",
          "example": "myGitUsername",
          "type": "string"
        },
        "title": {
          "description": "Title of the template",
          "example": "Nginx",
          "type": "string"
        },
        "tlsskipVerify": {
          "description": "TLSSkipVerify skips SSL verification when cloning the Git repository",
          "example": false,
          "type": "boolean"
        },
        "type": {
          "description": "Type of created stack (1 - swarm, 2 - compose, 3 - kubernetes)",
          "enum": [
            1,
            2,
            3
          ],
          "example": 1,
          "type": "integer"
        },
        "variables": {
          "description": "Definitions of variables in the stack file",
          "items": {
            "$ref": "#/definitions/portainer.CustomTemplateVariableDefinition"
          },
          "type": "array"
        }
      },
      "required": [
        "description",
        "fileContent",
        "repositoryURL",
        "title",
        "type"
      ],
      "type": "object"
    },
    "customtemplates.fileResponse": {
      "properties": {
        "fileContent": {
          "type": "string"
        }
      },
      "type": "object"
    },
    "docker.ContainerStats": {
      "properties": {
        "healthy": {
          "type": "integer"
        },
        "running": {
          "type": "integer"
        },
        "stopped": {
          "type": "integer"
        },
        "total": {
          "type": "integer"
        },
        "unhealthy": {
          "type": "integer"
        }
      },
      "type": "object"
    },
    "docker.dashboardResponse": {
      "properties": {
        "containers": {
          "$ref": "#/definitions/docker.ContainerStats"
        },
        "images": {
          "$ref": "#/definitions/docker.imagesCounters"
        },
        "networks": {
          "type": "integer"
        },
        "services": {
          "type": "integer"
        },
        "stacks": {
          "type": "integer"
        },
        "volumes": {
          "type": "integer"
        }
      },
      "type": "object"
    },
    "docker.imagesCounters": {
      "properties": {
        "size": {
          "type": "integer"
        },
        "total": {
          "type": "integer"
        }
      },
      "type": "object"
    },
    "edge.DeployerOptionsPayload": {
      "properties": {
        "prune": {
          "description": "Prune is a flag indicating if the agent must prune the containers or not when creating/updating an edge stack\nThis flag drives `docker compose up --remove-orphans` and `docker stack up --prune` options\nUsed only for EE",
          "type": "boolean"
        },
        "removeVolumes": {
          "description": "RemoveVolumes is a flag indicating if the agent must remove the named volumes declared\nin the compose file and anonymouse volumes attached to containers\nThis flag drives `docker compose down --volumes` option\nUsed only for EE",
          "type": "boolean"
        }
      },
      "type": "object"
    },
    "edge.RegistryCredentials": {
      "properties": {
        "secret": {
          "type": "string"
        },
        "serverURL": {
          "type": "string"
        },
        "username": {
          "type": "string"
        }
      },
      "type": "object"
    },
    "edge.StackPayload": {
      "properties": {
        "deployerOptionsPayload": {
          "$ref": "#/definitions/edge.DeployerOptionsPayload"
        },
        "dirEntries": {
          "description": "Content of stack folder",
          "items": {
            "$ref": "#/definitions/filesystem.DirEntry"
          },
          "type": "array"
        },
        "edgeUpdateID": {
          "description": "EdgeUpdateID is the ID of the edge update related to this stack.\nUsed only for EE",
          "type": "integer"
        },
        "entryFileName": {
          "description": "Name of the stack entry file",
          "type": "string"
        },
        "envVars": {
          "description": "Used only for EE\nEnvVars is a list of environment variables to inject into the stack",
          "items": {
            "$ref": "#/definitions/portainer.Pair"
          },
          "type": "array"
        },
        "filesystemPath": {
          "description": "Mount point for relative path",
          "type": "string"
        },
        "id": {
          "description": "ID of the stack",
          "type": "integer"
        },
        "name": {
          "description": "Name of the stack",
          "type": "string"
        },
        "namespace": {
          "description": "Namespace to use for kubernetes stack. Keep empty to use the manifest namespace.",
          "type": "string"
        },
        "prePullImage": {
          "description": "PrePullImage is a flag indicating if the agent must pull the image before deploying the stack.\nUsed only for EE",
          "type": "boolean"
        },
        "rePullImage": {
          "description": "RePullImage is a flag indicating if the agent must pull the image if it is already present on the node.\nUsed only for EE",
          "type": "boolean"
        },
        "readyRePullImage": {
          "description": "Used only for EE async edge agent\nReadyRePullImage is a flag to indicate whether the auto update is trigger to re-pull image",
          "type": "boolean"
        },
        "registryCredentials": {
          "description": "RegistryCredentials holds the credentials for a Docker registry.\nUsed only for EE",
          "items": {
            "$ref": "#/definitions/edge.RegistryCredentials"
          },
          "type": "array"
        },
        "retryDeploy": {
          "description": "RetryDeploy is a flag indicating if the agent must retry to deploy the stack if it fails.\nUsed only for EE",
          "type": "boolean"
        },
        "retryPeriod": {
          "description": "RetryPeriod specifies the duration, in seconds, for which the agent should continue attempting to deploy the stack after a failure\nUsed only for EE",
          "type": "integer"
        },
        "rollbackTo": {
          "description": "RollbackTo specifies the stack file version to rollback to (only support to rollback to the last version currently)",
          "type": "integer"
        },
        "stackFileContent": {
          "description": "Content of the stack file (for compatibility to agent version less than 2.19.0)",
          "type": "string"
        },
        "supportRelativePath": {
          "description": "Is relative path supported",
          "type": "boolean"
        },
        "version": {
          "description": "Version of the stack file",
          "type": "integer"
        }
      },
      "type": "object"
    },
    "edgegroups.decoratedEdgeGroup": {
      "properties": {
        "Dynamic": {
          "type": "boolean"
        },
        "Endpoints": {
          "items": {
            "description": "Environment(Endpoint) identifier. Reference the environment(endpoint) that will be used for deployment",
            "type": "integer"
          },
          "type": "array"
        },
        "HasEdgeJob": {
          "type": "boolean"
        },
        "HasEdgeStack": {
          "type": "boolean"
        },
        "Id": {
          "description": "EdgeGroup Identifier",
          "example": 1,
          "type": "integer"
        },
        "Name": {
          "type": "string"
        },
        "PartialMatch": {
          "type": "boolean"
        },
        "TagIds": {
          "items": {
            "description": "Tag identifier",
            "example": 1,
            "type": "integer"
          },
          "type": "array"
        },
        "TrustedEndpoints": {
          "items": {
            "description": "Environment(Endpoint) identifier. Reference the environment(endpoint) that will be used for deployment",
            "type": "integer"
          },
          "type": "array"
        },
        "endpointTypes": {
          "items": {
            "description": "Environment(Endpoint) environment(endpoint) type. 1 for a Docker environment(endpoint), 2 for an agent on Docker environment(endpoint) or 3 for an Azure environment(endpoint).",
            "example": 1,
            "type": "integer"
          },
          "type": "array"
        }
      },
      "type": "object"
    },
    "edgegroups.edgeGroupCreatePayload": {
      "properties": {
        "dynamic": {
          "type": "boolean"
        },
        "endpoints": {
          "items": {
            "description": "Environment(Endpoint) identifier. Reference the environment(endpoint) that will be used for deployment",
            "type": "integer"
          },
          "type": "array"
        },
        "name": {
          "type": "string"
        },
        "partialMatch": {
          "type": "boolean"
        },
        "tagIDs": {
          "items": {
            "description": "Tag identifier",
            "example": 1,
            "type": "integer"
          },
          "type": "array"
        }
      },
      "type": "object"
    },
    "edgegroups.edgeGroupUpdatePayload": {
      "properties": {
        "dynamic": {
          "type": "boolean"
        },
        "endpoints": {
          "items": {
            "description": "Environment(Endpoint) identifier. Reference the environment(endpoint) that will be used for deployment",
            "type": "integer"
          },
          "type": "array"
        },
        "name": {
          "type": "string"
        },
        "partialMatch": {
          "type": "boolean"
        },
        "tagIDs": {
          "items": {
            "description": "Tag identifier",
            "example": 1,
            "type": "integer"
          },
          "type": "array"
        }
      },
      "type": "object"
    },
    "edgejobs.edgeJobCreateFromFileContentPayload": {
      "properties": {
        "cronExpression": {
          "type": "string"
        },
        "edgeGroups": {
          "items": {
            "description": "EdgeGroup Identifier",
            "example": 1,
            "type": "integer"
          },
          "type": "array"
        },
        "endpoints": {
          "items": {
            "description": "Environment(Endpoint) identifier. Reference the environment(endpoint) that will be used for deployment",
            "type": "integer"
          },
          "type": "array"
        },
        "fileContent": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "recurring": {
          "type": "boolean"
        }
      },
      "type": "object"
    },
    "edgejobs.edgeJobFileResponse": {
      "properties": {
        "FileContent": {
          "type": "string"
        }
      },
      "type": "object"
    },
    "edgejobs.edgeJobUpdatePayload": {
      "properties": {
        "cronExpression": {
          "type": "string"
        },
        "edgeGroups": {
          "items": {
            "description": "EdgeGroup Identifier",
            "example": 1,
            "type": "integer"
          },
          "type": "array"
        },
        "endpoints": {
          "items": {
            "description": "Environment(Endpoint) identifier. Reference the environment(endpoint) that will be used for deployment",
            "type": "integer"
          },
          "type": "array"
        },
        "fileContent": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "recurring": {
          "type": "boolean"
        }
      },
      "type": "object"
    },
    "edgejobs.fileResponse": {
      "properties": {
        "FileContent": {
          "type": "string"
        }
      },
      "type": "object"
    },
    "edgejobs.taskContainer": {
      "properties": {
        "EndpointId": {
          "type": "integer"
        },
        "Id": {
          "type": "string"
        },
        "LogsStatus": {
          "type": "integer"
        }
      },
      "type": "object"
    },
    "edgestacks.edgeStackFromGitRepositoryPayload": {
      "properties": {
        "deploymentType": {
          "description": "Deployment type to deploy this stack\nValid values are: 0 - 'compose', 1 - 'kubernetes'\ncompose is enabled only for docker environments\nkubernetes is enabled only for kubernetes environments",
          "enum": [
            0,
            1,
            2
          ],
          "example": 0,
          "type": "integer"
        },
        "edgeGroups": {
          "description": "List of identifiers of EdgeGroups",
          "example": [
            1
          ],
          "items": {
            "description": "EdgeGroup Identifier",
            "example": 1,
            "type": "integer"
          },
          "type": "array"
        },
        "filePathInRepository": {
          "default": "docker-compose.yml",
          "description": "Path to the Stack file inside the Git repository",
          "example": "docker-compose.yml",
          "type": "string"
        },
        "name": {
          "description": "Name of the stack\nMax length: 255\nName must only contains lowercase characters, numbers, hyphens, or underscores\nName must start with a lowercase character or number\nExample: stack-name or stack_123 or stackName",
          "example": "stack-name",
          "type": "string"
        },
        "registries": {
          "description": "List of Registries to use for this stack",
          "items": {
            "description": "Registry Identifier",
            "type": "integer"
          },
          "type": "array"
        },
        "repositoryAuthentication": {
          "description": "Use basic authentication to clone the Git repository",
          "example": true,
          "type": "boolean"
        },
        "repositoryPassword": {
          "description": "Password used in basic authentication. Required when RepositoryAuthentication is true.",
          "example": "myGitPassword",
          "type": "string"
        },
        "repositoryReferenceName": {
          "description": "Reference name of a Git repository hosting the Stack file",
          "example": "refs/heads/master",
          "type": "string"
        },
        "repositoryURL": {
          "description": "URL of a Git repository hosting the Stack file",
          "example": "https://github.com/openfaas/faas",
          "type": "string"
        },
        "repositoryUsername": {
          "description": "Username used in basic authentication. Required when RepositoryAuthentication is true.",
          "example": "myGitUsername",
          "type": "string"
        },
        "tlsskipVerify": {
          "description": "TLSSkipVerify skips SSL verification when cloning the Git repository",
          "example": false,
          "type": "boolean"
        },
        "useManifestNamespaces": {
          "description": "Uses the manifest's namespaces instead of the default one",
          "type": "boolean"
        }
      },
      "required": [
        "edgeGroups",
        "name",
        "repositoryURL"
      ],
      "type": "object"
    },
    "edgestacks.edgeStackFromStringPayload": {
      "properties": {
        "deploymentType": {
          "description": "Deployment type to deploy this stack\nValid values are: 0 - 'compose', 1 - 'kubernetes'\ncompose is enabled only for docker environments\nkubernetes is enabled only for kubernetes environments",
          "enum": [
            0,
            1,
            2
          ],
          "example": 0,
          "type": "integer"
        },
        "edgeGroups": {
          "description": "List of identifiers of EdgeGroups",
          "example": [
            1
          ],
          "items": {
            "description": "EdgeGroup Identifier",
            "example": 1,
            "type": "integer"
          },
          "type": "array"
        },
        "name": {
          "description": "Name of the stack\nMax length: 255\nName must only contains lowercase characters, numbers, hyphens, or underscores\nName must start with a lowercase character or number\nExample: stack-name or stack_123 or stackName",
          "example": "stack-name",
          "type": "string"
        },
        "registries": {
          "description": "List of Registries to use for this stack",
          "items": {
            "description": "Registry Identifier",
            "type": "integer"
          },
          "type": "array"
        },
        "stackFileContent": {
          "description": "Content of the Stack file",
          "example": "version: 3\n services:\n web:\n image:nginx",
          "type": "string"
        },
        "useManifestNamespaces": {
          "description": "Uses the manifest's namespaces instead of the default one",
          "type": "boolean"
        }
      },
      "required": [
        "name",
        "stackFileContent"
      ],
      "type": "object"
    },
    "edgestacks.stackFileResponse": {
      "properties": {
        "StackFileContent": {
          "type": "string"
        }
      },
      "type": "object"
    },
    "edgestacks.updateEdgeStackPayload": {
      "properties": {
        "deploymentType": {
          "description": "Deployment type to deploy this stack\nValid values are: 0 - 'compose', 1 - 'kubernetes'\ncompose is enabled only for docker environments\nkubernetes is enabled only for kubernetes environments",
          "enum": [
            0,
            1,
            2
          ],
          "example": 0,
          "type": "integer"
        },
        "edgeGroups": {
          "items": {
            "description": "EdgeGroup Identifier",
            "example": 1,
            "type": "integer"
          },
          "type": "array"
        },
        "stackFileContent": {
          "type": "string"
        },
        "updateVersion": {
          "type": "boolean"
        },
        "useManifestNamespaces": {
          "description": "Uses the manifest's namespaces instead of the default one",
          "type": "boolean"
        }
      },
      "type": "object"
    },
    "edgestacks.updateStatusPayload": {
      "properties": {
        "endpointID": {
          "type": "integer"
        },
        "error": {
          "type": "string"
        },
        "status": {
          "description": "Deprecated",
          "type": "integer"
        },
        "time": {
          "type": "integer"
        },
        "version": {
          "type": "integer"
        }
      },
      "type": "object"
    },
    "endpointedge.edgeJobResponse": {
      "properties": {
        "CollectLogs": {
          "description": "Whether to collect logs",
          "example": true,
          "type": "boolean"
        },
        "CronExpression": {
          "description": "A cron expression to schedule this job",
          "example": "* * * * *",
          "type": "string"
        },
        "Id": {
          "description": "EdgeJob Identifier",
          "example": 2,
          "type": "integer"
        },
        "Script": {
          "description": "Script to run",
          "example": "echo hello",
          "type": "string"
        },
        "Version": {
          "description": "Version of this EdgeJob",
          "example": 2,
          "type": "integer"
        }
      },
      "type": "object"
    },
    "endpointedge.endpointEdgeStatusInspectResponse": {
      "properties": {
        "checkin": {
          "description": "The current value of CheckinInterval",
          "example": 5,
          "type": "integer"
        },
        "credentials": {
          "type": "string"
        },
        "port": {
          "description": "The tunnel port",
          "example": 8732,
          "type": "integer"
        },
        "schedules": {
          "description": "List of requests for jobs to run on the environment(endpoint)",
          "items": {
            "$ref": "#/definitions/endpointedge.edgeJobResponse"
          },
          "type": "array"
        },
        "stacks": {
          "description": "List of stacks to be deployed on the environments(endpoints)",
          "items": {
            "$ref": "#/definitions/endpointedge.stackStatusResponse"
          },
          "type": "array"
        },
        "status": {
          "description": "Status represents the environment(endpoint) status",
          "example": "REQUIRED",
          "type": "string"
        }
      },
      "type": "object"
    },
    "endpointedge.stackStatusResponse": {
      "properties": {
        "id": {
          "description": "EdgeStack Identifier",
          "example": 1,
          "type": "integer"
        },
        "version": {
          "description": "Version of this stack",
          "example": 3,
          "type": "integer"
        }
      },
      "type": "object"
    },
    "endpointgroups.endpointGroupCreatePayload": {
      "properties": {
        "associatedEndpoints": {
          "description": "List of environment(endpoint) identifiers that will be part of this group",
          "example": [
            1,
            3
          ],
          "items": {
            "description": "Environment(Endpoint) identifier. Reference the environment(endpoint) that will be used for deployment",
            "type": "integer"
          },
          "type": "array"
        },
        "description": {
          "description": "Environment(Endpoint) group description",
          "example": "description",
          "type": "string"
        },
        "name": {
          "description": "Environment(Endpoint) group name",
          "example": "my-environment-group",
          "type": "string"
        },
        "tagIDs": {
          "description": "List of tag identifiers to which this environment(endpoint) group is associated",
          "example": [
            1,
            2
          ],
          "items": {
            "description": "Tag identifier",
            "example": 1,
            "type": "integer"
          },
          "type": "array"
        }
      },
      "required": [
        "name"
      ],
      "type": "object"
    },
    "endpointgroups.endpointGroupUpdatePayload": {
      "properties": {
        "description": {
          "description": "Environment(Endpoint) group description",
          "example": "description",
          "type": "string"
        },
        "name": {
          "description": "Environment(Endpoint) group name",
          "example": "my-environment-group",
          "type": "string"
        },
        "tagIDs": {
          "description": "List of tag identifiers associated to the environment(endpoint) group",
          "example": [
            3,
            4
          ],
          "items": {
            "description": "Tag identifier",
            "example": 1,
            "type": "integer"
          },
          "type": "array"
        },
        "teamAccessPolicies": {
          "$ref": "#/definitions/portainer.TeamAccessPolicies"
        },
        "userAccessPolicies": {
          "$ref": "#/definitions/portainer.UserAccessPolicies"
        }
      },
      "type": "object"
    },
    "endpoints.dockerhubStatusResponse": {
      "properties": {
        "limit": {
          "description": "Daily limit",
          "type": "integer"
        },
        "remaining": {
          "description": "Remaiming images to pull",
          "type": "integer"
        }
      },
      "type": "object"
    },
    "endpoints.endpointCreateGlobalKeyResponse": {
      "properties": {
        "endpointID": {
          "description": "Environment(Endpoint) Identifier",
          "type": "integer"
        }
      },
      "type": "object"
    },
    "endpoints.endpointDeleteBatchPartialResponse": {
      "properties": {
        "deleted": {
          "items": {
            "type": "integer"
          },
          "type": "array"
        },
        "errors": {
          "items": {
            "type": "integer"
          },
          "type": "array"
        }
      },
      "type": "object"
    },
    "endpoints.endpointDeleteBatchPayload": {
      "properties": {
        "endpoints": {
          "items": {
            "$ref": "#/definitions/endpoints.endpointDeleteRequest"
          },
          "type": "array"
        }
      },
      "type": "object"
    },
    "endpoints.endpointDeleteRequest": {
      "properties": {
        "deleteCluster": {
          "type": "boolean"
        },
        "id": {
          "type": "integer"
        }
      },
      "type": "object"
    },
    "endpoints.endpointSettingsUpdatePayload": {
      "properties": {
        "allowBindMountsForRegularUsers": {
          "description": "Whether non-administrator should be able to use bind mounts when creating containers",
          "example": false,
          "type": "boolean"
        },
        "allowContainerCapabilitiesForRegularUsers": {
          "description": "Whether non-administrator should be able to use container capabilities",
          "example": true,
          "type": "boolean"
        },
        "allowDeviceMappingForRegularUsers": {
          "description": "Whether non-administrator should be able to use device mapping",
          "example": true,
          "type": "boolean"
        },
        "allowHostNamespaceForRegularUsers": {
          "description": "Whether non-administrator should be able to use the host pid",
          "example": true,
          "type": "boolean"
        },
        "allowPrivilegedModeForRegularUsers": {
          "description": "Whether non-administrator should be able to use privileged mode when creating containers",
          "example": false,
          "type": "boolean"
        },
        "allowStackManagementForRegularUsers": {
          "description": "Whether non-administrator should be able to manage stacks",
          "example": true,
          "type": "boolean"
        },
        "allowSysctlSettingForRegularUsers": {
          "description": "Whether non-administrator should be able to use sysctl settings",
          "example": true,
          "type": "boolean"
        },
        "allowVolumeBrowserForRegularUsers": {
          "description": "Whether non-administrator should be able to browse volumes",
          "example": true,
          "type": "boolean"
        },
        "enableGPUManagement": {
          "example": false,
          "type": "boolean"
        },
        "enableHostManagementFeatures": {
          "description": "Whether host management features are enabled",
          "example": true,
          "type": "boolean"
        },
        "gpus": {
          "items": {
            "$ref": "#/definitions/portainer.Pair"
          },
          "type": "array"
        }
      },
      "type": "object"
    },
    "endpoints.endpointUpdatePayload": {
      "properties": {
        "azureApplicationID": {
          "description": "Azure application ID",
          "example": "eag7cdo9-o09l-9i83-9dO9-f0b23oe78db4",
          "type": "string"
        },
        "azureAuthenticationKey": {
          "description": "Azure authentication key",
          "example": "cOrXoK/1D35w8YQ8nH1/8ZGwzz45JIYD5jxHKXEQknk=",
          "type": "string"
        },
        "azureTenantID": {
          "description": "Azure tenant ID",
          "example": "34ddc78d-4fel-2358-8cc1-df84c8o839f5",
          "type": "string"
        },
        "edgeCheckinInterval": {
          "description": "The check in interval for edge agent (in seconds)",
          "example": 5,
          "type": "integer"
        },
        "gpus": {
          "description": "GPUs information",
          "items": {
            "$ref": "#/definitions/portainer.Pair"
          },
          "type": "array"
        },
        "groupID": {
          "description": "Group identifier",
          "example": 1,
          "type": "integer"
        },
        "kubernetes": {
          "$ref": "#/definitions/portainer.KubernetesData",
          "description": "Associated Kubernetes data"
        },
        "name": {
          "description": "Name that will be used to identify this environment(endpoint)",
          "example": "my-environment",
          "type": "string"
        },
        "publicURL": {
          "description": "URL or IP address where exposed containers will be reachable.\\\nDefaults to URL if not specified",
          "example": "docker.mydomain.tld:2375",
          "type": "string"
        },
        "status": {
          "description": "The status of the environment(endpoint) (1 - up, 2 - down)",
          "example": 1,
          "type": "integer"
        },
        "tagIDs": {
          "description": "List of tag identifiers to which this environment(endpoint) is associated",
          "example": [
            1,
            2
          ],
          "items": {
            "description": "Tag identifier",
            "example": 1,
            "type": "integer"
          },
          "type": "array"
        },
        "teamAccessPolicies": {
          "$ref": "#/definitions/portainer.TeamAccessPolicies"
        },
        "tls": {
          "description": "Require TLS to connect against this environment(endpoint)",
          "example": true,
          "type": "boolean"
        },
        "tlsskipClientVerify": {
          "description": "Skip client verification when using TLS",
          "example": false,
          "type": "boolean"
        },
        "tlsskipVerify": {
          "description": "Skip server verification when using TLS",
          "example": false,
          "type": "boolean"
        },
        "url": {
          "description": "URL or IP address of a Docker host",
          "example": "docker.mydomain.tld:2375",
          "type": "string"
        },
        "userAccessPolicies": {
          "$ref": "#/definitions/portainer.UserAccessPolicies"
        }
      },
      "type": "object"
    },
    "endpoints.endpointUpdateRelationsPayload": {
      "properties": {
        "relations": {
          "additionalProperties": {
            "properties": {
              "edgeGroups": {
                "items": {
                  "description": "EdgeGroup Identifier",
                  "example": 1,
                  "type": "integer"
                },
                "type": "array"
              },
              "group": {
                "description": "Environment(Endpoint) group identifier",
                "example": 1,
                "type": "integer"
              },
              "tags": {
                "items": {
                  "description": "Tag identifier",
                  "example": 1,
                  "type": "integer"
                },
                "type": "array"
              }
            },
            "type": "object"
          },
          "type": "object"
        }
      },
      "type": "object"
    },
    "endpoints.forceUpdateServicePayload": {
      "properties": {
        "pullImage": {
          "description": "PullImage if true will pull the image",
          "type": "boolean"
        },
        "serviceID": {
          "description": "ServiceId to update",
          "type": "string"
        }
      },
      "type": "object"
    },
    "endpoints.registryAccessPayload": {
      "properties": {
        "namespaces": {
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "teamAccessPolicies": {
          "$ref": "#/definitions/portainer.TeamAccessPolicies"
        },
        "userAccessPolicies": {
          "$ref": "#/definitions/portainer.UserAccessPolicies"
        }
      },
      "type": "object"
    },
    "filesystem.DirEntry": {
      "properties": {
        "content": {
          "type": "string"
        },
        "isFile": {
          "type": "boolean"
        },
        "name": {
          "type": "string"
        },
        "permissions": {
          "type": "integer"
        }
      },
      "type": "object"
    },
    "gitops.fileResponse": {
      "properties": {
        "fileContent": {
          "type": "string"
        }
      },
      "type": "object"
    },
    "gitops.repositoryFilePreviewPayload": {
      "properties": {
        "password": {
          "example": "myGitPassword",
          "type": "string"
        },
        "reference": {
          "example": "refs/heads/master",
          "type": "string"
        },
        "repository": {
          "example": "https://github.com/openfaas/faas",
          "type": "string"
        },
        "targetFile": {
          "description": "Path to file whose content will be read",
          "example": "docker-compose.yml",
          "type": "string"
        },
        "tlsskipVerify": {
          "description": "TLSSkipVerify skips SSL verification when cloning the Git repository",
          "example": false,
          "type": "boolean"
        },
        "username": {
          "example": "myGitUsername",
          "type": "string"
        }
      },
      "required": [
        "repository"
      ],
      "type": "object"
    },
    "gittypes.GitAuthentication": {
      "properties": {
        "gitCredentialID": {
          "description": "Git credentials identifier when the value is not 0\nWhen the value is 0, Username and Password are set without using saved credential\nThis is introduced since 2.15.0",
          "example": 0,
          "type": "integer"
        },
        "password": {
          "type": "string"
        },
        "username": {
          "type": "string"
        }
      },
      "type": "object"
    },
    "gittypes.RepoConfig": {
      "properties": {
        "authentication": {
          "$ref": "#/definitions/gittypes.GitAuthentication",
          "description": "Git credentials"
        },
        "configFilePath": {
          "description": "Path to where the config file is in this url/refName",
          "example": "docker-compose.yml",
          "type": "string"
        },
        "configHash": {
          "description": "Repository hash",
          "example": "bc4c183d756879ea4d173315338110b31004b8e0",
          "type": "string"
        },
        "referenceName": {
          "description": "The reference name",
          "example": "refs/heads/branch_name",
          "type": "string"
        },
        "tlsskipVerify": {
          "description": "TLSSkipVerify skips SSL verification when cloning the Git repository",
          "example": false,
          "type": "boolean"
        },
        "url": {
          "description": "The repo url",
          "example": "https://github.com/portainer/portainer.git",
          "type": "string"
        }
      },
      "type": "object"
    },
    "helm.addHelmRepoUrlPayload": {
      "properties": {
        "url": {
          "type": "string"
        }
      },
      "type": "object"
    },
    "helm.helmUserRepositoryResponse": {
      "properties": {
        "GlobalRepository": {
          "type": "string"
        },
        "UserRepositories": {
          "items": {
            "$ref": "#/definitions/portainer.HelmUserRepository"
          },
          "type": "array"
        }
      },
      "type": "object"
    },
    "helm.installChartPayload": {
      "properties": {
        "chart": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "namespace": {
          "type": "string"
        },
        "repo": {
          "type": "string"
        },
        "values": {
          "type": "string"
        }
      },
      "type": "object"
    },
    "images.ImageResponse": {
      "properties": {
        "created": {
          "type": "integer"
        },
        "id": {
          "type": "string"
        },
        "nodeName": {
          "type": "string"
        },
        "size": {
          "type": "integer"
        },
        "tags": {
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "used": {
          "description": "Used is true if the image is used by at least one container\nsupplied only when withUsage is true",
          "type": "boolean"
        }
      },
      "type": "object"
    },
    "intstr.IntOrString": {
      "properties": {
        "intVal": {
          "type": "integer"
        },
        "strVal": {
          "type": "string"
        },
        "type": {
          "type": "integer"
        }
      },
      "type": "object"
    },
    "kubernetes.Configuration": {
      "properties": {
        "ConfigurationOwner": {
          "type": "string"
        },
        "Data": {
          "additionalProperties": true,
          "type": "object"
        },
        "Kind": {
          "type": "string"
        }
      },
      "type": "object"
    },
    "kubernetes.IngressRule": {
      "properties": {
        "Host": {
          "type": "string"
        },
        "IP": {
          "type": "string"
        },
        "Path": {
          "type": "string"
        },
        "TLS": {
          "items": {
            "$ref": "#/definitions/kubernetes.TLSInfo"
          },
          "type": "array"
        }
      },
      "type": "object"
    },
    "kubernetes.K8sApplication": {
      "properties": {
        "ApplicationOwner": {
          "type": "string"
        },
        "ApplicationType": {
          "type": "string"
        },
        "Configurations": {
          "items": {
            "$ref": "#/definitions/kubernetes.Configuration"
          },
          "type": "array"
        },
        "Containers": {
          "items": {},
          "type": "array"
        },
        "CreationDate": {
          "type": "string"
        },
        "DeploymentType": {
          "type": "string"
        },
        "HorizontalPodAutoscaler": {
          "$ref": "#/definitions/v2.HorizontalPodAutoscaler"
        },
        "Id": {
          "type": "string"
        },
        "Image": {
          "type": "string"
        },
        "Kind": {
          "type": "string"
        },
        "Labels": {
          "additionalProperties": {
            "type": "string"
          },
          "type": "object"
        },
        "LoadBalancerIPAddress": {
          "type": "string"
        },
        "MatchLabels": {
          "additionalProperties": {
            "type": "string"
          },
          "type": "object"
        },
        "Metadata": {
          "$ref": "#/definitions/kubernetes.Metadata"
        },
        "Name": {
          "type": "string"
        },
        "Namespace": {
          "type": "string"
        },
        "Pods": {
          "items": {
            "$ref": "#/definitions/kubernetes.Pod"
          },
          "type": "array"
        },
        "PublishedPorts": {
          "items": {
            "$ref": "#/definitions/kubernetes.PublishedPort"
          },
          "type": "array"
        },
        "Resource": {
          "$ref": "#/definitions/kubernetes.K8sApplicationResource"
        },
        "ResourcePool": {
          "type": "string"
        },
        "RunningPodsCount": {
          "type": "integer"
        },
        "ServiceId": {
          "type": "string"
        },
        "ServiceName": {
          "type": "string"
        },
        "ServiceType": {
          "type": "string"
        },
        "Services": {
          "items": {
            "$ref": "#/definitions/v1.Service"
          },
          "type": "array"
        },
        "StackId": {
          "type": "string"
        },
        "StackName": {
          "type": "string"
        },
        "Status": {
          "type": "string"
        },
        "TotalPodsCount": {
          "type": "integer"
        },
        "Uid": {
          "type": "string"
        }
      },
      "type": "object"
    },
    "kubernetes.K8sApplicationResource": {
      "properties": {
        "CpuLimit": {
          "type": "number"
        },
        "CpuRequest": {
          "type": "number"
        },
        "MemoryLimit": {
          "type": "integer"
        },
        "MemoryRequest": {
          "type": "integer"
        }
      },
      "type": "object"
    },
    "kubernetes.K8sClusterRole": {
      "properties": {
        "creationDate": {
          "type": "string"
        },
        "isSystem": {
          "type": "boolean"
        },
        "name": {
          "type": "string"
        },
        "uid": {
          "description": "UID of the referent.\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names#uids",
          "type": "string"
        }
      },
      "type": "object"
    },
    "kubernetes.K8sClusterRoleBinding": {
      "properties": {
        "creationDate": {
          "type": "string"
        },
        "isSystem": {
          "type": "boolean"
        },
        "name": {
          "type": "string"
        },
        "namespace": {
          "type": "string"
        },
        "roleRef": {
          "$ref": "#/definitions/v1.RoleRef"
        },
        "subjects": {
          "items": {
            "$ref": "#/definitions/v1.Subject"
          },
          "type": "array"
        },
        "uid": {
          "description": "UID of the referent.\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names#uids",
          "type": "string"
        }
      },
      "type": "object"
    },
    "kubernetes.K8sConfigMap": {
      "properties": {
        "Annotations": {
          "additionalProperties": {
            "type": "string"
          },
          "type": "object"
        },
        "ConfigurationOwner": {
          "type": "string"
        },
        "ConfigurationOwnerId": {
          "type": "string"
        },
        "ConfigurationOwners": {
          "items": {
            "$ref": "#/definitions/kubernetes.K8sConfigurationOwnerResource"
          },
          "type": "array"
        },
        "CreationDate": {
          "type": "string"
        },
        "Data": {
          "additionalProperties": {
            "type": "string"
          },
          "type": "object"
        },
        "IsUsed": {
          "type": "boolean"
        },
        "Labels": {
          "additionalProperties": {
            "type": "string"
          },
          "type": "object"
        },
        "Name": {
          "type": "string"
        },
        "Namespace": {
          "type": "string"
        },
        "UID": {
          "type": "string"
        }
      },
      "type": "object"
    },
    "kubernetes.K8sConfigurationOwnerResource": {
      "properties": {
        "Id": {
          "type": "string"
        },
        "Name": {
          "type": "string"
        },
        "ResourceKind": {
          "type": "string"
        }
      },
      "type": "object"
    },
    "kubernetes.K8sCronJob": {
      "properties": {
        "Command": {
          "type": "string"
        },
        "Id": {
          "type": "string"
        },
        "IsSystem": {
          "type": "boolean"
        },
        "Jobs": {
          "items": {
            "$ref": "#/definitions/kubernetes.K8sJob"
          },
          "type": "array"
        },
        "Name": {
          "type": "string"
        },
        "Namespace": {
          "type": "string"
        },
        "Schedule": {
          "type": "string"
        },
        "Suspend": {
          "type": "boolean"
        },
        "Timezone": {
          "type": "string"
        }
      },
      "type": "object"
    },
    "kubernetes.K8sCronJobDeleteRequests": {
      "additionalProperties": {
        "items": {
          "type": "string"
        },
        "type": "array"
      },
      "type": "object"
    },
    "kubernetes.K8sDashboard": {
      "properties": {
        "applicationsCount": {
          "type": "integer"
        },
        "configMapsCount": {
          "type": "integer"
        },
        "ingressesCount": {
          "type": "integer"
        },
        "namespacesCount": {
          "type": "integer"
        },
        "secretsCount": {
          "type": "integer"
        },
        "servicesCount": {
          "type": "integer"
        },
        "volumesCount": {
          "type": "integer"
        }
      },
      "type": "object"
    },
    "kubernetes.K8sIngressController": {
      "properties": {
        "Availability": {
          "type": "boolean"
        },
        "ClassName": {
          "type": "string"
        },
        "Name": {
          "type": "string"
        },
        "New": {
          "type": "boolean"
        },
        "Type": {
          "type": "string"
        },
        "Used": {
          "type": "boolean"
        }
      },
      "type": "object"
    },
    "kubernetes.K8sIngressDeleteRequests": {
      "additionalProperties": {
        "items": {
          "type": "string"
        },
        "type": "array"
      },
      "type": "object"
    },
    "kubernetes.K8sIngressInfo": {
      "properties": {
        "Annotations": {
          "additionalProperties": {
            "type": "string"
          },
          "type": "object"
        },
        "ClassName": {
          "type": "string"
        },
        "CreationDate": {
          "type": "string"
        },
        "Hosts": {
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "Labels": {
          "additionalProperties": {
            "type": "string"
          },
          "type": "object"
        },
        "Name": {
          "type": "string"
        },
        "Namespace": {
          "type": "string"
        },
        "Paths": {
          "items": {
            "$ref": "#/definitions/kubernetes.K8sIngressPath"
          },
          "type": "array"
        },
        "TLS": {
          "items": {
            "$ref": "#/definitions/kubernetes.K8sIngressTLS"
          },
          "type": "array"
        },
        "Type": {
          "type": "string"
        },
        "UID": {
          "type": "string"
        }
      },
      "type": "object"
    },
    "kubernetes.K8sIngressPath": {
      "properties": {
        "HasService": {
          "type": "boolean"
        },
        "Host": {
          "type": "string"
        },
        "IngressName": {
          "type": "string"
        },
        "Path": {
          "type": "string"
        },
        "PathType": {
          "type": "string"
        },
        "Port": {
          "type": "integer"
        },
        "ServiceName": {
          "type": "string"
        }
      },
      "type": "object"
    },
    "kubernetes.K8sIngressTLS": {
      "properties": {
        "Hosts": {
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "SecretName": {
          "type": "string"
        }
      },
      "type": "object"
    },
    "kubernetes.K8sJob": {
      "properties": {
        "BackoffLimit": {
          "type": "integer"
        },
        "Command": {
          "type": "string"
        },
        "Completions": {
          "type": "integer"
        },
        "Container": {
          "$ref": "#/definitions/v1.Container"
        },
        "Duration": {
          "type": "string"
        },
        "FailedReason": {
          "type": "string"
        },
        "FinishTime": {
          "type": "string"
        },
        "Id": {
          "type": "string"
        },
        "IsSystem": {
          "type": "boolean"
        },
        "Name": {
          "type": "string"
        },
        "Namespace": {
          "type": "string"
        },
        "PodName": {
          "type": "string"
        },
        "StartTime": {
          "type": "string"
        },
        "Status": {
          "type": "string"
        }
      },
      "type": "object"
    },
    "kubernetes.K8sJobDeleteRequests": {
      "additionalProperties": {
        "items": {
          "type": "string"
        },
        "type": "array"
      },
      "type": "object"
    },
    "kubernetes.K8sNamespaceDetails": {
      "properties": {
        "Annotations": {
          "additionalProperties": {
            "type": "string"
          },
          "type": "object"
        },
        "Name": {
          "type": "string"
        },
        "Owner": {
          "type": "string"
        },
        "ResourceQuota": {
          "$ref": "#/definitions/kubernetes.K8sResourceQuota"
        }
      },
      "type": "object"
    },
    "kubernetes.K8sPersistentVolume": {
      "properties": {
        "accessModes": {
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "annotations": {
          "additionalProperties": {
            "type": "string"
          },
          "type": "object"
        },
        "capacity": {
          "$ref": "#/definitions/v1.ResourceList"
        },
        "claimRef": {
          "$ref": "#/definitions/v1.ObjectReference"
        },
        "csi": {
          "$ref": "#/definitions/v1.CSIPersistentVolumeSource"
        },
        "name": {
          "type": "string"
        },
        "persistentVolumeReclaimPolicy": {
          "type": "string"
        },
        "storageClassName": {
          "type": "string"
        },
        "volumeMode": {
          "type": "string"
        }
      },
      "type": "object"
    },
    "kubernetes.K8sPersistentVolumeClaim": {
      "properties": {
        "accessModes": {
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "creationDate": {
          "type": "string"
        },
        "id": {
          "type": "string"
        },
        "labels": {
          "additionalProperties": {
            "type": "string"
          },
          "type": "object"
        },
        "name": {
          "type": "string"
        },
        "namespace": {
          "type": "string"
        },
        "owningApplications": {
          "items": {
            "$ref": "#/definitions/kubernetes.K8sApplication"
          },
          "type": "array"
        },
        "phase": {
          "type": "string"
        },
        "resourcesRequests": {
          "$ref": "#/definitions/v1.ResourceList"
        },
        "storage": {
          "type": "integer"
        },
        "storageClass": {
          "type": "string"
        },
        "volumeMode": {
          "type": "string"
        },
        "volumeName": {
          "type": "string"
        }
      },
      "type": "object"
    },
    "kubernetes.K8sResourceQuota": {
      "properties": {
        "cpu": {
          "type": "string"
        },
        "enabled": {
          "type": "boolean"
        },
        "memory": {
          "type": "string"
        }
      },
      "type": "object"
    },
    "kubernetes.K8sRole": {
      "properties": {
        "creationDate": {
          "type": "string"
        },
        "isSystem": {
          "description": "isSystem is true if prefixed with \"system:\" or exists in the kube-system namespace\nor is one of the portainer roles",
          "type": "boolean"
        },
        "name": {
          "type": "string"
        },
        "namespace": {
          "type": "string"
        },
        "uid": {
          "description": "UID of the referent.\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names#uids",
          "type": "string"
        }
      },
      "type": "object"
    },
    "kubernetes.K8sRoleBinding": {
      "properties": {
        "creationDate": {
          "type": "string"
        },
        "isSystem": {
          "type": "boolean"
        },
        "name": {
          "type": "string"
        },
        "namespace": {
          "type": "string"
        },
        "roleRef": {
          "$ref": "#/definitions/v1.RoleRef"
        },
        "subjects": {
          "items": {
            "$ref": "#/definitions/v1.Subject"
          },
          "type": "array"
        },
        "uid": {
          "description": "UID of the referent.\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names#uids",
          "type": "string"
        }
      },
      "type": "object"
    },
    "kubernetes.K8sRoleBindingDeleteRequests": {
      "additionalProperties": {
        "items": {
          "type": "string"
        },
        "type": "array"
      },
      "type": "object"
    },
    "kubernetes.K8sRoleDeleteRequests": {
      "additionalProperties": {
        "items": {
          "type": "string"
        },
        "type": "array"
      },
      "type": "object"
    },
    "kubernetes.K8sSecret": {
      "properties": {
        "Annotations": {
          "additionalProperties": {
            "type": "string"
          },
          "type": "object"
        },
        "ConfigurationOwner": {
          "type": "string"
        },
        "ConfigurationOwnerId": {
          "type": "string"
        },
        "ConfigurationOwners": {
          "items": {
            "$ref": "#/definitions/kubernetes.K8sConfigurationOwnerResource"
          },
          "type": "array"
        },
        "CreationDate": {
          "type": "string"
        },
        "Data": {
          "additionalProperties": {
            "type": "string"
          },
          "type": "object"
        },
        "IsUsed": {
          "type": "boolean"
        },
        "Labels": {
          "additionalProperties": {
            "type": "string"
          },
          "type": "object"
        },
        "Name": {
          "type": "string"
        },
        "Namespace": {
          "type": "string"
        },
        "SecretType": {
          "type": "string"
        },
        "UID": {
          "type": "string"
        }
      },
      "type": "object"
    },
    "kubernetes.K8sServiceAccount": {
      "properties": {
        "creationDate": {
          "type": "string"
        },
        "isSystem": {
          "type": "boolean"
        },
        "name": {
          "type": "string"
        },
        "namespace": {
          "type": "string"
        },
        "uid": {
          "description": "UID of the referent.\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names#uids",
          "type": "string"
        }
      },
      "type": "object"
    },
    "kubernetes.K8sServiceAccountDeleteRequests": {
      "additionalProperties": {
        "items": {
          "type": "string"
        },
        "type": "array"
      },
      "type": "object"
    },
    "kubernetes.K8sServiceDeleteRequests": {
      "additionalProperties": {
        "items": {
          "type": "string"
        },
        "type": "array"
      },
      "type": "object"
    },
    "kubernetes.K8sServiceInfo": {
      "properties": {
        "allocateLoadBalancerNodePorts": {
          "type": "boolean"
        },
        "annotations": {
          "additionalProperties": {
            "type": "string"
          },
          "type": "object"
        },
        "applications": {
          "description": "serviceList screen",
          "items": {
            "$ref": "#/definitions/kubernetes.K8sApplication"
          },
          "type": "array"
        },
        "clusterIPs": {
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "creationDate": {
          "type": "string"
        },
        "externalIPs": {
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "externalName": {
          "type": "string"
        },
        "ingressStatus": {
          "items": {
            "$ref": "#/definitions/kubernetes.K8sServiceIngress"
          },
          "type": "array"
        },
        "labels": {
          "additionalProperties": {
            "type": "string"
          },
          "type": "object"
        },
        "name": {
          "type": "string"
        },
        "namespace": {
          "type": "string"
        },
        "ports": {
          "items": {
            "$ref": "#/definitions/kubernetes.K8sServicePort"
          },
          "type": "array"
        },
        "selector": {
          "additionalProperties": {
            "type": "string"
          },
          "type": "object"
        },
        "type": {
          "type": "string"
        },
        "uid": {
          "type": "string"
        }
      },
      "type": "object"
    },
    "kubernetes.K8sServiceIngress": {
      "properties": {
        "Host": {
          "type": "string"
        },
        "IP": {
          "type": "string"
        }
      },
      "type": "object"
    },
    "kubernetes.K8sServicePort": {
      "properties": {
        "Name": {
          "type": "string"
        },
        "NodePort": {
          "type": "integer"
        },
        "Port": {
          "type": "integer"
        },
        "Protocol": {
          "type": "string"
        },
        "TargetPort": {
          "type": "string"
        }
      },
      "type": "object"
    },
    "kubernetes.K8sStorageClass": {
      "properties": {
        "allowVolumeExpansion": {
          "type": "boolean"
        },
        "name": {
          "type": "string"
        },
        "provisioner": {
          "type": "string"
        },
        "reclaimPolicy": {
          "type": "string"
        }
      },
      "type": "object"
    },
    "kubernetes.K8sVolumeInfo": {
      "properties": {
        "persistentVolume": {
          "$ref": "#/definitions/kubernetes.K8sPersistentVolume"
        },
        "persistentVolumeClaim": {
          "$ref": "#/definitions/kubernetes.K8sPersistentVolumeClaim"
        },
        "storageClass": {
          "$ref": "#/definitions/kubernetes.K8sStorageClass"
        }
      },
      "type": "object"
    },
    "kubernetes.Metadata": {
      "properties": {
        "labels": {
          "additionalProperties": {
            "type": "string"
          },
          "type": "object"
        }
      },
      "type": "object"
    },
    "kubernetes.Pod": {
      "properties": {
        "Status": {
          "type": "string"
        }
      },
      "type": "object"
    },
    "kubernetes.PublishedPort": {
      "properties": {
        "IngressRules": {
          "items": {
            "$ref": "#/definitions/kubernetes.IngressRule"
          },
          "type": "array"
        },
        "Port": {
          "type": "integer"
        }
      },
      "type": "object"
    },
    "kubernetes.TLSInfo": {
      "properties": {
        "hosts": {
          "items": {
            "type": "string"
          },
          "type": "array"
        }
      },
      "type": "object"
    },
    "kubernetes.namespacesToggleSystemPayload": {
      "properties": {
        "system": {
          "description": "Toggle the system state of this namespace to true or false",
          "example": true,
          "type": "boolean"
        }
      },
      "type": "object"
    },
    "ldap.checkPayload": {
      "properties": {
        "ldapsettings": {
          "$ref": "#/definitions/portainer.LDAPSettings"
        }
      },
      "type": "object"
    },
    "motd.motdResponse": {
      "properties": {
        "ContentLayout": {
          "additionalProperties": {
            "type": "string"
          },
          "type": "object"
        },
        "Hash": {
          "items": {
            "type": "integer"
          },
          "type": "array"
        },
        "Message": {
          "type": "string"
        },
        "Style": {
          "type": "string"
        },
        "Title": {
          "type": "string"
        }
      },
      "type": "object"
    },
    "openamt.deviceActionPayload": {
      "properties": {
        "action": {
          "type": "string"
        }
      },
      "type": "object"
    },
    "openamt.deviceFeaturesPayload": {
      "properties": {
        "features": {
          "$ref": "#/definitions/portainer.OpenAMTDeviceEnabledFeatures"
        }
      },
      "type": "object"
    },
    "openamt.openAMTConfigurePayload": {
      "properties": {
        "certFileContent": {
          "type": "string"
        },
        "certFileName": {
          "type": "string"
        },
        "certFilePassword": {
          "type": "string"
        },
        "domainName": {
          "type": "string"
        },
        "enabled": {
          "type": "boolean"
        },
        "mpspassword": {
          "type": "string"
        },
        "mpsserver": {
          "type": "string"
        },
        "mpsuser": {
          "type": "string"
        }
      },
      "type": "object"
    },
    "portainer.APIKey": {
      "properties": {
        "dateCreated": {
          "description": "Unix timestamp (UTC) when the API key was created",
          "type": "integer"
        },
        "description": {
          "example": "portainer-api-key",
          "type": "string"
        },
        "digest": {
          "description": "Digest represents SHA256 hash of the raw API key",
          "type": "string"
        },
        "id": {
          "example": 1,
          "type": "integer"
        },
        "lastUsed": {
          "description": "Unix timestamp (UTC) when the API key was last used",
          "type": "integer"
        },
        "prefix": {
          "description": "API key identifier (7 char prefix)",
          "type": "string"
        },
        "userId": {
          "description": "User Identifier",
          "example": 1,
          "type": "integer"
        }
      },
      "type": "object"
    },
    "portainer.AccessPolicy": {
      "properties": {
        "RoleId": {
          "description": "Role identifier. Reference the role that will be associated to this access policy",
          "example": 1,
          "type": "integer"
        }
      },
      "type": "object"
    },
    "portainer.Authorizations": {
      "additionalProperties": {
        "type": "boolean"
      },
      "type": "object"
    },
    "portainer.AutoUpdateSettings": {
      "properties": {
        "forcePullImage": {
          "description": "Pull latest image",
          "example": false,
          "type": "boolean"
        },
        "forceUpdate": {
          "description": "Force update ignores repo changes",
          "example": false,
          "type": "boolean"
        },
        "interval": {
          "description": "Auto update interval",
          "example": "1m30s",
          "type": "string"
        },
        "jobID": {
          "description": "Autoupdate job id",
          "example": "15",
          "type": "string"
        },
        "webhook": {
          "description": "A UUID generated from client",
          "example": "05de31a2-79fa-4644-9c12-faa67e5c49f0",
          "type": "string"
        }
      },
      "type": "object"
    },
    "portainer.AzureCredentials": {
      "properties": {
        "ApplicationID": {
          "description": "Azure application ID",
          "example": "eag7cdo9-o09l-9i83-9dO9-f0b23oe78db4",
          "type": "string"
        },
        "AuthenticationKey": {
          "description": "Azure authentication key",
          "example": "cOrXoK/1D35w8YQ8nH1/8ZGwzz45JIYD5jxHKXEQknk=",
          "type": "string"
        },
        "TenantID": {
          "description": "Azure tenant ID",
          "example": "34ddc78d-4fel-2358-8cc1-df84c8o839f5",
          "type": "string"
        }
      },
      "type": "object"
    },
    "portainer.CustomTemplate": {
      "properties": {
        "CreatedByUserId": {
          "description": "User identifier who created this template",
          "example": 3,
          "type": "integer"
        },
        "Description": {
          "description": "Description of the template",
          "example": "High performance web server",
          "type": "string"
        },
        "EntryPoint": {
          "description": "Path to the Stack file",
          "example": "docker-compose.yml",
          "type": "string"
        },
        "GitConfig": {
          "$ref": "#/definitions/gittypes.RepoConfig"
        },
        "Id": {
          "description": "CustomTemplate Identifier",
          "example": 1,
          "type": "integer"
        },
        "Logo": {
          "description": "URL of the template's logo",
          "example": "https://portainer.io/img/logo.svg",
          "type": "string"
        },
        "Note": {
          "description": "A note that will be displayed in the UI. Supports HTML content",
          "example": "This is my <b>custom</b> template",
          "type": "string"
        },
        "Platform": {
          "description": "Platform associated to the template.\nValid values are: 1 - 'linux', 2 - 'windows'",
          "enum": [
            1,
            2
          ],
          "example": 1,
          "type": "integer"
        },
        "ProjectPath": {
          "description": "Path on disk to the repository hosting the Stack file",
          "example": "/data/custom_template/3",
          "type": "string"
        },
        "ResourceControl": {
          "$ref": "#/definitions/portainer.ResourceControl"
        },
        "Title": {
          "description": "Title of the template",
          "example": "Nginx",
          "type": "string"
        },
        "Type": {
          "description": "Type of created stack:\n* 1 - swarm\n* 2 - compose\n* 3 - kubernetes",
          "enum": [
            1,
            2,
            3
          ],
          "example": 1,
          "type": "integer"
        },
        "edgeTemplate": {
          "description": "EdgeTemplate indicates if this template purpose for Edge Stack",
          "example": false,
          "type": "boolean"
        },
        "isComposeFormat": {
          "description": "IsComposeFormat indicates if the Kubernetes template is created from a Docker Compose file",
          "example": false,
          "type": "boolean"
        },
        "variables": {
          "items": {
            "$ref": "#/definitions/portainer.CustomTemplateVariableDefinition"
          },
          "type": "array"
        }
      },
      "type": "object"
    },
    "portainer.CustomTemplateVariableDefinition": {
      "properties": {
        "defaultValue": {
          "example": "default value",
          "type": "string"
        },
        "description": {
          "example": "Description",
          "type": "string"
        },
        "label": {
          "example": "My Variable",
          "type": "string"
        },
        "name": {
          "example": "MY_VAR",
          "type": "string"
        }
      },
      "type": "object"
    },
    "portainer.DiagnosticsData": {
      "properties": {
        "DNS": {
          "additionalProperties": {
            "type": "string"
          },
          "type": "object"
        },
        "Log": {
          "type": "string"
        },
        "Proxy": {
          "additionalProperties": {
            "type": "string"
          },
          "type": "object"
        },
        "Telnet": {
          "additionalProperties": {
            "type": "string"
          },
          "type": "object"
        }
      },
      "type": "object"
    },
    "portainer.DockerSnapshot": {
      "properties": {
        "ContainerCount": {
          "type": "integer"
        },
        "DiagnosticsData": {
          "$ref": "#/definitions/portainer.DiagnosticsData"
        },
        "DockerSnapshotRaw": {
          "$ref": "#/definitions/portainer.DockerSnapshotRaw"
        },
        "DockerVersion": {
          "type": "string"
        },
        "GpuUseAll": {
          "type": "boolean"
        },
        "GpuUseList": {
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "HealthyContainerCount": {
          "type": "integer"
        },
        "ImageCount": {
          "type": "integer"
        },
        "IsPodman": {
          "type": "boolean"
        },
        "NodeCount": {
          "type": "integer"
        },
        "RunningContainerCount": {
          "type": "integer"
        },
        "ServiceCount": {
          "type": "integer"
        },
        "StackCount": {
          "type": "integer"
        },
        "StoppedContainerCount": {
          "type": "integer"
        },
        "Swarm": {
          "type": "boolean"
        },
        "Time": {
          "type": "integer"
        },
        "TotalCPU": {
          "type": "integer"
        },
        "TotalMemory": {
          "type": "integer"
        },
        "UnhealthyContainerCount": {
          "type": "integer"
        },
        "VolumeCount": {
          "type": "integer"
        }
      },
      "type": "object"
    },
    "portainer.DockerSnapshotRaw": {
      "type": "object"
    },
    "portainer.EcrData": {
      "properties": {
        "Region": {
          "example": "ap-southeast-2",
          "type": "string"
        }
      },
      "type": "object"
    },
    "portainer.Edge": {
      "properties": {
        "AsyncMode": {
          "description": "Deprecated 2.18",
          "example": false,
          "type": "boolean"
        },
        "CommandInterval": {
          "description": "The command list interval for edge agent - used in edge async mode (in seconds)",
          "example": 5,
          "type": "integer"
        },
        "PingInterval": {
          "description": "The ping interval for edge agent - used in edge async mode (in seconds)",
          "example": 5,
          "type": "integer"
        },
        "SnapshotInterval": {
          "description": "The snapshot interval for edge agent - used in edge async mode (in seconds)",
          "example": 5,
          "type": "integer"
        }
      },
      "type": "object"
    },
    "portainer.EdgeGroup": {
      "properties": {
        "Dynamic": {
          "type": "boolean"
        },
        "Endpoints": {
          "items": {
            "description": "Environment(Endpoint) identifier. Reference the environment(endpoint) that will be used for deployment",
            "type": "integer"
          },
          "type": "array"
        },
        "Id": {
          "description": "EdgeGroup Identifier",
          "example": 1,
          "type": "integer"
        },
        "Name": {
          "type": "string"
        },
        "PartialMatch": {
          "type": "boolean"
        },
        "TagIds": {
          "items": {
            "description": "Tag identifier",
            "example": 1,
            "type": "integer"
          },
          "type": "array"
        }
      },
      "type": "object"
    },
    "portainer.EdgeJob": {
      "properties": {
        "Created": {
          "type": "integer"
        },
        "CronExpression": {
          "type": "string"
        },
        "EdgeGroups": {
          "items": {
            "description": "EdgeGroup Identifier",
            "example": 1,
            "type": "integer"
          },
          "type": "array"
        },
        "Endpoints": {
          "additionalProperties": {
            "$ref": "#/definitions/portainer.EdgeJobEndpointMeta"
          },
          "type": "object"
        },
        "Id": {
          "description": "EdgeJob Identifier",
          "example": 1,
          "type": "integer"
        },
        "Name": {
          "type": "string"
        },
        "Recurring": {
          "type": "boolean"
        },
        "ScriptPath": {
          "type": "string"
        },
        "Version": {
          "type": "integer"
        },
        "groupLogsCollection": {
          "additionalProperties": {
            "$ref": "#/definitions/portainer.EdgeJobEndpointMeta"
          },
          "description": "Field used for log collection of Endpoints belonging to EdgeGroups",
          "type": "object"
        }
      },
      "type": "object"
    },
    "portainer.EdgeJobEndpointMeta": {
      "properties": {
        "collectLogs": {
          "type": "boolean"
        },
        "logsStatus": {
          "type": "integer"
        }
      },
      "type": "object"
    },
    "portainer.EdgeStack": {
      "properties": {
        "CreationDate": {
          "description": "StatusArray    map[EndpointID][]EdgeStackStatus `json:\"StatusArray\"`",
          "type": "integer"
        },
        "DeploymentType": {
          "type": "integer"
        },
        "EdgeGroups": {
          "items": {
            "description": "EdgeGroup Identifier",
            "example": 1,
            "type": "integer"
          },
          "type": "array"
        },
        "EntryPoint": {
          "type": "string"
        },
        "Id": {
          "description": "EdgeStack Identifier",
          "example": 1,
          "type": "integer"
        },
        "ManifestPath": {
          "type": "string"
        },
        "Name": {
          "type": "string"
        },
        "NumDeployments": {
          "type": "integer"
        },
        "ProjectPath": {
          "type": "string"
        },
        "Status": {
          "additionalProperties": {
            "$ref": "#/definitions/portainer.EdgeStackStatus"
          },
          "type": "object"
        },
        "Version": {
          "type": "integer"
        },
        "useManifestNamespaces": {
          "description": "Uses the manifest's namespaces instead of the default one",
          "type": "boolean"
        }
      },
      "type": "object"
    },
    "portainer.EdgeStackDeploymentStatus": {
      "properties": {
        "Version": {
          "type": "integer"
        },
        "error": {
          "type": "string"
        },
        "rollbackTo": {
          "description": "EE only feature",
          "type": "integer"
        },
        "time": {
          "type": "integer"
        },
        "type": {
          "type": "integer"
        }
      },
      "type": "object"
    },
    "portainer.EdgeStackStatus": {
      "properties": {
        "Type": {
          "description": "Deprecated",
          "type": "integer"
        },
        "deploymentInfo": {
          "$ref": "#/definitions/portainer.StackDeploymentInfo",
          "description": "EE only feature"
        },
        "details": {
          "$ref": "#/definitions/portainer.EdgeStackStatusDetails",
          "description": "Deprecated"
        },
        "endpointID": {
          "type": "integer"
        },
        "error": {
          "description": "Deprecated",
          "type": "string"
        },
        "readyRePullImage": {
          "description": "ReadyRePullImage is a flag to indicate whether the auto update is trigger to re-pull image",
          "type": "boolean"
        },
        "status": {
          "items": {
            "$ref": "#/definitions/portainer.EdgeStackDeploymentStatus"
          },
          "type": "array"
        }
      },
      "type": "object"
    },
    "portainer.EdgeStackStatusDetails": {
      "properties": {
        "acknowledged": {
          "type": "boolean"
        },
        "error": {
          "type": "boolean"
        },
        "imagesPulled": {
          "type": "boolean"
        },
        "ok": {
          "type": "boolean"
        },
        "pending": {
          "type": "boolean"
        },
        "remoteUpdateSuccess": {
          "type": "boolean"
        },
        "remove": {
          "type": "boolean"
        }
      },
      "type": "object"
    },
    "portainer.Endpoint": {
      "properties": {
        "AMTDeviceGUID": {
          "description": "The identifier of the AMT Device associated with this environment(endpoint)",
          "example": "4c4c4544-004b-3910-8037-b6c04f504633",
          "type": "string"
        },
        "AuthorizedTeams": {
          "items": {
            "description": "Team Identifier",
            "example": 1,
            "type": "integer"
          },
          "type": "array"
        },
        "AuthorizedUsers": {
          "description": "Deprecated in DBVersion == 18",
          "items": {
            "description": "User Identifier",
            "example": 1,
            "type": "integer"
          },
          "type": "array"
        },
        "AzureCredentials": {
          "$ref": "#/definitions/portainer.AzureCredentials"
        },
        "ComposeSyntaxMaxVersion": {
          "description": "Maximum version of docker-compose",
          "example": "3.8",
          "type": "string"
        },
        "ContainerEngine": {
          "description": "ContainerEngine represents the container engine type. This can be 'docker' or 'podman' when interacting directly with these environmentes, otherwise '' for kubernetes environments.",
          "example": "docker",
          "type": "string"
        },
        "EdgeCheckinInterval": {
          "description": "The check in interval for edge agent (in seconds)",
          "example": 5,
          "type": "integer"
        },
        "EdgeID": {
          "description": "The identifier of the edge agent associated with this environment(endpoint)",
          "type": "string"
        },
        "EdgeKey": {
          "description": "The key which is used to map the agent to Portainer",
          "type": "string"
        },
        "EnableGPUManagement": {
          "type": "boolean"
        },
        "Gpus": {
          "items": {
            "$ref": "#/definitions/portainer.Pair"
          },
          "type": "array"
        },
        "GroupId": {
          "description": "Environment(Endpoint) group identifier",
          "example": 1,
          "type": "integer"
        },
        "Heartbeat": {
          "description": "Heartbeat indicates the heartbeat status of an edge environment",
          "example": true,
          "type": "boolean"
        },
        "Id": {
          "description": "Environment(Endpoint) Identifier",
          "example": 1,
          "type": "integer"
        },
        "IsEdgeDevice": {
          "description": "Deprecated v2.18",
          "type": "boolean"
        },
        "Kubernetes": {
          "$ref": "#/definitions/portainer.KubernetesData",
          "description": "Associated Kubernetes data"
        },
        "Name": {
          "description": "Environment(Endpoint) name",
          "example": "my-environment",
          "type": "string"
        },
        "PostInitMigrations": {
          "$ref": "#/definitions/portainer.EndpointPostInitMigrations",
          "description": "Whether we need to run any \"post init migrations\"."
        },
        "PublicURL": {
          "description": "URL or IP address where exposed containers will be reachable",
          "example": "docker.mydomain.tld:2375",
          "type": "string"
        },
        "Snapshots": {
          "description": "List of snapshots",
          "items": {
            "$ref": "#/definitions/portainer.DockerSnapshot"
          },
          "type": "array"
        },
        "Status": {
          "description": "The status of the environment(endpoint) (1 - up, 2 - down)",
          "example": 1,
          "type": "integer"
        },
        "TLS": {
          "description": "Deprecated fields\nDeprecated in DBVersion == 4",
          "type": "boolean"
        },
        "TLSCACert": {
          "type": "string"
        },
        "TLSCert": {
          "type": "string"
        },
        "TLSConfig": {
          "$ref": "#/definitions/portainer.TLSConfiguration"
        },
        "TLSKey": {
          "type": "string"
        },
        "TagIds": {
          "description": "List of tag identifiers to which this environment(endpoint) is associated",
          "items": {
            "description": "Tag identifier",
            "example": 1,
            "type": "integer"
          },
          "type": "array"
        },
        "Tags": {
          "description": "Deprecated in DBVersion == 22",
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "TeamAccessPolicies": {
          "$ref": "#/definitions/portainer.TeamAccessPolicies",
          "description": "List of team identifiers authorized to connect to this environment(endpoint)"
        },
        "Type": {
          "description": "Environment(Endpoint) environment(endpoint) type. 1 for a Docker environment(endpoint), 2 for an agent on Docker environment(endpoint) or 3 for an Azure environment(endpoint).",
          "example": 1,
          "type": "integer"
        },
        "URL": {
          "description": "URL or IP address of the Docker host associated to this environment(endpoint)",
          "example": "docker.mydomain.tld:2375",
          "type": "string"
        },
        "UserAccessPolicies": {
          "$ref": "#/definitions/portainer.UserAccessPolicies",
          "description": "List of user identifiers authorized to connect to this environment(endpoint)"
        },
        "UserTrusted": {
          "description": "Whether the device has been trusted or not by the user",
          "type": "boolean"
        },
        "agent": {
          "properties": {
            "version": {
              "example": "1.0.0",
              "type": "string"
            }
          },
          "type": "object"
        },
        "edge": {
          "$ref": "#/definitions/portainer.EnvironmentEdgeSettings"
        },
        "lastCheckInDate": {
          "description": "LastCheckInDate mark last check-in date on checkin",
          "type": "integer"
        },
        "queryDate": {
          "description": "QueryDate of each query with the endpoints list",
          "type": "integer"
        },
        "securitySettings": {
          "$ref": "#/definitions/portainer.EndpointSecuritySettings",
          "description": "Environment(Endpoint) specific security settings"
        }
      },
      "type": "object"
    },
    "portainer.EndpointAuthorizations": {
      "additionalProperties": {
        "$ref": "#/definitions/portainer.Authorizations"
      },
      "type": "object"
    },
    "portainer.EndpointGroup": {
      "properties": {
        "AuthorizedTeams": {
          "items": {
            "description": "Team Identifier",
            "example": 1,
            "type": "integer"
          },
          "type": "array"
        },
        "AuthorizedUsers": {
          "description": "Deprecated in DBVersion == 18",
          "items": {
            "description": "User Identifier",
            "example": 1,
            "type": "integer"
          },
          "type": "array"
        },
        "Description": {
          "description": "Description associated to the environment(endpoint) group",
          "example": "Environment(Endpoint) group description",
          "type": "string"
        },
        "Id": {
          "description": "Environment(Endpoint) group Identifier",
          "example": 1,
          "type": "integer"
        },
        "Labels": {
          "description": "Deprecated fields",
          "items": {
            "$ref": "#/definitions/portainer.Pair"
          },
          "type": "array"
        },
        "Name": {
          "description": "Environment(Endpoint) group name",
          "example": "my-environment-group",
          "type": "string"
        },
        "TagIds": {
          "description": "List of tags associated to this environment(endpoint) group",
          "items": {
            "description": "Tag identifier",
            "example": 1,
            "type": "integer"
          },
          "type": "array"
        },
        "Tags": {
          "description": "Deprecated in DBVersion == 22",
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "TeamAccessPolicies": {
          "$ref": "#/definitions/portainer.TeamAccessPolicies"
        },
        "UserAccessPolicies": {
          "$ref": "#/definitions/portainer.UserAccessPolicies"
        }
      },
      "type": "object"
    },
    "portainer.EndpointPostInitMigrations": {
      "properties": {
        "MigrateGPUs": {
          "type": "boolean"
        },
        "MigrateIngresses": {
          "type": "boolean"
        }
      },
      "type": "object"
    },
    "portainer.EndpointSecuritySettings": {
      "properties": {
        "allowBindMountsForRegularUsers": {
          "description": "Whether non-administrator should be able to use bind mounts when creating containers",
          "example": false,
          "type": "boolean"
        },
        "allowContainerCapabilitiesForRegularUsers": {
          "description": "Whether non-administrator should be able to use container capabilities",
          "example": true,
          "type": "boolean"
        },
        "allowDeviceMappingForRegularUsers": {
          "description": "Whether non-administrator should be able to use device mapping",
          "example": true,
          "type": "boolean"
        },
        "allowHostNamespaceForRegularUsers": {
          "description": "Whether non-administrator should be able to use the host pid",
          "example": true,
          "type": "boolean"
        },
        "allowPrivilegedModeForRegularUsers": {
          "description": "Whether non-administrator should be able to use privileged mode when creating containers",
          "example": false,
          "type": "boolean"
        },
        "allowStackManagementForRegularUsers": {
          "description": "Whether non-administrator should be able to manage stacks",
          "example": true,
          "type": "boolean"
        },
        "allowSysctlSettingForRegularUsers": {
          "description": "Whether non-administrator should be able to use sysctl settings",
          "example": true,
          "type": "boolean"
        },
        "allowVolumeBrowserForRegularUsers": {
          "description": "Whether non-administrator should be able to browse volumes",
          "example": true,
          "type": "boolean"
        },
        "enableHostManagementFeatures": {
          "description": "Whether host management features are enabled",
          "example": true,
          "type": "boolean"
        }
      },
      "type": "object"
    },
    "portainer.EnvironmentEdgeSettings": {
      "properties": {
        "CommandInterval": {
          "description": "The command list interval for edge agent - used in edge async mode [seconds]",
          "example": 60,
          "type": "integer"
        },
        "PingInterval": {
          "description": "The ping interval for edge agent - used in edge async mode [seconds]",
          "example": 60,
          "type": "integer"
        },
        "SnapshotInterval": {
          "description": "The snapshot interval for edge agent - used in edge async mode [seconds]",
          "example": 60,
          "type": "integer"
        },
        "asyncMode": {
          "description": "Whether the device has been started in edge async mode",
          "type": "boolean"
        }
      },
      "type": "object"
    },
    "portainer.GitlabRegistryData": {
      "properties": {
        "InstanceURL": {
          "type": "string"
        },
        "ProjectId": {
          "type": "integer"
        },
        "ProjectPath": {
          "type": "string"
        }
      },
      "type": "object"
    },
    "portainer.GlobalDeploymentOptions": {
      "properties": {
        "hideStacksFunctionality": {
          "example": false,
          "type": "boolean"
        }
      },
      "type": "object"
    },
    "portainer.HelmUserRepository": {
      "properties": {
        "Id": {
          "description": "Membership Identifier",
          "example": 1,
          "type": "integer"
        },
        "URL": {
          "description": "Helm repository URL",
          "example": "https://charts.bitnami.com/bitnami",
          "type": "string"
        },
        "UserId": {
          "description": "User identifier",
          "example": 1,
          "type": "integer"
        }
      },
      "type": "object"
    },
    "portainer.InternalAuthSettings": {
      "properties": {
        "requiredPasswordLength": {
          "type": "integer"
        }
      },
      "type": "object"
    },
    "portainer.K8sNamespaceInfo": {
      "properties": {
        "Annotations": {
          "additionalProperties": {
            "type": "string"
          },
          "type": "object"
        },
        "CreationDate": {
          "type": "string"
        },
        "Id": {
          "type": "string"
        },
        "IsDefault": {
          "type": "boolean"
        },
        "IsSystem": {
          "type": "boolean"
        },
        "Name": {
          "type": "string"
        },
        "NamespaceOwner": {
          "type": "string"
        },
        "ResourceQuota": {
          "$ref": "#/definitions/v1.ResourceQuota"
        },
        "Status": {
          "$ref": "#/definitions/v1.NamespaceStatus"
        }
      },
      "type": "object"
    },
    "portainer.K8sNodeLimits": {
      "properties": {
        "CPU": {
          "type": "integer"
        },
        "Memory": {
          "type": "integer"
        }
      },
      "type": "object"
    },
    "portainer.K8sNodesLimits": {
      "additionalProperties": {
        "$ref": "#/definitions/portainer.K8sNodeLimits"
      },
      "type": "object"
    },
    "portainer.KubernetesConfiguration": {
      "properties": {
        "AllowNoneIngressClass": {
          "type": "boolean"
        },
        "EnableResourceOverCommit": {
          "type": "boolean"
        },
        "IngressAvailabilityPerNamespace": {
          "type": "boolean"
        },
        "IngressClasses": {
          "items": {
            "$ref": "#/definitions/portainer.KubernetesIngressClassConfig"
          },
          "type": "array"
        },
        "ResourceOverCommitPercentage": {
          "type": "integer"
        },
        "RestrictDefaultNamespace": {
          "type": "boolean"
        },
        "StorageClasses": {
          "items": {
            "$ref": "#/definitions/portainer.KubernetesStorageClassConfig"
          },
          "type": "array"
        },
        "UseLoadBalancer": {
          "type": "boolean"
        },
        "UseServerMetrics": {
          "type": "boolean"
        }
      },
      "type": "object"
    },
    "portainer.KubernetesData": {
      "properties": {
        "Configuration": {
          "$ref": "#/definitions/portainer.KubernetesConfiguration"
        },
        "Flags": {
          "$ref": "#/definitions/portainer.KubernetesFlags"
        },
        "Snapshots": {
          "items": {
            "$ref": "#/definitions/portainer.KubernetesSnapshot"
          },
          "type": "array"
        }
      },
      "type": "object"
    },
    "portainer.KubernetesFlags": {
      "properties": {
        "IsServerIngressClassDetected": {
          "type": "boolean"
        },
        "IsServerMetricsDetected": {
          "type": "boolean"
        },
        "IsServerStorageDetected": {
          "type": "boolean"
        }
      },
      "type": "object"
    },
    "portainer.KubernetesIngressClassConfig": {
      "properties": {
        "Blocked": {
          "type": "boolean"
        },
        "BlockedNamespaces": {
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "Name": {
          "type": "string"
        },
        "Type": {
          "type": "string"
        }
      },
      "type": "object"
    },
    "portainer.KubernetesSnapshot": {
      "properties": {
        "DiagnosticsData": {
          "$ref": "#/definitions/portainer.DiagnosticsData"
        },
        "KubernetesVersion": {
          "type": "string"
        },
        "NodeCount": {
          "type": "integer"
        },
        "Time": {
          "type": "integer"
        },
        "TotalCPU": {
          "type": "integer"
        },
        "TotalMemory": {
          "type": "integer"
        }
      },
      "type": "object"
    },
    "portainer.KubernetesStorageClassConfig": {
      "properties": {
        "AccessModes": {
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "AllowVolumeExpansion": {
          "type": "boolean"
        },
        "Name": {
          "type": "string"
        },
        "Provisioner": {
          "type": "string"
        }
      },
      "type": "object"
    },
    "portainer.LDAPGroupSearchSettings": {
      "properties": {
        "GroupAttribute": {
          "description": "LDAP attribute which denotes the group membership",
          "example": "member",
          "type": "string"
        },
        "GroupBaseDN": {
          "description": "The distinguished name of the element from which the LDAP server will search for groups",
          "example": "dc=ldap,dc=domain,dc=tld",
          "type": "string"
        },
        "GroupFilter": {
          "description": "The LDAP search filter used to select group elements, optional",
          "example": "(objectClass=account",
          "type": "string"
        }
      },
      "type": "object"
    },
    "portainer.LDAPSearchSettings": {
      "properties": {
        "BaseDN": {
          "description": "The distinguished name of the element from which the LDAP server will search for users",
          "example": "dc=ldap,dc=domain,dc=tld",
          "type": "string"
        },
        "Filter": {
          "description": "Optional LDAP search filter used to select user elements",
          "example": "(objectClass=account)",
          "type": "string"
        },
        "UserNameAttribute": {
          "description": "LDAP attribute which denotes the username",
          "example": "uid",
          "type": "string"
        }
      },
      "type": "object"
    },
    "portainer.LDAPSettings": {
      "properties": {
        "AnonymousMode": {
          "description": "Enable this option if the server is configured for Anonymous access. When enabled, ReaderDN and Password will not be used",
          "example": true,
          "type": "boolean"
        },
        "AutoCreateUsers": {
          "description": "Automatically provision users and assign them to matching LDAP group names",
          "example": true,
          "type": "boolean"
        },
        "GroupSearchSettings": {
          "items": {
            "$ref": "#/definitions/portainer.LDAPGroupSearchSettings"
          },
          "type": "array"
        },
        "Password": {
          "description": "Password of the account that will be used to search users",
          "example": "readonly-password",
          "type": "string"
        },
        "ReaderDN": {
          "description": "Account that will be used to search for users",
          "example": "cn=readonly-account,dc=ldap,dc=domain,dc=tld",
          "type": "string"
        },
        "SearchSettings": {
          "items": {
            "$ref": "#/definitions/portainer.LDAPSearchSettings"
          },
          "type": "array"
        },
        "StartTLS": {
          "description": "Whether LDAP connection should use StartTLS",
          "example": true,
          "type": "boolean"
        },
        "TLSConfig": {
          "$ref": "#/definitions/portainer.TLSConfiguration"
        },
        "URL": {
          "description": "URL or IP address of the LDAP server",
          "example": "myldap.domain.tld:389",
          "type": "string"
        }
      },
      "type": "object"
    },
    "portainer.OAuthSettings": {
      "properties": {
        "AccessTokenURI": {
          "type": "string"
        },
        "AuthStyle": {
          "type": "integer"
        },
        "AuthorizationURI": {
          "type": "string"
        },
        "ClientID": {
          "type": "string"
        },
        "ClientSecret": {
          "type": "string"
        },
        "DefaultTeamID": {
          "type": "integer"
        },
        "KubeSecretKey": {
          "items": {
            "type": "integer"
          },
          "type": "array"
        },
        "LogoutURI": {
          "type": "string"
        },
        "OAuthAutoCreateUsers": {
          "type": "boolean"
        },
        "RedirectURI": {
          "type": "string"
        },
        "ResourceURI": {
          "type": "string"
        },
        "SSO": {
          "type": "boolean"
        },
        "Scopes": {
          "type": "string"
        },
        "UserIdentifier": {
          "type": "string"
        }
      },
      "type": "object"
    },
    "portainer.OpenAMTConfiguration": {
      "properties": {
        "certFileContent": {
          "type": "string"
        },
        "certFileName": {
          "type": "string"
        },
        "certFilePassword": {
          "type": "string"
        },
        "domainName": {
          "type": "string"
        },
        "enabled": {
          "type": "boolean"
        },
        "mpsPassword": {
          "type": "string"
        },
        "mpsServer": {
          "type": "string"
        },
        "mpsToken": {
          "description": "retrieved from API",
          "type": "string"
        },
        "mpsUser": {
          "type": "string"
        }
      },
      "type": "object"
    },
    "portainer.OpenAMTDeviceEnabledFeatures": {
      "properties": {
        "IDER": {
          "type": "boolean"
        },
        "KVM": {
          "type": "boolean"
        },
        "SOL": {
          "type": "boolean"
        },
        "redirection": {
          "type": "boolean"
        },
        "userConsent": {
          "type": "string"
        }
      },
      "type": "object"
    },
    "portainer.Pair": {
      "properties": {
        "name": {
          "example": "name",
          "type": "string"
        },
        "value": {
          "example": "value",
          "type": "string"
        }
      },
      "type": "object"
    },
    "portainer.QuayRegistryData": {
      "properties": {
        "OrganisationName": {
          "type": "string"
        },
        "UseOrganisation": {
          "type": "boolean"
        }
      },
      "type": "object"
    },
    "portainer.Registry": {
      "properties": {
        "AccessToken": {
          "description": "Stores temporary access token",
          "type": "string"
        },
        "AccessTokenExpiry": {
          "type": "integer"
        },
        "Authentication": {
          "description": "Is authentication against this registry enabled",
          "example": true,
          "type": "boolean"
        },
        "AuthorizedTeams": {
          "description": "Deprecated in DBVersion == 18",
          "items": {
            "description": "Team Identifier",
            "example": 1,
            "type": "integer"
          },
          "type": "array"
        },
        "AuthorizedUsers": {
          "description": "Deprecated in DBVersion == 18",
          "items": {
            "description": "User Identifier",
            "example": 1,
            "type": "integer"
          },
          "type": "array"
        },
        "BaseURL": {
          "description": "Base URL, introduced for ProGet registry",
          "example": "registry.mydomain.tld:2375",
          "type": "string"
        },
        "Ecr": {
          "$ref": "#/definitions/portainer.EcrData"
        },
        "Gitlab": {
          "$ref": "#/definitions/portainer.GitlabRegistryData"
        },
        "Id": {
          "description": "Registry Identifier",
          "example": 1,
          "type": "integer"
        },
        "ManagementConfiguration": {
          "$ref": "#/definitions/portainer.RegistryManagementConfiguration"
        },
        "Name": {
          "description": "Registry Name",
          "example": "my-registry",
          "type": "string"
        },
        "Password": {
          "description": "Password or SecretAccessKey used to authenticate against this registry",
          "example": "registry_password",
          "type": "string"
        },
        "Quay": {
          "$ref": "#/definitions/portainer.QuayRegistryData"
        },
        "RegistryAccesses": {
          "$ref": "#/definitions/portainer.RegistryAccesses"
        },
        "TeamAccessPolicies": {
          "$ref": "#/definitions/portainer.TeamAccessPolicies",
          "description": "Deprecated in DBVersion == 31"
        },
        "Type": {
          "description": "Registry Type (1 - Quay, 2 - Azure, 3 - Custom, 4 - Gitlab, 5 - ProGet, 6 - DockerHub, 7 - ECR)",
          "enum": [
            1,
            2,
            3,
            4,
            5,
            6,
            7
          ],
          "type": "integer"
        },
        "URL": {
          "description": "URL or IP address of the Docker registry",
          "example": "registry.mydomain.tld:2375",
          "type": "string"
        },
        "UserAccessPolicies": {
          "$ref": "#/definitions/portainer.UserAccessPolicies",
          "description": "Deprecated fields\nDeprecated in DBVersion == 31"
        },
        "Username": {
          "description": "Username or AccessKeyID used to authenticate against this registry",
          "example": "registry user",
          "type": "string"
        }
      },
      "type": "object"
    },
    "portainer.RegistryAccessPolicies": {
      "properties": {
        "Namespaces": {
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "TeamAccessPolicies": {
          "$ref": "#/definitions/portainer.TeamAccessPolicies"
        },
        "UserAccessPolicies": {
          "$ref": "#/definitions/portainer.UserAccessPolicies"
        }
      },
      "type": "object"
    },
    "portainer.RegistryAccesses": {
      "additionalProperties": {
        "$ref": "#/definitions/portainer.RegistryAccessPolicies"
      },
      "type": "object"
    },
    "portainer.RegistryManagementConfiguration": {
      "properties": {
        "AccessToken": {
          "type": "string"
        },
        "AccessTokenExpiry": {
          "type": "integer"
        },
        "Authentication": {
          "type": "boolean"
        },
        "Ecr": {
          "$ref": "#/definitions/portainer.EcrData"
        },
        "Password": {
          "type": "string"
        },
        "TLSConfig": {
          "$ref": "#/definitions/portainer.TLSConfiguration"
        },
        "Type": {
          "description": "Registry Type (1 - Quay, 2 - Azure, 3 - Custom, 4 - Gitlab, 5 - ProGet, 6 - DockerHub, 7 - ECR)",
          "type": "integer"
        },
        "Username": {
          "type": "string"
        }
      },
      "type": "object"
    },
    "portainer.ResourceControl": {
      "properties": {
        "AccessLevel": {
          "type": "integer"
        },
        "AdministratorsOnly": {
          "description": "Permit access to resource only to admins",
          "example": true,
          "type": "boolean"
        },
        "Id": {
          "description": "ResourceControl Identifier",
          "example": 1,
          "type": "integer"
        },
        "OwnerId": {
          "description": "Deprecated fields\nDeprecated in DBVersion == 2",
          "type": "integer"
        },
        "Public": {
          "description": "Permit access to the associated resource to any user",
          "example": true,
          "type": "boolean"
        },
        "ResourceId": {
          "description": "Docker resource identifier on which access control will be applied.\\\nIn the case of a resource control applied to a stack, use the stack name as identifier",
          "example": "617c5f22bb9b023d6daab7cba43a57576f83492867bc767d1c59416b065e5f08",
          "type": "string"
        },
        "SubResourceIds": {
          "description": "List of Docker resources that will inherit this access control",
          "example": [
            "617c5f22bb9b023d6daab7cba43a57576f83492867bc767d1c59416b065e5f08"
          ],
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "System": {
          "type": "boolean"
        },
        "TeamAccesses": {
          "items": {
            "$ref": "#/definitions/portainer.TeamResourceAccess"
          },
          "type": "array"
        },
        "Type": {
          "description": "Type of Docker resource. Valid values are: 1- container, 2 -service\n3 - volume, 4 - secret, 5 - stack, 6 - config or 7 - custom template",
          "example": 1,
          "type": "integer"
        },
        "UserAccesses": {
          "items": {
            "$ref": "#/definitions/portainer.UserResourceAccess"
          },
          "type": "array"
        }
      },
      "type": "object"
    },
    "portainer.Role": {
      "properties": {
        "Authorizations": {
          "$ref": "#/definitions/portainer.Authorizations",
          "description": "Authorizations associated to a role"
        },
        "Description": {
          "description": "Role description",
          "example": "Read-only access of all resources in an environment(endpoint)",
          "type": "string"
        },
        "Id": {
          "description": "Role Identifier",
          "example": 1,
          "type": "integer"
        },
        "Name": {
          "description": "Role name",
          "example": "HelpDesk",
          "type": "string"
        },
        "Priority": {
          "type": "integer"
        }
      },
      "type": "object"
    },
    "portainer.SSLSettings": {
      "properties": {
        "certPath": {
          "type": "string"
        },
        "httpEnabled": {
          "type": "boolean"
        },
        "keyPath": {
          "type": "string"
        },
        "selfSigned": {
          "type": "boolean"
        }
      },
      "type": "object"
    },
    "portainer.Settings": {
      "properties": {
        "AgentSecret": {
          "description": "Container environment parameter AGENT_SECRET",
          "type": "string"
        },
        "AllowBindMountsForRegularUsers": {
          "type": "boolean"
        },
        "AllowContainerCapabilitiesForRegularUsers": {
          "type": "boolean"
        },
        "AllowDeviceMappingForRegularUsers": {
          "type": "boolean"
        },
        "AllowHostNamespaceForRegularUsers": {
          "type": "boolean"
        },
        "AllowPrivilegedModeForRegularUsers": {
          "type": "boolean"
        },
        "AllowStackManagementForRegularUsers": {
          "type": "boolean"
        },
        "AllowVolumeBrowserForRegularUsers": {
          "type": "boolean"
        },
        "AuthenticationMethod": {
          "description": "Active authentication method for the Portainer instance. Valid values are: 1 for internal, 2 for LDAP, or 3 for oauth",
          "example": 1,
          "type": "integer"
        },
        "BlackListedLabels": {
          "description": "A list of label name & value that will be used to hide containers when querying containers",
          "items": {
            "$ref": "#/definitions/portainer.Pair"
          },
          "type": "array"
        },
        "DisplayDonationHeader": {
          "description": "Deprecated fields",
          "type": "boolean"
        },
        "DisplayExternalContributors": {
          "type": "boolean"
        },
        "Edge": {
          "$ref": "#/definitions/portainer.Edge"
        },
        "EdgeAgentCheckinInterval": {
          "description": "The default check in interval for edge agent (in seconds)",
          "example": 5,
          "type": "integer"
        },
        "EdgePortainerUrl": {
          "description": "EdgePortainerURL is the URL that is exposed to edge agents",
          "type": "string"
        },
        "EnableEdgeComputeFeatures": {
          "description": "Whether edge compute features are enabled",
          "type": "boolean"
        },
        "EnableHostManagementFeatures": {
          "description": "Deprecated fields v26",
          "type": "boolean"
        },
        "EnableTelemetry": {
          "description": "Whether telemetry is enabled",
          "example": false,
          "type": "boolean"
        },
        "EnforceEdgeID": {
          "description": "EnforceEdgeID makes Portainer store the Edge ID instead of accepting anyone",
          "example": false,
          "type": "boolean"
        },
        "FeatureFlagSettings": {
          "additionalProperties": {
            "type": "boolean"
          },
          "type": "object"
        },
        "GlobalDeploymentOptions": {
          "$ref": "#/definitions/portainer.GlobalDeploymentOptions",
          "description": "Deployment options for encouraging git ops workflows"
        },
        "HelmRepositoryURL": {
          "description": "Helm repository URL, defaults to \"https://charts.bitnami.com/bitnami\"",
          "example": "https://charts.bitnami.com/bitnami",
          "type": "string"
        },
        "InternalAuthSettings": {
          "$ref": "#/definitions/portainer.InternalAuthSettings"
        },
        "IsDockerDesktopExtension": {
          "type": "boolean"
        },
        "KubeconfigExpiry": {
          "description": "The expiry of a Kubeconfig",
          "example": "24h",
          "type": "string"
        },
        "KubectlShellImage": {
          "description": "KubectlImage, defaults to portainer/kubectl-shell",
          "example": "portainer/kubectl-shell",
          "type": "string"
        },
        "LDAPSettings": {
          "$ref": "#/definitions/portainer.LDAPSettings"
        },
        "LogoURL": {
          "description": "URL to a logo that will be displayed on the login page as well as on top of the sidebar. Will use default Portainer logo when value is empty string",
          "example": "https://mycompany.mydomain.tld/logo.png",
          "type": "string"
        },
        "OAuthSettings": {
          "$ref": "#/definitions/portainer.OAuthSettings"
        },
        "SnapshotInterval": {
          "description": "The interval in which environment(endpoint) snapshots are created",
          "example": "5m",
          "type": "string"
        },
        "TemplatesURL": {
          "description": "URL to the templates that will be displayed in the UI when navigating to App Templates",
          "example": "https://raw.githubusercontent.com/portainer/templates/master/templates.json",
          "type": "string"
        },
        "TrustOnFirstConnect": {
          "description": "TrustOnFirstConnect makes Portainer accepting edge agent connection by default",
          "example": false,
          "type": "boolean"
        },
        "UserSessionTimeout": {
          "description": "The duration of a user session",
          "example": "5m",
          "type": "string"
        },
        "openAMTConfiguration": {
          "$ref": "#/definitions/portainer.OpenAMTConfiguration"
        }
      },
      "type": "object"
    },
    "portainer.Stack": {
      "properties": {
        "AdditionalFiles": {
          "description": "Only applies when deploying stack with multiple files",
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "AutoUpdate": {
          "$ref": "#/definitions/portainer.AutoUpdateSettings",
          "description": "The GitOps update settings of a git stack"
        },
        "EndpointId": {
          "description": "Environment(Endpoint) identifier. Reference the environment(endpoint) that will be used for deployment",
          "example": 1,
          "type": "integer"
        },
        "EntryPoint": {
          "description": "Path to the Stack file",
          "example": "docker-compose.yml",
          "type": "string"
        },
        "Env": {
          "description": "A list of environment(endpoint) variables used during stack deployment",
          "items": {
            "$ref": "#/definitions/portainer.Pair"
          },
          "type": "array"
        },
        "Id": {
          "description": "Stack Identifier",
          "example": 1,
          "type": "integer"
        },
        "Name": {
          "description": "Stack name",
          "example": "myStack",
          "type": "string"
        },
        "Option": {
          "$ref": "#/definitions/portainer.StackOption",
          "description": "The stack deployment option"
        },
        "ResourceControl": {
          "$ref": "#/definitions/portainer.ResourceControl"
        },
        "Status": {
          "description": "Stack status (1 - active, 2 - inactive)",
          "example": 1,
          "type": "integer"
        },
        "SwarmId": {
          "description": "Cluster identifier of the Swarm cluster where the stack is deployed",
          "example": "jpofkc0i9uo9wtx1zesuk649w",
          "type": "string"
        },
        "Type": {
          "description": "Stack type. 1 for a Swarm stack, 2 for a Compose stack",
          "example": 2,
          "type": "integer"
        },
        "createdBy": {
          "description": "The username which created this stack",
          "example": "admin",
          "type": "string"
        },
        "creationDate": {
          "description": "The date in unix time when stack was created",
          "example": 1587399600,
          "type": "integer"
        },
        "fromAppTemplate": {
          "description": "Whether the stack is from a app template",
          "example": false,
          "type": "boolean"
        },
        "gitConfig": {
          "$ref": "#/definitions/gittypes.RepoConfig",
          "description": "The git config of this stack"
        },
        "namespace": {
          "description": "Kubernetes namespace if stack is a kube application",
          "example": "default",
          "type": "string"
        },
        "projectPath": {
          "description": "Path on disk to the repository hosting the Stack file",
          "example": "/data/compose/myStack_jpofkc0i9uo9wtx1zesuk649w",
          "type": "string"
        },
        "updateDate": {
          "description": "The date in unix time when stack was last updated",
          "example": 1587399600,
          "type": "integer"
        },
        "updatedBy": {
          "description": "The username which last updated this stack",
          "example": "bob",
          "type": "string"
        }
      },
      "type": "object"
    },
    "portainer.StackDeploymentInfo": {
      "properties": {
        "ConfigHash": {
          "description": "ConfigHash is the commit hash of the git repository used for deploying the stack",
          "type": "string"
        },
        "FileVersion": {
          "description": "FileVersion is the version of the stack file, used to detect changes",
          "type": "integer"
        },
        "Version": {
          "description": "Version is the version of the stack and also is the deployed version in edge agent",
          "type": "integer"
        }
      },
      "type": "object"
    },
    "portainer.StackOption": {
      "properties": {
        "prune": {
          "description": "Prune services that are no longer referenced",
          "example": false,
          "type": "boolean"
        }
      },
      "type": "object"
    },
    "portainer.TLSConfiguration": {
      "properties": {
        "TLS": {
          "description": "Use TLS",
          "example": true,
          "type": "boolean"
        },
        "TLSCACert": {
          "description": "Path to the TLS CA certificate file",
          "example": "/data/tls/ca.pem",
          "type": "string"
        },
        "TLSCert": {
          "description": "Path to the TLS client certificate file",
          "example": "/data/tls/cert.pem",
          "type": "string"
        },
        "TLSKey": {
          "description": "Path to the TLS client key file",
          "example": "/data/tls/key.pem",
          "type": "string"
        },
        "TLSSkipVerify": {
          "description": "Skip the verification of the server TLS certificate",
          "example": false,
          "type": "boolean"
        }
      },
      "type": "object"
    },
    "portainer.Tag": {
      "properties": {
        "EndpointGroups": {
          "additionalProperties": {
            "type": "boolean"
          },
          "description": "A set of environment(endpoint) group ids that have this tag",
          "type": "object"
        },
        "Endpoints": {
          "additionalProperties": {
            "type": "boolean"
          },
          "description": "A set of environment(endpoint) ids that have this tag",
          "type": "object"
        },
        "Name": {
          "description": "Tag name",
          "example": "org/acme",
          "type": "string"
        },
        "id": {
          "description": "Tag identifier",
          "example": 1,
          "type": "integer"
        }
      },
      "type": "object"
    },
    "portainer.Team": {
      "properties": {
        "Id": {
          "description": "Team Identifier",
          "example": 1,
          "type": "integer"
        },
        "Name": {
          "description": "Team name",
          "example": "developers",
          "type": "string"
        }
      },
      "type": "object"
    },
    "portainer.TeamAccessPolicies": {
      "additionalProperties": {
        "$ref": "#/definitions/portainer.AccessPolicy"
      },
      "type": "object"
    },
    "portainer.TeamMembership": {
      "properties": {
        "Id": {
          "description": "Membership Identifier",
          "example": 1,
          "type": "integer"
        },
        "Role": {
          "description": "Team role (1 for team leader and 2 for team member)",
          "example": 1,
          "type": "integer"
        },
        "TeamID": {
          "description": "Team identifier",
          "example": 1,
          "type": "integer"
        },
        "UserID": {
          "description": "User identifier",
          "example": 1,
          "type": "integer"
        }
      },
      "type": "object"
    },
    "portainer.TeamResourceAccess": {
      "properties": {
        "AccessLevel": {
          "type": "integer"
        },
        "TeamId": {
          "type": "integer"
        }
      },
      "type": "object"
    },
    "portainer.Template": {
      "properties": {
        "administrator_only": {
          "description": "Whether the template should be available to administrators only",
          "example": true,
          "type": "boolean"
        },
        "categories": {
          "description": "A list of categories associated to the template",
          "example": [
            "database"
          ],
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "command": {
          "description": "The command that will be executed in a container template",
          "example": "ls -lah",
          "type": "string"
        },
        "description": {
          "description": "Description of the template",
          "example": "High performance web server",
          "type": "string"
        },
        "env": {
          "description": "A list of environment(endpoint) variables used during the template deployment",
          "items": {
            "$ref": "#/definitions/portainer.TemplateEnv"
          },
          "type": "array"
        },
        "hostname": {
          "description": "Container hostname",
          "example": "mycontainer",
          "type": "string"
        },
        "id": {
          "description": "Mandatory container/stack fields\nTemplate Identifier",
          "example": 1,
          "type": "integer"
        },
        "image": {
          "description": "Mandatory container fields\nImage associated to a container template. Mandatory for a container template",
          "example": "nginx:latest",
          "type": "string"
        },
        "interactive": {
          "description": "Whether the container should be started in\ninteractive mode (-i -t equivalent on the CLI)",
          "example": true,
          "type": "boolean"
        },
        "labels": {
          "description": "Container labels",
          "items": {
            "$ref": "#/definitions/portainer.Pair"
          },
          "type": "array"
        },
        "logo": {
          "description": "URL of the template's logo",
          "example": "https://portainer.io/img/logo.svg",
          "type": "string"
        },
        "name": {
          "description": "Optional stack/container fields\nDefault name for the stack/container to be used on deployment",
          "example": "mystackname",
          "type": "string"
        },
        "network": {
          "description": "Name of a network that will be used on container deployment if it exists inside the environment(endpoint)",
          "example": "mynet",
          "type": "string"
        },
        "note": {
          "description": "A note that will be displayed in the UI. Supports HTML content",
          "example": "This is my <b>custom</b> template",
          "type": "string"
        },
        "platform": {
          "description": "Platform associated to the template.\nValid values are: 'linux', 'windows' or leave empty for multi-platform",
          "example": "linux",
          "type": "string"
        },
        "ports": {
          "description": "A list of ports exposed by the container",
          "example": [
            "8080:80/tcp"
          ],
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "privileged": {
          "description": "Whether the container should be started in privileged mode",
          "example": true,
          "type": "boolean"
        },
        "registry": {
          "description": "Optional container fields\nThe URL of a registry associated to the image for a container template",
          "example": "quay.io",
          "type": "string"
        },
        "repository": {
          "$ref": "#/definitions/portainer.TemplateRepository",
          "description": "Mandatory stack fields"
        },
        "restart_policy": {
          "description": "Container restart policy",
          "example": "on-failure",
          "type": "string"
        },
        "stackFile": {
          "description": "Mandatory Edge stack fields\nStack file used for this template",
          "type": "string"
        },
        "title": {
          "description": "Title of the template",
          "example": "Nginx",
          "type": "string"
        },
        "type": {
          "description": "Template type. Valid values are: 1 (container), 2 (Swarm stack), 3 (Compose stack), 4 (Compose edge stack)",
          "example": 1,
          "type": "integer"
        },
        "volumes": {
          "description": "A list of volumes used during the container template deployment",
          "items": {
            "$ref": "#/definitions/portainer.TemplateVolume"
          },
          "type": "array"
        }
      },
      "type": "object"
    },
    "portainer.TemplateEnv": {
      "properties": {
        "default": {
          "description": "Default value that will be set for the variable",
          "example": "default_value",
          "type": "string"
        },
        "description": {
          "description": "Content of the tooltip that will be generated in the UI",
          "example": "MySQL root account password",
          "type": "string"
        },
        "label": {
          "description": "Text for the label that will be generated in the UI",
          "example": "Root password",
          "type": "string"
        },
        "name": {
          "description": "name of the environment(endpoint) variable",
          "example": "MYSQL_ROOT_PASSWORD",
          "type": "string"
        },
        "preset": {
          "description": "If set to true, will not generate any input for this variable in the UI",
          "example": false,
          "type": "boolean"
        },
        "select": {
          "description": "A list of name/value that will be used to generate a dropdown in the UI",
          "items": {
            "$ref": "#/definitions/portainer.TemplateEnvSelect"
          },
          "type": "array"
        }
      },
      "type": "object"
    },
    "portainer.TemplateEnvSelect": {
      "properties": {
        "default": {
          "description": "Will set this choice as the default choice",
          "example": false,
          "type": "boolean"
        },
        "text": {
          "description": "Some text that will displayed as a choice",
          "example": "text value",
          "type": "string"
        },
        "value": {
          "description": "A value that will be associated to the choice",
          "example": "value",
          "type": "string"
        }
      },
      "type": "object"
    },
    "portainer.TemplateRepository": {
      "properties": {
        "stackfile": {
          "description": "Path to the stack file inside the git repository",
          "example": "./subfolder/docker-compose.yml",
          "type": "string"
        },
        "url": {
          "description": "URL of a git repository used to deploy a stack template. Mandatory for a Swarm/Compose stack template",
          "example": "https://github.com/portainer/portainer-compose",
          "type": "string"
        }
      },
      "type": "object"
    },
    "portainer.TemplateVolume": {
      "properties": {
        "bind": {
          "description": "Path on the host",
          "example": "/tmp",
          "type": "string"
        },
        "container": {
          "description": "Path inside the container",
          "example": "/data",
          "type": "string"
        },
        "readonly": {
          "description": "Whether the volume used should be readonly",
          "example": true,
          "type": "boolean"
        }
      },
      "type": "object"
    },
    "portainer.User": {
      "properties": {
        "Id": {
          "description": "User Identifier",
          "example": 1,
          "type": "integer"
        },
        "Role": {
          "description": "User role (1 for administrator account and 2 for regular account)",
          "example": 1,
          "type": "integer"
        },
        "ThemeSettings": {
          "$ref": "#/definitions/portainer.UserThemeSettings"
        },
        "TokenIssueAt": {
          "example": 1,
          "type": "integer"
        },
        "UseCache": {
          "example": true,
          "type": "boolean"
        },
        "UserTheme": {
          "description": "Deprecated",
          "example": "dark",
          "type": "string"
        },
        "Username": {
          "example": "bob",
          "type": "string"
        },
        "endpointAuthorizations": {
          "$ref": "#/definitions/portainer.EndpointAuthorizations",
          "description": "Deprecated in DBVersion == 25"
        },
        "portainerAuthorizations": {
          "$ref": "#/definitions/portainer.Authorizations",
          "description": "Deprecated in DBVersion == 25"
        }
      },
      "type": "object"
    },
    "portainer.UserAccessPolicies": {
      "additionalProperties": {
        "$ref": "#/definitions/portainer.AccessPolicy"
      },
      "type": "object"
    },
    "portainer.UserResourceAccess": {
      "properties": {
        "AccessLevel": {
          "type": "integer"
        },
        "UserId": {
          "description": "User identifier who created this template",
          "type": "integer"
        }
      },
      "type": "object"
    },
    "portainer.UserThemeSettings": {
      "properties": {
        "color": {
          "description": "Color represents the color theme of the UI",
          "enum": [
            "dark",
            "light",
            "highcontrast",
            "auto"
          ],
          "example": "dark",
          "type": "string"
        }
      },
      "type": "object"
    },
    "portainer.Webhook": {
      "properties": {
        "EndpointId": {
          "description": "Environment(Endpoint) identifier. Reference the environment(endpoint) that will be used for deployment",
          "type": "integer"
        },
        "Id": {
          "description": "Webhook Identifier",
          "example": 1,
          "type": "integer"
        },
        "RegistryId": {
          "description": "Registry Identifier",
          "type": "integer"
        },
        "ResourceId": {
          "type": "string"
        },
        "Token": {
          "type": "string"
        },
        "Type": {
          "description": "Type of webhook (1 - service)",
          "type": "integer"
        }
      },
      "type": "object"
    },
    "registries.registryConfigurePayload": {
      "properties": {
        "authentication": {
          "description": "Is authentication against this registry enabled",
          "example": false,
          "type": "boolean"
        },
        "password": {
          "description": "Password used to authenticate against this registry. required when Authentication is true",
          "example": "registry_password",
          "type": "string"
        },
        "region": {
          "description": "ECR region",
          "type": "string"
        },
        "tls": {
          "description": "Use TLS",
          "example": true,
          "type": "boolean"
        },
        "tlscacertFile": {
          "description": "The TLS CA certificate file",
          "items": {
            "type": "integer"
          },
          "type": "array"
        },
        "tlscertFile": {
          "description": "The TLS client certificate file",
          "items": {
            "type": "integer"
          },
          "type": "array"
        },
        "tlskeyFile": {
          "description": "The TLS client key file",
          "items": {
            "type": "integer"
          },
          "type": "array"
        },
        "tlsskipVerify": {
          "description": "Skip the verification of the server TLS certificate",
          "example": false,
          "type": "boolean"
        },
        "username": {
          "description": "Username used to authenticate against this registry. Required when Authentication is true",
          "example": "registry_user",
          "type": "string"
        }
      },
      "required": [
        "authentication"
      ],
      "type": "object"
    },
    "registries.registryCreatePayload": {
      "properties": {
        "authentication": {
          "description": "Is authentication against this registry enabled",
          "example": false,
          "type": "boolean"
        },
        "baseURL": {
          "description": "BaseURL required for ProGet registry",
          "example": "registry.mydomain.tld:2375",
          "type": "string"
        },
        "ecr": {
          "$ref": "#/definitions/portainer.EcrData",
          "description": "ECR specific details, required when type = 7"
        },
        "gitlab": {
          "$ref": "#/definitions/portainer.GitlabRegistryData",
          "description": "Gitlab specific details, required when type = 4"
        },
        "name": {
          "description": "Name that will be used to identify this registry",
          "example": "my-registry",
          "type": "string"
        },
        "password": {
          "description": "Password used to authenticate against this registry. required when Authentication is true",
          "example": "registry_password",
          "type": "string"
        },
        "quay": {
          "$ref": "#/definitions/portainer.QuayRegistryData",
          "description": "Quay specific details, required when type = 1"
        },
        "type": {
          "description": "Registry Type. Valid values are:\n\t1 (Quay.io),\n\t2 (Azure container registry),\n\t3 (custom registry),\n\t4 (Gitlab registry),\n\t5 (ProGet registry),\n\t6 (DockerHub)\n\t7 (ECR)",
          "enum": [
            1,
            2,
            3,
            4,
            5,
            6,
            7
          ],
          "example": 1,
          "type": "integer"
        },
        "url": {
          "description": "URL or IP address of the Docker registry",
          "example": "registry.mydomain.tld:2375/feed",
          "type": "string"
        },
        "username": {
          "description": "Username used to authenticate against this registry. Required when Authentication is true",
          "example": "registry_user",
          "type": "string"
        }
      },
      "required": [
        "authentication",
        "name",
        "type",
        "url"
      ],
      "type": "object"
    },
    "registries.registryUpdatePayload": {
      "properties": {
        "authentication": {
          "description": "Is authentication against this registry enabled",
          "example": false,
          "type": "boolean"
        },
        "baseURL": {
          "description": "BaseURL is used for quay registry",
          "example": "registry.mydomain.tld:2375",
          "type": "string"
        },
        "ecr": {
          "$ref": "#/definitions/portainer.EcrData",
          "description": "ECR data"
        },
        "name": {
          "description": "Name that will be used to identify this registry",
          "example": "my-registry",
          "type": "string"
        },
        "password": {
          "description": "Password used to authenticate against this registry. required when Authentication is true",
          "example": "registry_password",
          "type": "string"
        },
        "quay": {
          "$ref": "#/definitions/portainer.QuayRegistryData",
          "description": "Quay data"
        },
        "registryAccesses": {
          "$ref": "#/definitions/portainer.RegistryAccesses",
          "description": "Registry access control"
        },
        "url": {
          "description": "URL or IP address of the Docker registry",
          "example": "registry.mydomain.tld:2375",
          "type": "string"
        },
        "username": {
          "description": "Username used to authenticate against this registry. Required when Authentication is true",
          "example": "registry_user",
          "type": "string"
        }
      },
      "required": [
        "authentication",
        "name",
        "url"
      ],
      "type": "object"
    },
    "release.Chart": {
      "properties": {
        "files": {
          "description": "Files are miscellaneous files in a chart archive,\ne.g. README, LICENSE, etc.",
          "items": {
            "$ref": "#/definitions/release.File"
          },
          "type": "array"
        },
        "lock": {
          "$ref": "#/definitions/release.Lock",
          "description": "Lock is the contents of Chart.lock."
        },
        "metadata": {
          "$ref": "#/definitions/release.Metadata",
          "description": "Metadata is the contents of the Chartfile."
        },
        "schema": {
          "description": "Schema is an optional JSON schema for imposing structure on Values",
          "items": {
            "type": "integer"
          },
          "type": "array"
        },
        "templates": {
          "description": "Templates for this chart.",
          "items": {
            "$ref": "#/definitions/release.File"
          },
          "type": "array"
        },
        "values": {
          "additionalProperties": {},
          "description": "Values are default config for this chart.",
          "type": "object"
        }
      },
      "type": "object"
    },
    "release.Dependency": {
      "properties": {
        "alias": {
          "description": "Alias usable alias to be used for the chart",
          "type": "string"
        },
        "condition": {
          "description": "A yaml path that resolves to a boolean, used for enabling/disabling charts (e.g. subchart1.enabled )",
          "type": "string"
        },
        "enabled": {
          "description": "Enabled bool determines if chart should be loaded",
          "type": "boolean"
        },
        "import-values": {
          "description": "ImportValues holds the mapping of source values to parent key to be imported. Each item can be a\nstring or pair of child/parent sublist items.",
          "items": {},
          "type": "array"
        },
        "name": {
          "description": "Name is the name of the dependency.\n\nThis must mach the name in the dependency's Chart.yaml.",
          "type": "string"
        },
        "repository": {
          "description": "The URL to the repository.\n\nAppending `index.yaml` to this string should result in a URL that can be\nused to fetch the repository index.",
          "type": "string"
        },
        "tags": {
          "description": "Tags can be used to group charts for enabling/disabling together",
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "version": {
          "description": "Version is the version (range) of this chart.\n\nA lock file will always produce a single version, while a dependency\nmay contain a semantic version range.",
          "type": "string"
        }
      },
      "type": "object"
    },
    "release.File": {
      "properties": {
        "data": {
          "description": "Data is the template as byte data.",
          "items": {
            "type": "integer"
          },
          "type": "array"
        },
        "name": {
          "description": "Name is the path-like name of the template.",
          "type": "string"
        }
      },
      "type": "object"
    },
    "release.Hook": {
      "properties": {
        "delete_policies": {
          "description": "DeletePolicies are the policies that indicate when to delete the hook",
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "events": {
          "description": "Events are the events that this hook fires on.",
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "kind": {
          "description": "Kind is the Kubernetes kind.",
          "type": "string"
        },
        "last_run": {
          "$ref": "#/definitions/release.HookExecution",
          "description": "LastRun indicates the date/time this was last run."
        },
        "manifest": {
          "description": "Manifest is the manifest contents.",
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "path": {
          "description": "Path is the chart-relative path to the template.",
          "type": "string"
        },
        "weight": {
          "description": "Weight indicates the sort order for execution among similar Hook type",
          "type": "integer"
        }
      },
      "type": "object"
    },
    "release.HookExecution": {
      "properties": {
        "completed_at": {
          "description": "CompletedAt indicates the date/time this hook was completed.",
          "type": "string"
        },
        "phase": {
          "description": "Phase indicates whether the hook completed successfully",
          "type": "string"
        },
        "started_at": {
          "description": "StartedAt indicates the date/time this hook was started",
          "type": "string"
        }
      },
      "type": "object"
    },
    "release.Lock": {
      "properties": {
        "dependencies": {
          "description": "Dependencies is the list of dependencies that this lock file has locked.",
          "items": {
            "$ref": "#/definitions/release.Dependency"
          },
          "type": "array"
        },
        "digest": {
          "description": "Digest is a hash of the dependencies in Chart.yaml.",
          "type": "string"
        },
        "generated": {
          "description": "Generated is the date the lock file was last generated.",
          "type": "string"
        }
      },
      "type": "object"
    },
    "release.Maintainer": {
      "properties": {
        "email": {
          "description": "Email is an optional email address to contact the named maintainer",
          "type": "string"
        },
        "name": {
          "description": "Name is a user name or organization name",
          "type": "string"
        },
        "url": {
          "description": "URL is an optional URL to an address for the named maintainer",
          "type": "string"
        }
      },
      "type": "object"
    },
    "release.Metadata": {
      "properties": {
        "annotations": {
          "additionalProperties": {
            "type": "string"
          },
          "description": "Annotations are additional mappings uninterpreted by Helm,\nmade available for inspection by other applications.",
          "type": "object"
        },
        "apiVersion": {
          "description": "The API Version of this chart. Required.",
          "type": "string"
        },
        "appVersion": {
          "description": "The version of the application enclosed inside of this chart.",
          "type": "string"
        },
        "condition": {
          "description": "The condition to check to enable chart",
          "type": "string"
        },
        "dependencies": {
          "description": "Dependencies are a list of dependencies for a chart.",
          "items": {
            "$ref": "#/definitions/release.Dependency"
          },
          "type": "array"
        },
        "deprecated": {
          "description": "Whether or not this chart is deprecated",
          "type": "boolean"
        },
        "description": {
          "description": "A one-sentence description of the chart",
          "type": "string"
        },
        "home": {
          "description": "The URL to a relevant project page, git repo, or contact person",
          "type": "string"
        },
        "icon": {
          "description": "The URL to an icon file.",
          "type": "string"
        },
        "keywords": {
          "description": "A list of string keywords",
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "kubeVersion": {
          "description": "KubeVersion is a SemVer constraint specifying the version of Kubernetes required.",
          "type": "string"
        },
        "maintainers": {
          "description": "A list of name and URL/email address combinations for the maintainer(s)",
          "items": {
            "$ref": "#/definitions/release.Maintainer"
          },
          "type": "array"
        },
        "name": {
          "description": "The name of the chart. Required.",
          "type": "string"
        },
        "sources": {
          "description": "Source is the URL to the source code of this chart",
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "tags": {
          "description": "The tags to check to enable chart",
          "type": "string"
        },
        "type": {
          "description": "Specifies the chart type: application or library",
          "type": "string"
        },
        "version": {
          "description": "A SemVer 2 conformant version string of the chart. Required.",
          "type": "string"
        }
      },
      "type": "object"
    },
    "release.Release": {
      "properties": {
        "chart": {
          "$ref": "#/definitions/release.Chart",
          "description": "Info provides information about a release\nInfo *Info `json:\"info,omitempty\"`\nChart is the chart that was released."
        },
        "config": {
          "additionalProperties": {},
          "description": "Config is the set of extra Values added to the chart.\nThese values override the default values inside of the chart.",
          "type": "object"
        },
        "hooks": {
          "description": "Hooks are all of the hooks declared for this release.",
          "items": {
            "$ref": "#/definitions/release.Hook"
          },
          "type": "array"
        },
        "manifest": {
          "description": "Manifest is the string representation of the rendered template.",
          "type": "string"
        },
        "name": {
          "description": "Name is the name of the release",
          "type": "string"
        },
        "namespace": {
          "description": "Namespace is the kubernetes namespace of the release.",
          "type": "string"
        },
        "version": {
          "description": "Version is an int which represents the revision of the release.",
          "type": "integer"
        }
      },
      "type": "object"
    },
    "release.ReleaseElement": {
      "properties": {
        "app_version": {
          "type": "string"
        },
        "chart": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "namespace": {
          "type": "string"
        },
        "revision": {
          "type": "string"
        },
        "status": {
          "type": "string"
        },
        "updated": {
          "type": "string"
        }
      },
      "type": "object"
    },
    "resource.Quantity": {
      "properties": {
        "Format": {
          "type": "string"
        }
      },
      "type": "object"
    },
    "resourcecontrols.resourceControlCreatePayload": {
      "properties": {
        "administratorsOnly": {
          "description": "Permit access to resource only to admins",
          "example": true,
          "type": "boolean"
        },
        "public": {
          "description": "Permit access to the associated resource to any user",
          "example": true,
          "type": "boolean"
        },
        "resourceID": {
          "example": "617c5f22bb9b023d6daab7cba43a57576f83492867bc767d1c59416b065e5f08",
          "type": "string"
        },
        "subResourceIDs": {
          "description": "List of Docker resources that will inherit this access control",
          "example": [
            "617c5f22bb9b023d6daab7cba43a57576f83492867bc767d1c59416b065e5f08"
          ],
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "teams": {
          "description": "List of team identifiers with access to the associated resource",
          "example": [
            56,
            7
          ],
          "items": {
            "type": "integer"
          },
          "type": "array"
        },
        "type": {
          "description": "Type of Resource. Valid values are: 1 - container, 2 - service\n3 - volume, 4 - network, 5 - secret, 6 - stack, 7 - config, 8 - custom template, 9 - azure-container-group",
          "enum": [
            1,
            2,
            3,
            4,
            5,
            6,
            7,
            8,
            9
          ],
          "example": 1,
          "type": "integer"
        },
        "users": {
          "description": "List of user identifiers with access to the associated resource",
          "example": [
            1,
            4
          ],
          "items": {
            "type": "integer"
          },
          "type": "array"
        }
      },
      "required": [
        "resourceID",
        "type"
      ],
      "type": "object"
    },
    "resourcecontrols.resourceControlUpdatePayload": {
      "properties": {
        "administratorsOnly": {
          "description": "Permit access to resource only to admins",
          "example": true,
          "type": "boolean"
        },
        "public": {
          "description": "Permit access to the associated resource to any user",
          "example": true,
          "type": "boolean"
        },
        "teams": {
          "description": "List of team identifiers with access to the associated resource",
          "example": [
            7
          ],
          "items": {
            "type": "integer"
          },
          "type": "array"
        },
        "users": {
          "description": "List of user identifiers with access to the associated resource",
          "example": [
            4
          ],
          "items": {
            "type": "integer"
          },
          "type": "array"
        }
      },
      "type": "object"
    },
    "settings.publicSettingsResponse": {
      "properties": {
        "AuthenticationMethod": {
          "description": "Active authentication method for the Portainer instance. Valid values are: 1 for internal, 2 for LDAP, or 3 for oauth",
          "example": 1,
          "type": "integer"
        },
        "EnableEdgeComputeFeatures": {
          "description": "Whether edge compute features are enabled",
          "example": true,
          "type": "boolean"
        },
        "EnableTelemetry": {
          "description": "Whether telemetry is enabled",
          "example": true,
          "type": "boolean"
        },
        "Features": {
          "additionalProperties": {
            "type": "boolean"
          },
          "description": "Supported feature flags",
          "type": "object"
        },
        "GlobalDeploymentOptions": {
          "$ref": "#/definitions/portainer.GlobalDeploymentOptions",
          "description": "Deployment options for encouraging deployment as code"
        },
        "IsDockerDesktopExtension": {
          "example": false,
          "type": "boolean"
        },
        "LogoURL": {
          "description": "URL to a logo that will be displayed on the login page as well as on top of the sidebar. Will use default Portainer logo when value is empty string",
          "example": "https://mycompany.mydomain.tld/logo.png",
          "type": "string"
        },
        "OAuthLoginURI": {
          "description": "The URL used for oauth login",
          "example": "https://gitlab.com/oauth",
          "type": "string"
        },
        "OAuthLogoutURI": {
          "description": "The URL used for oauth logout",
          "example": "https://gitlab.com/oauth/logout",
          "type": "string"
        },
        "RequiredPasswordLength": {
          "description": "The minimum required length for a password of any user when using internal auth mode",
          "example": 1,
          "type": "integer"
        },
        "TeamSync": {
          "description": "Whether team sync is enabled",
          "example": true,
          "type": "boolean"
        },
        "edge": {
          "properties": {
            "CommandInterval": {
              "description": "The command list interval for edge agent - used in edge async mode [seconds]",
              "example": 60,
              "type": "integer"
            },
            "PingInterval": {
              "description": "The ping interval for edge agent - used in edge async mode [seconds]",
              "example": 60,
              "type": "integer"
            },
            "SnapshotInterval": {
              "description": "The snapshot interval for edge agent - used in edge async mode [seconds]",
              "example": 60,
              "type": "integer"
            },
            "checkinInterval": {
              "description": "The check in interval for edge agent (in seconds) - used in non async mode [seconds]",
              "example": 60,
              "type": "integer"
            }
          },
          "type": "object"
        },
        "isAMTEnabled": {
          "description": "Whether AMT is enabled",
          "type": "boolean"
        },
        "kubeconfigExpiry": {
          "default": "0",
          "description": "The expiry of a Kubeconfig",
          "example": "24h",
          "type": "string"
        }
      },
      "type": "object"
    },
    "settings.settingsUpdatePayload": {
      "properties": {
        "EdgePortainerURL": {
          "description": "EdgePortainerURL is the URL that is exposed to edge agents",
          "type": "string"
        },
        "authenticationMethod": {
          "description": "Active authentication method for the Portainer instance. Valid values are: 1 for internal, 2 for LDAP, or 3 for oauth",
          "example": 1,
          "type": "integer"
        },
        "blackListedLabels": {
          "description": "A list of label name & value that will be used to hide containers when querying containers",
          "items": {
            "$ref": "#/definitions/portainer.Pair"
          },
          "type": "array"
        },
        "edgeAgentCheckinInterval": {
          "example": 5,
          "type": "integer"
        },
        "enableEdgeComputeFeatures": {
          "description": "Whether edge compute features are enabled",
          "example": true,
          "type": "boolean"
        },
        "enableTelemetry": {
          "description": "Whether telemetry is enabled",
          "example": false,
          "type": "boolean"
        },
        "enforceEdgeID": {
          "description": "EnforceEdgeID makes Portainer store the Edge ID instead of accepting anyone",
          "example": false,
          "type": "boolean"
        },
        "globalDeploymentOptions": {
          "$ref": "#/definitions/portainer.GlobalDeploymentOptions",
          "description": "Deployment options for encouraging deployment as code"
        },
        "helmRepositoryURL": {
          "description": "Helm repository URL",
          "example": "https://charts.bitnami.com/bitnami",
          "type": "string"
        },
        "internalAuthSettings": {
          "$ref": "#/definitions/portainer.InternalAuthSettings"
        },
        "kubeconfigExpiry": {
          "default": "0",
          "description": "The expiry of a Kubeconfig",
          "example": "24h",
          "type": "string"
        },
        "kubectlShellImage": {
          "description": "Kubectl Shell Image",
          "example": "portainer/kubectl-shell:latest",
          "type": "string"
        },
        "ldapsettings": {
          "$ref": "#/definitions/portainer.LDAPSettings"
        },
        "logoURL": {
          "description": "URL to a logo that will be displayed on the login page as well as on top of the sidebar. Will use default Portainer logo when value is empty string",
          "example": "https://mycompany.mydomain.tld/logo.png",
          "type": "string"
        },
        "oauthSettings": {
          "$ref": "#/definitions/portainer.OAuthSettings"
        },
        "snapshotInterval": {
          "description": "The interval in which environment(endpoint) snapshots are created",
          "example": "5m",
          "type": "string"
        },
        "templatesURL": {
          "description": "URL to the templates that will be displayed in the UI when navigating to App Templates",
          "example": "https://raw.githubusercontent.com/portainer/templates/master/templates.json",
          "type": "string"
        },
        "trustOnFirstConnect": {
          "description": "TrustOnFirstConnect makes Portainer accepting edge agent connection by default",
          "example": false,
          "type": "boolean"
        },
        "userSessionTimeout": {
          "description": "The duration of a user session",
          "example": "5m",
          "type": "string"
        }
      },
      "type": "object"
    },
    "ssl.sslUpdatePayload": {
      "properties": {
        "cert": {
          "description": "SSL Certificates",
          "type": "string"
        },
        "httpenabled": {
          "type": "boolean"
        },
        "key": {
          "type": "string"
        }
      },
      "type": "object"
    },
    "stacks.composeStackFromFileContentPayload": {
      "properties": {
        "env": {
          "description": "A list of environment variables used during stack deployment",
          "items": {
            "$ref": "#/definitions/portainer.Pair"
          },
          "type": "array"
        },
        "fromAppTemplate": {
          "description": "Whether the stack is from a app template",
          "example": false,
          "type": "boolean"
        },
        "name": {
          "description": "Name of the stack",
          "example": "myStack",
          "type": "string"
        },
        "stackFileContent": {
          "description": "Content of the Stack file",
          "example": "version: 3\n services:\n web:\n image:nginx",
          "type": "string"
        }
      },
      "required": [
        "name",
        "stackFileContent"
      ],
      "type": "object"
    },
    "stacks.composeStackFromGitRepositoryPayload": {
      "properties": {
        "additionalFiles": {
          "description": "Applicable when deploying with multiple stack files",
          "example": [
            "[nz.compose.yml",
            " uat.compose.yml]"
          ],
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "autoUpdate": {
          "$ref": "#/definitions/portainer.AutoUpdateSettings",
          "description": "Optional GitOps update configuration"
        },
        "composeFile": {
          "default": "docker-compose.yml",
          "description": "Path to the Stack file inside the Git repository",
          "example": "docker-compose.yml",
          "type": "string"
        },
        "env": {
          "description": "A list of environment variables used during stack deployment",
          "items": {
            "$ref": "#/definitions/portainer.Pair"
          },
          "type": "array"
        },
        "fromAppTemplate": {
          "description": "Whether the stack is from a app template",
          "example": false,
          "type": "boolean"
        },
        "name": {
          "description": "Name of the stack",
          "example": "myStack",
          "type": "string"
        },
        "repositoryAuthentication": {
          "description": "Use basic authentication to clone the Git repository",
          "example": true,
          "type": "boolean"
        },
        "repositoryPassword": {
          "description": "Password used in basic authentication. Required when RepositoryAuthentication is true.",
          "example": "myGitPassword",
          "type": "string"
        },
        "repositoryReferenceName": {
          "description": "Reference name of a Git repository hosting the Stack file",
          "example": "refs/heads/master",
          "type": "string"
        },
        "repositoryURL": {
          "description": "URL of a Git repository hosting the Stack file",
          "example": "https://github.com/openfaas/faas",
          "type": "string"
        },
        "repositoryUsername": {
          "description": "Username used in basic authentication. Required when RepositoryAuthentication is true.",
          "example": "myGitUsername",
          "type": "string"
        },
        "tlsskipVerify": {
          "description": "TLSSkipVerify skips SSL verification when cloning the Git repository",
          "example": false,
          "type": "boolean"
        }
      },
      "required": [
        "name",
        "repositoryURL"
      ],
      "type": "object"
    },
    "stacks.kubernetesGitDeploymentPayload": {
      "properties": {
        "additionalFiles": {
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "autoUpdate": {
          "$ref": "#/definitions/portainer.AutoUpdateSettings"
        },
        "composeFormat": {
          "type": "boolean"
        },
        "manifestFile": {
          "type": "string"
        },
        "namespace": {
          "type": "string"
        },
        "repositoryAuthentication": {
          "type": "boolean"
        },
        "repositoryPassword": {
          "type": "string"
        },
        "repositoryReferenceName": {
          "type": "string"
        },
        "repositoryURL": {
          "type": "string"
        },
        "repositoryUsername": {
          "type": "string"
        },
        "stackName": {
          "type": "string"
        },
        "tlsskipVerify": {
          "description": "TLSSkipVerify skips SSL verification when cloning the Git repository",
          "example": false,
          "type": "boolean"
        }
      },
      "type": "object"
    },
    "stacks.kubernetesManifestURLDeploymentPayload": {
      "properties": {
        "composeFormat": {
          "type": "boolean"
        },
        "manifestURL": {
          "type": "string"
        },
        "namespace": {
          "type": "string"
        },
        "stackName": {
          "type": "string"
        }
      },
      "type": "object"
    },
    "stacks.kubernetesStringDeploymentPayload": {
      "properties": {
        "composeFormat": {
          "type": "boolean"
        },
        "fromAppTemplate": {
          "description": "Whether the stack is from a app template",
          "example": false,
          "type": "boolean"
        },
        "namespace": {
          "type": "string"
        },
        "stackFileContent": {
          "type": "string"
        },
        "stackName": {
          "type": "string"
        }
      },
      "type": "object"
    },
    "stacks.stackFileResponse": {
      "properties": {
        "StackFileContent": {
          "description": "Content of the Stack file",
          "example": "version: 3\n services:\n web:\n image:nginx",
          "type": "string"
        }
      },
      "type": "object"
    },
    "stacks.stackGitRedployPayload": {
      "properties": {
        "env": {
          "items": {
            "$ref": "#/definitions/portainer.Pair"
          },
          "type": "array"
        },
        "prune": {
          "type": "boolean"
        },
        "pullImage": {
          "description": "Force a pulling to current image with the original tag though the image is already the latest",
          "example": false,
          "type": "boolean"
        },
        "repositoryAuthentication": {
          "type": "boolean"
        },
        "repositoryPassword": {
          "type": "string"
        },
        "repositoryReferenceName": {
          "type": "string"
        },
        "repositoryUsername": {
          "type": "string"
        },
        "stackName": {
          "type": "string"
        }
      },
      "type": "object"
    },
    "stacks.stackGitUpdatePayload": {
      "properties": {
        "autoUpdate": {
          "$ref": "#/definitions/portainer.AutoUpdateSettings"
        },
        "env": {
          "items": {
            "$ref": "#/definitions/portainer.Pair"
          },
          "type": "array"
        },
        "prune": {
          "type": "boolean"
        },
        "repositoryAuthentication": {
          "type": "boolean"
        },
        "repositoryPassword": {
          "type": "string"
        },
        "repositoryReferenceName": {
          "type": "string"
        },
        "repositoryUsername": {
          "type": "string"
        },
        "tlsskipVerify": {
          "type": "boolean"
        }
      },
      "type": "object"
    },
    "stacks.stackMigratePayload": {
      "properties": {
        "endpointID": {
          "description": "Environment(Endpoint) identifier of the target environment(endpoint) where the stack will be relocated",
          "example": 2,
          "type": "integer"
        },
        "name": {
          "description": "If provided will rename the migrated stack",
          "example": "new-stack",
          "type": "string"
        },
        "swarmID": {
          "description": "Swarm cluster identifier, must match the identifier of the cluster where the stack will be relocated",
          "example": "jpofkc0i9uo9wtx1zesuk649w",
          "type": "string"
        }
      },
      "required": [
        "endpointID"
      ],
      "type": "object"
    },
    "stacks.swarmStackFromFileContentPayload": {
      "properties": {
        "env": {
          "description": "A list of environment variables used during stack deployment",
          "items": {
            "$ref": "#/definitions/portainer.Pair"
          },
          "type": "array"
        },
        "fromAppTemplate": {
          "description": "Whether the stack is from a app template",
          "example": false,
          "type": "boolean"
        },
        "name": {
          "description": "Name of the stack",
          "example": "myStack",
          "type": "string"
        },
        "stackFileContent": {
          "description": "Content of the Stack file",
          "example": "version: 3\n services:\n web:\n image:nginx",
          "type": "string"
        },
        "swarmID": {
          "description": "Swarm cluster identifier",
          "example": "jpofkc0i9uo9wtx1zesuk649w",
          "type": "string"
        }
      },
      "required": [
        "name",
        "stackFileContent",
        "swarmID"
      ],
      "type": "object"
    },
    "stacks.swarmStackFromGitRepositoryPayload": {
      "properties": {
        "additionalFiles": {
          "description": "Applicable when deploying with multiple stack files",
          "example": [
            "[nz.compose.yml",
            " uat.compose.yml]"
          ],
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "autoUpdate": {
          "$ref": "#/definitions/portainer.AutoUpdateSettings",
          "description": "Optional GitOps update configuration"
        },
        "composeFile": {
          "default": "docker-compose.yml",
          "description": "Path to the Stack file inside the Git repository",
          "example": "docker-compose.yml",
          "type": "string"
        },
        "env": {
          "description": "A list of environment variables used during stack deployment",
          "items": {
            "$ref": "#/definitions/portainer.Pair"
          },
          "type": "array"
        },
        "fromAppTemplate": {
          "description": "Whether the stack is from a app template",
          "example": false,
          "type": "boolean"
        },
        "name": {
          "description": "Name of the stack",
          "example": "myStack",
          "type": "string"
        },
        "repositoryAuthentication": {
          "description": "Use basic authentication to clone the Git repository",
          "example": true,
          "type": "boolean"
        },
        "repositoryPassword": {
          "description": "Password used in basic authentication. Required when RepositoryAuthentication is true.",
          "example": "myGitPassword",
          "type": "string"
        },
        "repositoryReferenceName": {
          "description": "Reference name of a Git repository hosting the Stack file",
          "example": "refs/heads/master",
          "type": "string"
        },
        "repositoryURL": {
          "description": "URL of a Git repository hosting the Stack file",
          "example": "https://github.com/openfaas/faas",
          "type": "string"
        },
        "repositoryUsername": {
          "description": "Username used in basic authentication. Required when RepositoryAuthentication is true.",
          "example": "myGitUsername",
          "type": "string"
        },
        "swarmID": {
          "description": "Swarm cluster identifier",
          "example": "jpofkc0i9uo9wtx1zesuk649w",
          "type": "string"
        },
        "tlsskipVerify": {
          "description": "TLSSkipVerify skips SSL verification when cloning the Git repository",
          "example": false,
          "type": "boolean"
        }
      },
      "required": [
        "name",
        "repositoryURL",
        "swarmID"
      ],
      "type": "object"
    },
    "stacks.updateSwarmStackPayload": {
      "properties": {
        "env": {
          "description": "A list of environment(endpoint) variables used during stack deployment",
          "items": {
            "$ref": "#/definitions/portainer.Pair"
          },
          "type": "array"
        },
        "prune": {
          "description": "Prune services that are no longer referenced (only available for Swarm stacks)",
          "example": true,
          "type": "boolean"
        },
        "pullImage": {
          "description": "Force a pulling to current image with the original tag though the image is already the latest",
          "example": false,
          "type": "boolean"
        },
        "stackFileContent": {
          "description": "New content of the Stack file",
          "example": "version: 3\n services:\n web:\n image:nginx",
          "type": "string"
        }
      },
      "type": "object"
    },
    "swarm.ServiceUpdateResponse": {
      "properties": {
        "Warnings": {
          "description": "Optional warning messages",
          "items": {
            "type": "string"
          },
          "type": "array"
        }
      },
      "type": "object"
    },
    "system.nodesCountResponse": {
      "properties": {
        "nodes": {
          "type": "integer"
        }
      },
      "type": "object"
    },
    "system.status": {
      "properties": {
        "Version": {
          "description": "Portainer API version",
          "example": "2.0.0",
          "type": "string"
        },
        "instanceID": {
          "description": "Server Instance ID",
          "example": "299ab403-70a8-4c05-92f7-bf7a994d50df",
          "type": "string"
        }
      },
      "type": "object"
    },
    "system.systemInfoResponse": {
      "properties": {
        "agents": {
          "type": "integer"
        },
        "edgeAgents": {
          "type": "integer"
        },
        "platform": {
          "type": "string"
        }
      },
      "type": "object"
    },
    "system.versionResponse": {
      "properties": {
        "LatestVersion": {
          "description": "The latest version available",
          "example": "2.0.0",
          "type": "string"
        },
        "ServerEdition": {
          "example": "CE/EE",
          "type": "string"
        },
        "UpdateAvailable": {
          "description": "Whether portainer has an update available",
          "example": false,
          "type": "boolean"
        },
        "VersionSupport": {
          "example": "STS/LTS",
          "type": "string"
        },
        "build": {
          "$ref": "#/definitions/build.BuildInfo"
        },
        "databaseVersion": {
          "type": "string"
        },
        "dependencies": {
          "$ref": "#/definitions/build.DependenciesInfo"
        },
        "runtime": {
          "$ref": "#/definitions/build.RuntimeInfo"
        },
        "serverVersion": {
          "type": "string"
        }
      },
      "type": "object"
    },
    "tags.tagCreatePayload": {
      "properties": {
        "name": {
          "example": "org/acme",
          "type": "string"
        }
      },
      "required": [
        "name"
      ],
      "type": "object"
    },
    "teammemberships.teamMembershipCreatePayload": {
      "properties": {
        "role": {
          "description": "Role for the user inside the team (1 for leader and 2 for regular member)",
          "enum": [
            1,
            2
          ],
          "example": 1,
          "type": "integer"
        },
        "teamID": {
          "description": "Team identifier",
          "example": 1,
          "type": "integer"
        },
        "userID": {
          "description": "User identifier",
          "example": 1,
          "type": "integer"
        }
      },
      "required": [
        "role",
        "teamID",
        "userID"
      ],
      "type": "object"
    },
    "teammemberships.teamMembershipUpdatePayload": {
      "properties": {
        "role": {
          "description": "Role for the user inside the team (1 for leader and 2 for regular member)",
          "enum": [
            1,
            2
          ],
          "example": 1,
          "type": "integer"
        },
        "teamID": {
          "description": "Team identifier",
          "example": 1,
          "type": "integer"
        },
        "userID": {
          "description": "User identifier",
          "example": 1,
          "type": "integer"
        }
      },
      "required": [
        "role",
        "teamID",
        "userID"
      ],
      "type": "object"
    },
    "teams.teamCreatePayload": {
      "properties": {
        "name": {
          "description": "Name",
          "example": "developers",
          "type": "string"
        },
        "teamLeaders": {
          "description": "TeamLeaders",
          "example": [
            3,
            5
          ],
          "items": {
            "description": "User Identifier",
            "example": 1,
            "type": "integer"
          },
          "type": "array"
        }
      },
      "required": [
        "name"
      ],
      "type": "object"
    },
    "teams.teamUpdatePayload": {
      "properties": {
        "name": {
          "description": "Name",
          "example": "developers",
          "type": "string"
        }
      },
      "type": "object"
    },
    "templates.filePayload": {
      "properties": {
        "composeFilePathInRepository": {
          "description": "Path to the file inside the git repository",
          "example": "./subfolder/docker-compose.yml",
          "type": "string"
        },
        "repositoryURL": {
          "description": "URL of a git repository where the file is stored",
          "example": "https://github.com/portainer/portainer-compose",
          "type": "string"
        }
      },
      "required": [
        "composeFilePathInRepository",
        "repositoryURL"
      ],
      "type": "object"
    },
    "templates.fileResponse": {
      "properties": {
        "fileContent": {
          "description": "The requested file content",
          "example": "version:2",
          "type": "string"
        }
      },
      "type": "object"
    },
    "templates.listResponse": {
      "properties": {
        "templates": {
          "items": {
            "$ref": "#/definitions/portainer.Template"
          },
          "type": "array"
        },
        "version": {
          "type": "string"
        }
      },
      "type": "object"
    },
    "users.accessTokenResponse": {
      "properties": {
        "apiKey": {
          "$ref": "#/definitions/portainer.APIKey"
        },
        "rawAPIKey": {
          "type": "string"
        }
      },
      "type": "object"
    },
    "users.addHelmRepoUrlPayload": {
      "properties": {
        "url": {
          "type": "string"
        }
      },
      "type": "object"
    },
    "users.adminInitPayload": {
      "properties": {
        "password": {
          "description": "Password for the admin user",
          "example": "admin-password",
          "type": "string"
        },
        "username": {
          "description": "Username for the admin user",
          "example": "admin",
          "type": "string"
        }
      },
      "required": [
        "password",
        "username"
      ],
      "type": "object"
    },
    "users.helmUserRepositoryResponse": {
      "properties": {
        "GlobalRepository": {
          "type": "string"
        },
        "UserRepositories": {
          "items": {
            "$ref": "#/definitions/portainer.HelmUserRepository"
          },
          "type": "array"
        }
      },
      "type": "object"
    },
    "users.themePayload": {
      "properties": {
        "color": {
          "description": "Color represents the color theme of the UI",
          "enum": [
            "dark",
            "light",
            "highcontrast",
            "auto"
          ],
          "example": "dark",
          "type": "string"
        }
      },
      "type": "object"
    },
    "users.userAccessTokenCreatePayload": {
      "properties": {
        "description": {
          "example": "github-api-key",
          "type": "string"
        },
        "password": {
          "example": "password",
          "type": "string"
        }
      },
      "required": [
        "description",
        "password"
      ],
      "type": "object"
    },
    "users.userCreatePayload": {
      "properties": {
        "password": {
          "example": "cg9Wgky3",
          "type": "string"
        },
        "role": {
          "description": "User role (1 for administrator account and 2 for regular account)",
          "enum": [
            1,
            2
          ],
          "example": 2,
          "type": "integer"
        },
        "username": {
          "example": "bob",
          "type": "string"
        }
      },
      "required": [
        "password",
        "role",
        "username"
      ],
      "type": "object"
    },
    "users.userUpdatePasswordPayload": {
      "properties": {
        "newPassword": {
          "description": "New Password",
          "example": "new_passwd",
          "type": "string"
        },
        "password": {
          "description": "Current Password",
          "example": "passwd",
          "type": "string"
        }
      },
      "required": [
        "newPassword",
        "password"
      ],
      "type": "object"
    },
    "users.userUpdatePayload": {
      "properties": {
        "newPassword": {
          "example": "asfj2emv",
          "type": "string"
        },
        "password": {
          "example": "cg9Wgky3",
          "type": "string"
        },
        "role": {
          "description": "User role (1 for administrator account and 2 for regular account)",
          "enum": [
            1,
            2
          ],
          "example": 2,
          "type": "integer"
        },
        "theme": {
          "$ref": "#/definitions/users.themePayload"
        },
        "useCache": {
          "example": true,
          "type": "boolean"
        },
        "username": {
          "example": "bob",
          "type": "string"
        }
      },
      "required": [
        "newPassword",
        "password",
        "role",
        "useCache",
        "username"
      ],
      "type": "object"
    },
    "v1.CSIPersistentVolumeSource": {
      "properties": {
        "controllerExpandSecretRef": {
          "$ref": "#/definitions/v1.SecretReference",
          "description": "controllerExpandSecretRef is a reference to the secret object containing\nsensitive information to pass to the CSI driver to complete the CSI\nControllerExpandVolume call.\nThis field is optional, and may be empty if no secret is required. If the\nsecret object contains more than one secret, all secrets are passed.\n+optional"
        },
        "controllerPublishSecretRef": {
          "$ref": "#/definitions/v1.SecretReference",
          "description": "controllerPublishSecretRef is a reference to the secret object containing\nsensitive information to pass to the CSI driver to complete the CSI\nControllerPublishVolume and ControllerUnpublishVolume calls.\nThis field is optional, and may be empty if no secret is required. If the\nsecret object contains more than one secret, all secrets are passed.\n+optional"
        },
        "driver": {
          "description": "driver is the name of the driver to use for this volume.\nRequired.",
          "type": "string"
        },
        "fsType": {
          "description": "fsType to mount. Must be a filesystem type supported by the host operating system.\nEx. \"ext4\", \"xfs\", \"ntfs\".\n+optional",
          "type": "string"
        },
        "nodeExpandSecretRef": {
          "$ref": "#/definitions/v1.SecretReference",
          "description": "nodeExpandSecretRef is a reference to the secret object containing\nsensitive information to pass to the CSI driver to complete the CSI\nNodeExpandVolume call.\nThis field is optional, may be omitted if no secret is required. If the\nsecret object contains more than one secret, all secrets are passed.\n+optional"
        },
        "nodePublishSecretRef": {
          "$ref": "#/definitions/v1.SecretReference",
          "description": "nodePublishSecretRef is a reference to the secret object containing\nsensitive information to pass to the CSI driver to complete the CSI\nNodePublishVolume and NodeUnpublishVolume calls.\nThis field is optional, and may be empty if no secret is required. If the\nsecret object contains more than one secret, all secrets are passed.\n+optional"
        },
        "nodeStageSecretRef": {
          "$ref": "#/definitions/v1.SecretReference",
          "description": "nodeStageSecretRef is a reference to the secret object containing sensitive\ninformation to pass to the CSI driver to complete the CSI NodeStageVolume\nand NodeStageVolume and NodeUnstageVolume calls.\nThis field is optional, and may be empty if no secret is required. If the\nsecret object contains more than one secret, all secrets are passed.\n+optional"
        },
        "readOnly": {
          "description": "readOnly value to pass to ControllerPublishVolumeRequest.\nDefaults to false (read/write).\n+optional",
          "type": "boolean"
        },
        "volumeAttributes": {
          "additionalProperties": {
            "type": "string"
          },
          "description": "volumeAttributes of the volume to publish.\n+optional",
          "type": "object"
        },
        "volumeHandle": {
          "description": "volumeHandle is the unique volume name returned by the CSI volume\nplugin’s CreateVolume to refer to the volume on all subsequent calls.\nRequired.",
          "type": "string"
        }
      },
      "type": "object"
    },
    "v1.Capabilities": {
      "properties": {
        "add": {
          "description": "Added capabilities\n+optional",
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "drop": {
          "description": "Removed capabilities\n+optional",
          "items": {
            "type": "string"
          },
          "type": "array"
        }
      },
      "type": "object"
    },
    "v1.ClientIPConfig": {
      "properties": {
        "timeoutSeconds": {
          "description": "timeoutSeconds specifies the seconds of ClientIP type session sticky time.\nThe value must be >0 && <=86400(for 1 day) if ServiceAffinity == \"ClientIP\".\nDefault value is 10800(for 3 hours).\n+optional",
          "type": "integer"
        }
      },
      "type": "object"
    },
    "v1.Condition": {
      "properties": {
        "lastTransitionTime": {
          "description": "lastTransitionTime is the last time the condition transitioned from one status to another.\nThis should be when the underlying condition changed.  If that is not known, then using the time when the API field changed is acceptable.\n+required\n+kubebuilder:validation:Required\n+kubebuilder:validation:Type=string\n+kubebuilder:validation:Format=date-time",
          "type": "string"
        },
        "message": {
          "description": "message is a human readable message indicating details about the transition.\nThis may be an empty string.\n+required\n+kubebuilder:validation:Required\n+kubebuilder:validation:MaxLength=32768",
          "type": "string"
        },
        "observedGeneration": {
          "description": "observedGeneration represents the .metadata.generation that the condition was set based upon.\nFor instance, if .metadata.generation is currently 12, but the .status.conditions[x].observedGeneration is 9, the condition is out of date\nwith respect to the current state of the instance.\n+optional\n+kubebuilder:validation:Minimum=0",
          "type": "integer"
        },
        "reason": {
          "description": "reason contains a programmatic identifier indicating the reason for the condition's last transition.\nProducers of specific condition types may define expected values and meanings for this field,\nand whether the values are considered a guaranteed API.\nThe value should be a CamelCase string.\nThis field may not be empty.\n+required\n+kubebuilder:validation:Required\n+kubebuilder:validation:MaxLength=1024\n+kubebuilder:validation:MinLength=1\n+kubebuilder:validation:Pattern=`^[A-Za-z]([A-Za-z0-9_,:]*[A-Za-z0-9_])?$`",
          "type": "string"
        },
        "status": {
          "description": "status of the condition, one of True, False, Unknown.\n+required\n+kubebuilder:validation:Required\n+kubebuilder:validation:Enum=True;False;Unknown",
          "type": "string"
        },
        "type": {
          "description": "type of condition in CamelCase or in foo.example.com/CamelCase.\n---\nMany .condition.type values are consistent across resources like Available, but because arbitrary conditions can be\nuseful (see .node.status.conditions), the ability to deconflict is important.\nThe regex it matches is (dns1123SubdomainFmt/)?(qualifiedNameFmt)\n+required\n+kubebuilder:validation:Required\n+kubebuilder:validation:Pattern=`^([a-z0-9]([-a-z0-9]*[a-z0-9])?(\\.[a-z0-9]([-a-z0-9]*[a-z0-9])?)*/)?(([A-Za-z0-9][-A-Za-z0-9_.]*)?[A-Za-z0-9])$`\n+kubebuilder:validation:MaxLength=316",
          "type": "string"
        }
      },
      "type": "object"
    },
    "v1.ConfigMapEnvSource": {
      "properties": {
        "name": {
          "description": "Name of the referent.\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names\nTODO: Add other useful fields. apiVersion, kind, uid?\n+optional",
          "type": "string"
        },
        "optional": {
          "description": "Specify whether the ConfigMap must be defined\n+optional",
          "type": "boolean"
        }
      },
      "type": "object"
    },
    "v1.ConfigMapKeySelector": {
      "properties": {
        "key": {
          "description": "The key to select.",
          "type": "string"
        },
        "name": {
          "description": "Name of the referent.\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names\nTODO: Add other useful fields. apiVersion, kind, uid?\n+optional",
          "type": "string"
        },
        "optional": {
          "description": "Specify whether the ConfigMap or its key must be defined\n+optional",
          "type": "boolean"
        }
      },
      "type": "object"
    },
    "v1.Container": {
      "properties": {
        "args": {
          "description": "Arguments to the entrypoint.\nThe container image's CMD is used if this is not provided.\nVariable references $(VAR_NAME) are expanded using the container's environment. If a variable\ncannot be resolved, the reference in the input string will be unchanged. Double $$ are reduced\nto a single $, which allows for escaping the $(VAR_NAME) syntax: i.e. \"$$(VAR_NAME)\" will\nproduce the string literal \"$(VAR_NAME)\". Escaped references will never be expanded, regardless\nof whether the variable exists or not. Cannot be updated.\nMore info: https://kubernetes.io/docs/tasks/inject-data-application/define-command-argument-container/#running-a-command-in-a-shell\n+optional",
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "command": {
          "description": "Entrypoint array. Not executed within a shell.\nThe container image's ENTRYPOINT is used if this is not provided.\nVariable references $(VAR_NAME) are expanded using the container's environment. If a variable\ncannot be resolved, the reference in the input string will be unchanged. Double $$ are reduced\nto a single $, which allows for escaping the $(VAR_NAME) syntax: i.e. \"$$(VAR_NAME)\" will\nproduce the string literal \"$(VAR_NAME)\". Escaped references will never be expanded, regardless\nof whether the variable exists or not. Cannot be updated.\nMore info: https://kubernetes.io/docs/tasks/inject-data-application/define-command-argument-container/#running-a-command-in-a-shell\n+optional",
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "env": {
          "description": "List of environment variables to set in the container.\nCannot be updated.\n+optional\n+patchMergeKey=name\n+patchStrategy=merge",
          "items": {
            "$ref": "#/definitions/v1.EnvVar"
          },
          "type": "array"
        },
        "envFrom": {
          "description": "List of sources to populate environment variables in the container.\nThe keys defined within a source must be a C_IDENTIFIER. All invalid keys\nwill be reported as an event when the container is starting. When a key exists in multiple\nsources, the value associated with the last source will take precedence.\nValues defined by an Env with a duplicate key will take precedence.\nCannot be updated.\n+optional",
          "items": {
            "$ref": "#/definitions/v1.EnvFromSource"
          },
          "type": "array"
        },
        "image": {
          "description": "Container image name.\nMore info: https://kubernetes.io/docs/concepts/containers/images\nThis field is optional to allow higher level config management to default or override\ncontainer images in workload controllers like Deployments and StatefulSets.\n+optional",
          "type": "string"
        },
        "imagePullPolicy": {
          "description": "Image pull policy.\nOne of Always, Never, IfNotPresent.\nDefaults to Always if :latest tag is specified, or IfNotPresent otherwise.\nCannot be updated.\nMore info: https://kubernetes.io/docs/concepts/containers/images#updating-images\n+optional",
          "type": "string"
        },
        "lifecycle": {
          "$ref": "#/definitions/v1.Lifecycle",
          "description": "Actions that the management system should take in response to container lifecycle events.\nCannot be updated.\n+optional"
        },
        "livenessProbe": {
          "$ref": "#/definitions/v1.Probe",
          "description": "Periodic probe of container liveness.\nContainer will be restarted if the probe fails.\nCannot be updated.\nMore info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes\n+optional"
        },
        "name": {
          "description": "Name of the container specified as a DNS_LABEL.\nEach container in a pod must have a unique name (DNS_LABEL).\nCannot be updated.",
          "type": "string"
        },
        "ports": {
          "description": "List of ports to expose from the container. Not specifying a port here\nDOES NOT prevent that port from being exposed. Any port which is\nlistening on the default \"0.0.0.0\" address inside a container will be\naccessible from the network.\nModifying this array with strategic merge patch may corrupt the data.\nFor more information See https://github.com/kubernetes/kubernetes/issues/108255.\nCannot be updated.\n+optional\n+patchMergeKey=containerPort\n+patchStrategy=merge\n+listType=map\n+listMapKey=containerPort\n+listMapKey=protocol",
          "items": {
            "$ref": "#/definitions/v1.ContainerPort"
          },
          "type": "array"
        },
        "readinessProbe": {
          "$ref": "#/definitions/v1.Probe",
          "description": "Periodic probe of container service readiness.\nContainer will be removed from service endpoints if the probe fails.\nCannot be updated.\nMore info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes\n+optional"
        },
        "resizePolicy": {
          "description": "Resources resize policy for the container.\n+featureGate=InPlacePodVerticalScaling\n+optional\n+listType=atomic",
          "items": {
            "$ref": "#/definitions/v1.ContainerResizePolicy"
          },
          "type": "array"
        },
        "resources": {
          "$ref": "#/definitions/v1.ResourceRequirements",
          "description": "Compute Resources required by this container.\nCannot be updated.\nMore info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/\n+optional"
        },
        "restartPolicy": {
          "description": "RestartPolicy defines the restart behavior of individual containers in a pod.\nThis field may only be set for init containers, and the only allowed value is \"Always\".\nFor non-init containers or when this field is not specified,\nthe restart behavior is defined by the Pod's restart policy and the container type.\nSetting the RestartPolicy as \"Always\" for the init container will have the following effect:\nthis init container will be continually restarted on\nexit until all regular containers have terminated. Once all regular\ncontainers have completed, all init containers with restartPolicy \"Always\"\nwill be shut down. This lifecycle differs from normal init containers and\nis often referred to as a \"sidecar\" container. Although this init\ncontainer still starts in the init container sequence, it does not wait\nfor the container to complete before proceeding to the next init\ncontainer. Instead, the next init container starts immediately after this\ninit container is started, or after any startupProbe has successfully\ncompleted.\n+featureGate=SidecarContainers\n+optional",
          "type": "string"
        },
        "securityContext": {
          "$ref": "#/definitions/v1.SecurityContext",
          "description": "SecurityContext defines the security options the container should be run with.\nIf set, the fields of SecurityContext override the equivalent fields of PodSecurityContext.\nMore info: https://kubernetes.io/docs/tasks/configure-pod-container/security-context/\n+optional"
        },
        "startupProbe": {
          "$ref": "#/definitions/v1.Probe",
          "description": "StartupProbe indicates that the Pod has successfully initialized.\nIf specified, no other probes are executed until this completes successfully.\nIf this probe fails, the Pod will be restarted, just as if the livenessProbe failed.\nThis can be used to provide different probe parameters at the beginning of a Pod's lifecycle,\nwhen it might take a long time to load data or warm a cache, than during steady-state operation.\nThis cannot be updated.\nMore info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes\n+optional"
        },
        "stdin": {
          "description": "Whether this container should allocate a buffer for stdin in the container runtime. If this\nis not set, reads from stdin in the container will always result in EOF.\nDefault is false.\n+optional",
          "type": "boolean"
        },
        "stdinOnce": {
          "description": "Whether the container runtime should close the stdin channel after it has been opened by\na single attach. When stdin is true the stdin stream will remain open across multiple attach\nsessions. If stdinOnce is set to true, stdin is opened on container start, is empty until the\nfirst client attaches to stdin, and then remains open and accepts data until the client disconnects,\nat which time stdin is closed and remains closed until the container is restarted. If this\nflag is false, a container processes that reads from stdin will never receive an EOF.\nDefault is false\n+optional",
          "type": "boolean"
        },
        "terminationMessagePath": {
          "description": "Optional: Path at which the file to which the container's termination message\nwill be written is mounted into the container's filesystem.\nMessage written is intended to be brief final status, such as an assertion failure message.\nWill be truncated by the node if greater than 4096 bytes. The total message length across\nall containers will be limited to 12kb.\nDefaults to /dev/termination-log.\nCannot be updated.\n+optional",
          "type": "string"
        },
        "terminationMessagePolicy": {
          "description": "Indicate how the termination message should be populated. File will use the contents of\nterminationMessagePath to populate the container status message on both success and failure.\nFallbackToLogsOnError will use the last chunk of container log output if the termination\nmessage file is empty and the container exited with an error.\nThe log output is limited to 2048 bytes or 80 lines, whichever is smaller.\nDefaults to File.\nCannot be updated.\n+optional",
          "type": "string"
        },
        "tty": {
          "description": "Whether this container should allocate a TTY for itself, also requires 'stdin' to be true.\nDefault is false.\n+optional",
          "type": "boolean"
        },
        "volumeDevices": {
          "description": "volumeDevices is the list of block devices to be used by the container.\n+patchMergeKey=devicePath\n+patchStrategy=merge\n+optional",
          "items": {
            "$ref": "#/definitions/v1.VolumeDevice"
          },
          "type": "array"
        },
        "volumeMounts": {
          "description": "Pod volumes to mount into the container's filesystem.\nCannot be updated.\n+optional\n+patchMergeKey=mountPath\n+patchStrategy=merge",
          "items": {
            "$ref": "#/definitions/v1.VolumeMount"
          },
          "type": "array"
        },
        "workingDir": {
          "description": "Container's working directory.\nIf not specified, the container runtime's default will be used, which\nmight be configured in the container image.\nCannot be updated.\n+optional",
          "type": "string"
        }
      },
      "type": "object"
    },
    "v1.ContainerPort": {
      "properties": {
        "containerPort": {
          "description": "Number of port to expose on the pod's IP address.\nThis must be a valid port number, 0 < x < 65536.",
          "type": "integer"
        },
        "hostIP": {
          "description": "What host IP to bind the external port to.\n+optional",
          "type": "string"
        },
        "hostPort": {
          "description": "Number of port to expose on the host.\nIf specified, this must be a valid port number, 0 < x < 65536.\nIf HostNetwork is specified, this must match ContainerPort.\nMost containers do not need this.\n+optional",
          "type": "integer"
        },
        "name": {
          "description": "If specified, this must be an IANA_SVC_NAME and unique within the pod. Each\nnamed port in a pod must have a unique name. Name for the port that can be\nreferred to by services.\n+optional",
          "type": "string"
        },
        "protocol": {
          "description": "Protocol for port. Must be UDP, TCP, or SCTP.\nDefaults to \"TCP\".\n+optional\n+default=\"TCP\"",
          "type": "string"
        }
      },
      "type": "object"
    },
    "v1.ContainerResizePolicy": {
      "properties": {
        "resourceName": {
          "description": "Name of the resource to which this resource resize policy applies.\nSupported values: cpu, memory.",
          "type": "string"
        },
        "restartPolicy": {
          "description": "Restart policy to apply when specified resource is resized.\nIf not specified, it defaults to NotRequired.",
          "type": "string"
        }
      },
      "type": "object"
    },
    "v1.Duration": {
      "properties": {
        "time.Duration": {
          "type": "integer"
        }
      },
      "type": "object"
    },
    "v1.EnvFromSource": {
      "properties": {
        "configMapRef": {
          "$ref": "#/definitions/v1.ConfigMapEnvSource",
          "description": "The ConfigMap to select from\n+optional"
        },
        "prefix": {
          "description": "An optional identifier to prepend to each key in the ConfigMap. Must be a C_IDENTIFIER.\n+optional",
          "type": "string"
        },
        "secretRef": {
          "$ref": "#/definitions/v1.SecretEnvSource",
          "description": "The Secret to select from\n+optional"
        }
      },
      "type": "object"
    },
    "v1.EnvVar": {
      "properties": {
        "name": {
          "description": "Name of the environment variable. Must be a C_IDENTIFIER.",
          "type": "string"
        },
        "value": {
          "description": "Variable references $(VAR_NAME) are expanded\nusing the previously defined environment variables in the container and\nany service environment variables. If a variable cannot be resolved,\nthe reference in the input string will be unchanged. Double $$ are reduced\nto a single $, which allows for escaping the $(VAR_NAME) syntax: i.e.\n\"$$(VAR_NAME)\" will produce the string literal \"$(VAR_NAME)\".\nEscaped references will never be expanded, regardless of whether the variable\nexists or not.\nDefaults to \"\".\n+optional",
          "type": "string"
        },
        "valueFrom": {
          "$ref": "#/definitions/v1.EnvVarSource",
          "description": "Source for the environment variable's value. Cannot be used if value is not empty.\n+optional"
        }
      },
      "type": "object"
    },
    "v1.EnvVarSource": {
      "properties": {
        "configMapKeyRef": {
          "$ref": "#/definitions/v1.ConfigMapKeySelector",
          "description": "Selects a key of a ConfigMap.\n+optional"
        },
        "fieldRef": {
          "$ref": "#/definitions/v1.ObjectFieldSelector",
          "description": "Selects a field of the pod: supports metadata.name, metadata.namespace, `metadata.labels['<KEY>']`, `metadata.annotations['<KEY>']`,\nspec.nodeName, spec.serviceAccountName, status.hostIP, status.podIP, status.podIPs.\n+optional"
        },
        "resourceFieldRef": {
          "$ref": "#/definitions/v1.ResourceFieldSelector",
          "description": "Selects a resource of the container: only resources limits and requests\n(limits.cpu, limits.memory, limits.ephemeral-storage, requests.cpu, requests.memory and requests.ephemeral-storage) are currently supported.\n+optional"
        },
        "secretKeyRef": {
          "$ref": "#/definitions/v1.SecretKeySelector",
          "description": "Selects a key of a secret in the pod's namespace\n+optional"
        }
      },
      "type": "object"
    },
    "v1.ExecAction": {
      "properties": {
        "command": {
          "description": "Command is the command line to execute inside the container, the working directory for the\ncommand  is root ('/') in the container's filesystem. The command is simply exec'd, it is\nnot run inside a shell, so traditional shell instructions ('|', etc) won't work. To use\na shell, you need to explicitly call out to that shell.\nExit status of 0 is treated as live/healthy and non-zero is unhealthy.\n+optional",
          "items": {
            "type": "string"
          },
          "type": "array"
        }
      },
      "type": "object"
    },
    "v1.FieldsV1": {
      "type": "object"
    },
    "v1.GRPCAction": {
      "properties": {
        "port": {
          "description": "Port number of the gRPC service. Number must be in the range 1 to 65535.",
          "type": "integer"
        },
        "service": {
          "description": "Service is the name of the service to place in the gRPC HealthCheckRequest\n(see https://github.com/grpc/grpc/blob/master/doc/health-checking.md).\n\nIf this is not specified, the default behavior is defined by gRPC.\n+optional\n+default=\"\"",
          "type": "string"
        }
      },
      "type": "object"
    },
    "v1.HTTPGetAction": {
      "properties": {
        "host": {
          "description": "Host name to connect to, defaults to the pod IP. You probably want to set\n\"Host\" in httpHeaders instead.\n+optional",
          "type": "string"
        },
        "httpHeaders": {
          "description": "Custom headers to set in the request. HTTP allows repeated headers.\n+optional",
          "items": {
            "$ref": "#/definitions/v1.HTTPHeader"
          },
          "type": "array"
        },
        "path": {
          "description": "Path to access on the HTTP server.\n+optional",
          "type": "string"
        },
        "port": {
          "$ref": "#/definitions/intstr.IntOrString",
          "description": "Name or number of the port to access on the container.\nNumber must be in the range 1 to 65535.\nName must be an IANA_SVC_NAME."
        },
        "scheme": {
          "description": "Scheme to use for connecting to the host.\nDefaults to HTTP.\n+optional",
          "type": "string"
        }
      },
      "type": "object"
    },
    "v1.HTTPHeader": {
      "properties": {
        "name": {
          "description": "The header field name.\nThis will be canonicalized upon output, so case-variant names will be understood as the same header.",
          "type": "string"
        },
        "value": {
          "description": "The header field value",
          "type": "string"
        }
      },
      "type": "object"
    },
    "v1.LabelSelector": {
      "properties": {
        "matchExpressions": {
          "description": "matchExpressions is a list of label selector requirements. The requirements are ANDed.\n+optional",
          "items": {
            "$ref": "#/definitions/v1.LabelSelectorRequirement"
          },
          "type": "array"
        },
        "matchLabels": {
          "additionalProperties": {
            "type": "string"
          },
          "description": "matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels\nmap is equivalent to an element of matchExpressions, whose key field is \"key\", the\noperator is \"In\", and the values array contains only \"value\". The requirements are ANDed.\n+optional",
          "type": "object"
        }
      },
      "type": "object"
    },
    "v1.LabelSelectorRequirement": {
      "properties": {
        "key": {
          "description": "key is the label key that the selector applies to.",
          "type": "string"
        },
        "operator": {
          "description": "operator represents a key's relationship to a set of values.\nValid operators are In, NotIn, Exists and DoesNotExist.",
          "type": "string"
        },
        "values": {
          "description": "values is an array of string values. If the operator is In or NotIn,\nthe values array must be non-empty. If the operator is Exists or DoesNotExist,\nthe values array must be empty. This array is replaced during a strategic\nmerge patch.\n+optional",
          "items": {
            "type": "string"
          },
          "type": "array"
        }
      },
      "type": "object"
    },
    "v1.Lifecycle": {
      "properties": {
        "postStart": {
          "$ref": "#/definitions/v1.LifecycleHandler",
          "description": "PostStart is called immediately after a container is created. If the handler fails,\nthe container is terminated and restarted according to its restart policy.\nOther management of the container blocks until the hook completes.\nMore info: https://kubernetes.io/docs/concepts/containers/container-lifecycle-hooks/#container-hooks\n+optional"
        },
        "preStop": {
          "$ref": "#/definitions/v1.LifecycleHandler",
          "description": "PreStop is called immediately before a container is terminated due to an\nAPI request or management event such as liveness/startup probe failure,\npreemption, resource contention, etc. The handler is not called if the\ncontainer crashes or exits. The Pod's termination grace period countdown begins before the\nPreStop hook is executed. Regardless of the outcome of the handler, the\ncontainer will eventually terminate within the Pod's termination grace\nperiod (unless delayed by finalizers). Other management of the container blocks until the hook completes\nor until the termination grace period is reached.\nMore info: https://kubernetes.io/docs/concepts/containers/container-lifecycle-hooks/#container-hooks\n+optional"
        }
      },
      "type": "object"
    },
    "v1.LifecycleHandler": {
      "properties": {
        "exec": {
          "$ref": "#/definitions/v1.ExecAction",
          "description": "Exec specifies the action to take.\n+optional"
        },
        "httpGet": {
          "$ref": "#/definitions/v1.HTTPGetAction",
          "description": "HTTPGet specifies the http request to perform.\n+optional"
        },
        "sleep": {
          "$ref": "#/definitions/v1.SleepAction",
          "description": "Sleep represents the duration that the container should sleep before being terminated.\n+featureGate=PodLifecycleSleepAction\n+optional"
        },
        "tcpSocket": {
          "$ref": "#/definitions/v1.TCPSocketAction",
          "description": "Deprecated. TCPSocket is NOT supported as a LifecycleHandler and kept\nfor the backward compatibility. There are no validation of this field and\nlifecycle hooks will fail in runtime when tcp handler is specified.\n+optional"
        }
      },
      "type": "object"
    },
    "v1.LoadBalancerIngress": {
      "properties": {
        "hostname": {
          "description": "Hostname is set for load-balancer ingress points that are DNS based\n(typically AWS load-balancers)\n+optional",
          "type": "string"
        },
        "ip": {
          "description": "IP is set for load-balancer ingress points that are IP based\n(typically GCE or OpenStack load-balancers)\n+optional",
          "type": "string"
        },
        "ipMode": {
          "description": "IPMode specifies how the load-balancer IP behaves, and may only be specified when the ip field is specified.\nSetting this to \"VIP\" indicates that traffic is delivered to the node with\nthe destination set to the load-balancer's IP and port.\nSetting this to \"Proxy\" indicates that traffic is delivered to the node or pod with\nthe destination set to the node's IP and node port or the pod's IP and port.\nService implementations may use this information to adjust traffic routing.\n+optional",
          "type": "string"
        },
        "ports": {
          "description": "Ports is a list of records of service ports\nIf used, every port defined in the service should have an entry in it\n+listType=atomic\n+optional",
          "items": {
            "$ref": "#/definitions/v1.PortStatus"
          },
          "type": "array"
        }
      },
      "type": "object"
    },
    "v1.LoadBalancerStatus": {
      "properties": {
        "ingress": {
          "description": "Ingress is a list containing ingress points for the load-balancer.\nTraffic intended for the service should be sent to these ingress points.\n+optional",
          "items": {
            "$ref": "#/definitions/v1.LoadBalancerIngress"
          },
          "type": "array"
        }
      },
      "type": "object"
    },
    "v1.ManagedFieldsEntry": {
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the version of this resource that this field set\napplies to. The format is \"group/version\" just like the top-level\nAPIVersion field. It is necessary to track the version of a field\nset because it cannot be automatically converted.",
          "type": "string"
        },
        "fieldsType": {
          "description": "FieldsType is the discriminator for the different fields format and version.\nThere is currently only one possible value: \"FieldsV1\"",
          "type": "string"
        },
        "fieldsV1": {
          "$ref": "#/definitions/v1.FieldsV1",
          "description": "FieldsV1 holds the first JSON version format as described in the \"FieldsV1\" type.\n+optional"
        },
        "manager": {
          "description": "Manager is an identifier of the workflow managing these fields.",
          "type": "string"
        },
        "operation": {
          "description": "Operation is the type of operation which lead to this ManagedFieldsEntry being created.\nThe only valid values for this field are 'Apply' and 'Update'.",
          "type": "string"
        },
        "subresource": {
          "description": "Subresource is the name of the subresource used to update that object, or\nempty string if the object was updated through the main resource. The\nvalue of this field is used to distinguish between managers, even if they\nshare the same name. For example, a status update will be distinct from a\nregular update using the same manager name.\nNote that the APIVersion field is not related to the Subresource field and\nit always corresponds to the version of the main resource.",
          "type": "string"
        },
        "time": {
          "description": "Time is the timestamp of when the ManagedFields entry was added. The\ntimestamp will also be updated if a field is added, the manager\nchanges any of the owned fields value or removes a field. The\ntimestamp does not update when a field is removed from the entry\nbecause another manager took it over.\n+optional",
          "type": "string"
        }
      },
      "type": "object"
    },
    "v1.NamespaceCondition": {
      "properties": {
        "lastTransitionTime": {
          "description": "+optional",
          "type": "string"
        },
        "message": {
          "description": "+optional",
          "type": "string"
        },
        "reason": {
          "description": "+optional",
          "type": "string"
        },
        "status": {
          "description": "Status of the condition, one of True, False, Unknown.",
          "type": "string"
        },
        "type": {
          "description": "Type of namespace controller condition.",
          "type": "string"
        }
      },
      "type": "object"
    },
    "v1.NamespaceStatus": {
      "properties": {
        "conditions": {
          "description": "Represents the latest available observations of a namespace's current state.\n+optional\n+patchMergeKey=type\n+patchStrategy=merge",
          "items": {
            "$ref": "#/definitions/v1.NamespaceCondition"
          },
          "type": "array"
        },
        "phase": {
          "description": "Phase is the current lifecycle phase of the namespace.\nMore info: https://kubernetes.io/docs/tasks/administer-cluster/namespaces/\n+optional",
          "type": "string"
        }
      },
      "type": "object"
    },
    "v1.ObjectFieldSelector": {
      "properties": {
        "apiVersion": {
          "description": "Version of the schema the FieldPath is written in terms of, defaults to \"v1\".\n+optional",
          "type": "string"
        },
        "fieldPath": {
          "description": "Path of the field to select in the specified API version.",
          "type": "string"
        }
      },
      "type": "object"
    },
    "v1.ObjectReference": {
      "properties": {
        "apiVersion": {
          "description": "API version of the referent.\n+optional",
          "type": "string"
        },
        "fieldPath": {
          "description": "If referring to a piece of an object instead of an entire object, this string\nshould contain a valid JSON/Go field access statement, such as desiredState.manifest.containers[2].\nFor example, if the object reference is to a container within a pod, this would take on a value like:\n\"spec.containers{name}\" (where \"name\" refers to the name of the container that triggered\nthe event) or if no container name is specified \"spec.containers[2]\" (container with\nindex 2 in this pod). This syntax is chosen only to have some well-defined way of\nreferencing a part of an object.\nTODO: this design is not final and this field is subject to change in the future.\n+optional",
          "type": "string"
        },
        "kind": {
          "description": "Kind of the referent.\nMore info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds\n+optional",
          "type": "string"
        },
        "name": {
          "description": "Name of the referent.\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names\n+optional",
          "type": "string"
        },
        "namespace": {
          "description": "Namespace of the referent.\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/\n+optional",
          "type": "string"
        },
        "resourceVersion": {
          "description": "Specific resourceVersion to which this reference is made, if any.\nMore info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency\n+optional",
          "type": "string"
        },
        "uid": {
          "description": "UID of the referent.\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#uids\n+optional",
          "type": "string"
        }
      },
      "type": "object"
    },
    "v1.OwnerReference": {
      "properties": {
        "apiVersion": {
          "description": "API version of the referent.",
          "type": "string"
        },
        "blockOwnerDeletion": {
          "description": "If true, AND if the owner has the \"foregroundDeletion\" finalizer, then\nthe owner cannot be deleted from the key-value store until this\nreference is removed.\nSee https://kubernetes.io/docs/concepts/architecture/garbage-collection/#foreground-deletion\nfor how the garbage collector interacts with this field and enforces the foreground deletion.\nDefaults to false.\nTo set this field, a user needs \"delete\" permission of the owner,\notherwise 422 (Unprocessable Entity) will be returned.\n+optional",
          "type": "boolean"
        },
        "controller": {
          "description": "If true, this reference points to the managing controller.\n+optional",
          "type": "boolean"
        },
        "kind": {
          "description": "Kind of the referent.\nMore info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string"
        },
        "name": {
          "description": "Name of the referent.\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names#names",
          "type": "string"
        },
        "uid": {
          "description": "UID of the referent.\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names#uids",
          "type": "string"
        }
      },
      "type": "object"
    },
    "v1.PortStatus": {
      "properties": {
        "error": {
          "description": "Error is to record the problem with the service port\nThe format of the error shall comply with the following rules:\n- built-in error values shall be specified in this file and those shall use\n  CamelCase names\n- cloud provider specific error values must have names that comply with the\n  format foo.example.com/CamelCase.\n---\nThe regex it matches is (dns1123SubdomainFmt/)?(qualifiedNameFmt)\n+optional\n+kubebuilder:validation:Required\n+kubebuilder:validation:Pattern=`^([a-z0-9]([-a-z0-9]*[a-z0-9])?(\\.[a-z0-9]([-a-z0-9]*[a-z0-9])?)*/)?(([A-Za-z0-9][-A-Za-z0-9_.]*)?[A-Za-z0-9])$`\n+kubebuilder:validation:MaxLength=316",
          "type": "string"
        },
        "port": {
          "description": "Port is the port number of the service port of which status is recorded here",
          "type": "integer"
        },
        "protocol": {
          "description": "Protocol is the protocol of the service port of which status is recorded here\nThe supported values are: \"TCP\", \"UDP\", \"SCTP\"",
          "type": "string"
        }
      },
      "type": "object"
    },
    "v1.Probe": {
      "properties": {
        "exec": {
          "$ref": "#/definitions/v1.ExecAction",
          "description": "Exec specifies the action to take.\n+optional"
        },
        "failureThreshold": {
          "description": "Minimum consecutive failures for the probe to be considered failed after having succeeded.\nDefaults to 3. Minimum value is 1.\n+optional",
          "type": "integer"
        },
        "grpc": {
          "$ref": "#/definitions/v1.GRPCAction",
          "description": "GRPC specifies an action involving a GRPC port.\n+optional"
        },
        "httpGet": {
          "$ref": "#/definitions/v1.HTTPGetAction",
          "description": "HTTPGet specifies the http request to perform.\n+optional"
        },
        "initialDelaySeconds": {
          "description": "Number of seconds after the container has started before liveness probes are initiated.\nMore info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes\n+optional",
          "type": "integer"
        },
        "periodSeconds": {
          "description": "How often (in seconds) to perform the probe.\nDefault to 10 seconds. Minimum value is 1.\n+optional",
          "type": "integer"
        },
        "successThreshold": {
          "description": "Minimum consecutive successes for the probe to be considered successful after having failed.\nDefaults to 1. Must be 1 for liveness and startup. Minimum value is 1.\n+optional",
          "type": "integer"
        },
        "tcpSocket": {
          "$ref": "#/definitions/v1.TCPSocketAction",
          "description": "TCPSocket specifies an action involving a TCP port.\n+optional"
        },
        "terminationGracePeriodSeconds": {
          "description": "Optional duration in seconds the pod needs to terminate gracefully upon probe failure.\nThe grace period is the duration in seconds after the processes running in the pod are sent\na termination signal and the time when the processes are forcibly halted with a kill signal.\nSet this value longer than the expected cleanup time for your process.\nIf this value is nil, the pod's terminationGracePeriodSeconds will be used. Otherwise, this\nvalue overrides the value provided by the pod spec.\nValue must be non-negative integer. The value zero indicates stop immediately via\nthe kill signal (no opportunity to shut down).\nThis is a beta field and requires enabling ProbeTerminationGracePeriod feature gate.\nMinimum value is 1. spec.terminationGracePeriodSeconds is used if unset.\n+optional",
          "type": "integer"
        },
        "timeoutSeconds": {
          "description": "Number of seconds after which the probe times out.\nDefaults to 1 second. Minimum value is 1.\nMore info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes\n+optional",
          "type": "integer"
        }
      },
      "type": "object"
    },
    "v1.ResourceClaim": {
      "properties": {
        "name": {
          "description": "Name must match the name of one entry in pod.spec.resourceClaims of\nthe Pod where this field is used. It makes that resource available\ninside a container.",
          "type": "string"
        }
      },
      "type": "object"
    },
    "v1.ResourceFieldSelector": {
      "properties": {
        "containerName": {
          "description": "Container name: required for volumes, optional for env vars\n+optional",
          "type": "string"
        },
        "divisor": {
          "$ref": "#/definitions/resource.Quantity",
          "description": "Specifies the output format of the exposed resources, defaults to \"1\"\n+optional"
        },
        "resource": {
          "description": "Required: resource to select",
          "type": "string"
        }
      },
      "type": "object"
    },
    "v1.ResourceList": {
      "additionalProperties": {
        "$ref": "#/definitions/resource.Quantity"
      },
      "type": "object"
    },
    "v1.ResourceQuota": {
      "properties": {
        "annotations": {
          "additionalProperties": {
            "type": "string"
          },
          "description": "Annotations is an unstructured key value map stored with a resource that may be\nset by external tools to store and retrieve arbitrary metadata. They are not\nqueryable and should be preserved when modifying objects.\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/annotations\n+optional",
          "type": "object"
        },
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object.\nServers should convert recognized schemas to the latest internal value, and\nmay reject unrecognized values.\nMore info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources\n+optional",
          "type": "string"
        },
        "creationTimestamp": {
          "description": "CreationTimestamp is a timestamp representing the server time when this object was\ncreated. It is not guaranteed to be set in happens-before order across separate operations.\nClients may not set this value. It is represented in RFC3339 form and is in UTC.\n\nPopulated by the system.\nRead-only.\nNull for lists.\nMore info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata\n+optional",
          "type": "string"
        },
        "deletionGracePeriodSeconds": {
          "description": "Number of seconds allowed for this object to gracefully terminate before\nit will be removed from the system. Only set when deletionTimestamp is also set.\nMay only be shortened.\nRead-only.\n+optional",
          "type": "integer"
        },
        "deletionTimestamp": {
          "description": "DeletionTimestamp is RFC 3339 date and time at which this resource will be deleted. This\nfield is set by the server when a graceful deletion is requested by the user, and is not\ndirectly settable by a client. The resource is expected to be deleted (no longer visible\nfrom resource lists, and not reachable by name) after the time in this field, once the\nfinalizers list is empty. As long as the finalizers list contains items, deletion is blocked.\nOnce the deletionTimestamp is set, this value may not be unset or be set further into the\nfuture, although it may be shortened or the resource may be deleted prior to this time.\nFor example, a user may request that a pod is deleted in 30 seconds. The Kubelet will react\nby sending a graceful termination signal to the containers in the pod. After that 30 seconds,\nthe Kubelet will send a hard termination signal (SIGKILL) to the container and after cleanup,\nremove the pod from the API. In the presence of network partitions, this object may still\nexist after this timestamp, until an administrator or automated process can determine the\nresource is fully terminated.\nIf not set, graceful deletion of the object has not been requested.\n\nPopulated by the system when a graceful deletion is requested.\nRead-only.\nMore info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata\n+optional",
          "type": "string"
        },
        "finalizers": {
          "description": "Must be empty before the object is deleted from the registry. Each entry\nis an identifier for the responsible component that will remove the entry\nfrom the list. If the deletionTimestamp of the object is non-nil, entries\nin this list can only be removed.\nFinalizers may be processed and removed in any order.  Order is NOT enforced\nbecause it introduces significant risk of stuck finalizers.\nfinalizers is a shared field, any actor with permission can reorder it.\nIf the finalizer list is processed in order, then this can lead to a situation\nin which the component responsible for the first finalizer in the list is\nwaiting for a signal (field value, external system, or other) produced by a\ncomponent responsible for a finalizer later in the list, resulting in a deadlock.\nWithout enforced ordering finalizers are free to order amongst themselves and\nare not vulnerable to ordering changes in the list.\n+optional\n+patchStrategy=merge",
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "generateName": {
          "description": "GenerateName is an optional prefix, used by the server, to generate a unique\nname ONLY IF the Name field has not been provided.\nIf this field is used, the name returned to the client will be different\nthan the name passed. This value will also be combined with a unique suffix.\nThe provided value has the same validation rules as the Name field,\nand may be truncated by the length of the suffix required to make the value\nunique on the server.\n\nIf this field is specified and the generated name exists, the server will return a 409.\n\nApplied only if Name is not specified.\nMore info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#idempotency\n+optional",
          "type": "string"
        },
        "generation": {
          "description": "A sequence number representing a specific generation of the desired state.\nPopulated by the system. Read-only.\n+optional",
          "type": "integer"
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents.\nServers may infer this from the endpoint the client submits requests to.\nCannot be updated.\nIn CamelCase.\nMore info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds\n+optional",
          "type": "string"
        },
        "labels": {
          "additionalProperties": {
            "type": "string"
          },
          "description": "Map of string keys and values that can be used to organize and categorize\n(scope and select) objects. May match selectors of replication controllers\nand services.\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/labels\n+optional",
          "type": "object"
        },
        "managedFields": {
          "description": "ManagedFields maps workflow-id and version to the set of fields\nthat are managed by that workflow. This is mostly for internal\nhousekeeping, and users typically shouldn't need to set or\nunderstand this field. A workflow can be the user's name, a\ncontroller's name, or the name of a specific apply path like\n\"ci-cd\". The set of fields is always in the version that the\nworkflow used when modifying the object.\n\n+optional",
          "items": {
            "$ref": "#/definitions/v1.ManagedFieldsEntry"
          },
          "type": "array"
        },
        "name": {
          "description": "Name must be unique within a namespace. Is required when creating resources, although\nsome resources may allow a client to request the generation of an appropriate name\nautomatically. Name is primarily intended for creation idempotence and configuration\ndefinition.\nCannot be updated.\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names#names\n+optional",
          "type": "string"
        },
        "namespace": {
          "description": "Namespace defines the space within which each name must be unique. An empty namespace is\nequivalent to the \"default\" namespace, but \"default\" is the canonical representation.\nNot all objects are required to be scoped to a namespace - the value of this field for\nthose objects will be empty.\n\nMust be a DNS_LABEL.\nCannot be updated.\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces\n+optional",
          "type": "string"
        },
        "ownerReferences": {
          "description": "List of objects depended by this object. If ALL objects in the list have\nbeen deleted, this object will be garbage collected. If this object is managed by a controller,\nthen an entry in this list will point to this controller, with the controller field set to true.\nThere cannot be more than one managing controller.\n+optional\n+patchMergeKey=uid\n+patchStrategy=merge",
          "items": {
            "$ref": "#/definitions/v1.OwnerReference"
          },
          "type": "array"
        },
        "resourceVersion": {
          "description": "An opaque value that represents the internal version of this object that can\nbe used by clients to determine when objects have changed. May be used for optimistic\nconcurrency, change detection, and the watch operation on a resource or set of resources.\nClients must treat these values as opaque and passed unmodified back to the server.\nThey may only be valid for a particular resource or set of resources.\n\nPopulated by the system.\nRead-only.\nValue must be treated as opaque by clients and .\nMore info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency\n+optional",
          "type": "string"
        },
        "selfLink": {
          "description": "Deprecated: selfLink is a legacy read-only field that is no longer populated by the system.\n+optional",
          "type": "string"
        },
        "spec": {
          "$ref": "#/definitions/v1.ResourceQuotaSpec",
          "description": "Spec defines the desired quota.\nhttps://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status\n+optional"
        },
        "status": {
          "$ref": "#/definitions/v1.ResourceQuotaStatus",
          "description": "Status defines the actual enforced quota and its current usage.\nhttps://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status\n+optional"
        },
        "uid": {
          "description": "UID is the unique in time and space value for this object. It is typically generated by\nthe server on successful creation of a resource and is not allowed to change on PUT\noperations.\n\nPopulated by the system.\nRead-only.\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names#uids\n+optional",
          "type": "string"
        }
      },
      "type": "object"
    },
    "v1.ResourceQuotaSpec": {
      "properties": {
        "hard": {
          "$ref": "#/definitions/v1.ResourceList",
          "description": "hard is the set of desired hard limits for each named resource.\nMore info: https://kubernetes.io/docs/concepts/policy/resource-quotas/\n+optional"
        },
        "scopeSelector": {
          "$ref": "#/definitions/v1.ScopeSelector",
          "description": "scopeSelector is also a collection of filters like scopes that must match each object tracked by a quota\nbut expressed using ScopeSelectorOperator in combination with possible values.\nFor a resource to match, both scopes AND scopeSelector (if specified in spec), must be matched.\n+optional"
        },
        "scopes": {
          "description": "A collection of filters that must match each object tracked by a quota.\nIf not specified, the quota matches all objects.\n+optional",
          "items": {
            "description": "The name of the scope that the selector applies to.",
            "type": "string"
          },
          "type": "array"
        }
      },
      "type": "object"
    },
    "v1.ResourceQuotaStatus": {
      "properties": {
        "hard": {
          "$ref": "#/definitions/v1.ResourceList",
          "description": "Hard is the set of enforced hard limits for each named resource.\nMore info: https://kubernetes.io/docs/concepts/policy/resource-quotas/\n+optional"
        },
        "used": {
          "$ref": "#/definitions/v1.ResourceList",
          "description": "Used is the current observed total usage of the resource in the namespace.\n+optional"
        }
      },
      "type": "object"
    },
    "v1.ResourceRequirements": {
      "properties": {
        "claims": {
          "description": "Claims lists the names of resources, defined in spec.resourceClaims,\nthat are used by this container.\n\nThis is an alpha field and requires enabling the\nDynamicResourceAllocation feature gate.\n\nThis field is immutable. It can only be set for containers.\n\n+listType=map\n+listMapKey=name\n+featureGate=DynamicResourceAllocation\n+optional",
          "items": {
            "$ref": "#/definitions/v1.ResourceClaim"
          },
          "type": "array"
        },
        "limits": {
          "$ref": "#/definitions/v1.ResourceList",
          "description": "Limits describes the maximum amount of compute resources allowed.\nMore info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/\n+optional"
        },
        "requests": {
          "$ref": "#/definitions/v1.ResourceList",
          "description": "Requests describes the minimum amount of compute resources required.\nIf Requests is omitted for a container, it defaults to Limits if that is explicitly specified,\notherwise to an implementation-defined value. Requests cannot exceed Limits.\nMore info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/\n+optional"
        }
      },
      "type": "object"
    },
    "v1.RoleRef": {
      "properties": {
        "apiGroup": {
          "description": "APIGroup is the group for the resource being referenced",
          "type": "string"
        },
        "kind": {
          "description": "Kind is the type of resource being referenced",
          "type": "string"
        },
        "name": {
          "description": "Name is the name of resource being referenced",
          "type": "string"
        }
      },
      "type": "object"
    },
    "v1.SELinuxOptions": {
      "properties": {
        "level": {
          "description": "Level is SELinux level label that applies to the container.\n+optional",
          "type": "string"
        },
        "role": {
          "description": "Role is a SELinux role label that applies to the container.\n+optional",
          "type": "string"
        },
        "type": {
          "description": "Type is a SELinux type label that applies to the container.\n+optional",
          "type": "string"
        },
        "user": {
          "description": "User is a SELinux user label that applies to the container.\n+optional",
          "type": "string"
        }
      },
      "type": "object"
    },
    "v1.ScopeSelector": {
      "properties": {
        "matchExpressions": {
          "description": "A list of scope selector requirements by scope of the resources.\n+optional",
          "items": {
            "$ref": "#/definitions/v1.ScopedResourceSelectorRequirement"
          },
          "type": "array"
        }
      },
      "type": "object"
    },
    "v1.ScopedResourceSelectorRequirement": {
      "properties": {
        "operator": {
          "description": "Represents a scope's relationship to a set of values.\nValid operators are In, NotIn, Exists, DoesNotExist.",
          "type": "string"
        },
        "scopeName": {
          "description": "The name of the scope that the selector applies to.",
          "type": "string"
        },
        "values": {
          "description": "An array of string values. If the operator is In or NotIn,\nthe values array must be non-empty. If the operator is Exists or DoesNotExist,\nthe values array must be empty.\nThis array is replaced during a strategic merge patch.\n+optional",
          "items": {
            "type": "string"
          },
          "type": "array"
        }
      },
      "type": "object"
    },
    "v1.SeccompProfile": {
      "properties": {
        "localhostProfile": {
          "description": "localhostProfile indicates a profile defined in a file on the node should be used.\nThe profile must be preconfigured on the node to work.\nMust be a descending path, relative to the kubelet's configured seccomp profile location.\nMust be set if type is \"Localhost\". Must NOT be set for any other type.\n+optional",
          "type": "string"
        },
        "type": {
          "description": "type indicates which kind of seccomp profile will be applied.\nValid options are:\n\nLocalhost - a profile defined in a file on the node should be used.\nRuntimeDefault - the container runtime default profile should be used.\nUnconfined - no profile should be applied.\n+unionDiscriminator",
          "type": "string"
        }
      },
      "type": "object"
    },
    "v1.SecretEnvSource": {
      "properties": {
        "name": {
          "description": "Name of the referent.\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names\nTODO: Add other useful fields. apiVersion, kind, uid?\n+optional",
          "type": "string"
        },
        "optional": {
          "description": "Specify whether the Secret must be defined\n+optional",
          "type": "boolean"
        }
      },
      "type": "object"
    },
    "v1.SecretKeySelector": {
      "properties": {
        "key": {
          "description": "The key of the secret to select from.  Must be a valid secret key.",
          "type": "string"
        },
        "name": {
          "description": "Name of the referent.\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names\nTODO: Add other useful fields. apiVersion, kind, uid?\n+optional",
          "type": "string"
        },
        "optional": {
          "description": "Specify whether the Secret or its key must be defined\n+optional",
          "type": "boolean"
        }
      },
      "type": "object"
    },
    "v1.SecretReference": {
      "properties": {
        "name": {
          "description": "name is unique within a namespace to reference a secret resource.\n+optional",
          "type": "string"
        },
        "namespace": {
          "description": "namespace defines the space within which the secret name must be unique.\n+optional",
          "type": "string"
        }
      },
      "type": "object"
    },
    "v1.SecurityContext": {
      "properties": {
        "allowPrivilegeEscalation": {
          "description": "AllowPrivilegeEscalation controls whether a process can gain more\nprivileges than its parent process. This bool directly controls if\nthe no_new_privs flag will be set on the container process.\nAllowPrivilegeEscalation is true always when the container is:\n1) run as Privileged\n2) has CAP_SYS_ADMIN\nNote that this field cannot be set when spec.os.name is windows.\n+optional",
          "type": "boolean"
        },
        "capabilities": {
          "$ref": "#/definitions/v1.Capabilities",
          "description": "The capabilities to add/drop when running containers.\nDefaults to the default set of capabilities granted by the container runtime.\nNote that this field cannot be set when spec.os.name is windows.\n+optional"
        },
        "privileged": {
          "description": "Run container in privileged mode.\nProcesses in privileged containers are essentially equivalent to root on the host.\nDefaults to false.\nNote that this field cannot be set when spec.os.name is windows.\n+optional",
          "type": "boolean"
        },
        "procMount": {
          "description": "procMount denotes the type of proc mount to use for the containers.\nThe default is DefaultProcMount which uses the container runtime defaults for\nreadonly paths and masked paths.\nThis requires the ProcMountType feature flag to be enabled.\nNote that this field cannot be set when spec.os.name is windows.\n+optional",
          "type": "string"
        },
        "readOnlyRootFilesystem": {
          "description": "Whether this container has a read-only root filesystem.\nDefault is false.\nNote that this field cannot be set when spec.os.name is windows.\n+optional",
          "type": "boolean"
        },
        "runAsGroup": {
          "description": "The GID to run the entrypoint of the container process.\nUses runtime default if unset.\nMay also be set in PodSecurityContext.  If set in both SecurityContext and\nPodSecurityContext, the value specified in SecurityContext takes precedence.\nNote that this field cannot be set when spec.os.name is windows.\n+optional",
          "type": "integer"
        },
        "runAsNonRoot": {
          "description": "Indicates that the container must run as a non-root user.\nIf true, the Kubelet will validate the image at runtime to ensure that it\ndoes not run as UID 0 (root) and fail to start the container if it does.\nIf unset or false, no such validation will be performed.\nMay also be set in PodSecurityContext.  If set in both SecurityContext and\nPodSecurityContext, the value specified in SecurityContext takes precedence.\n+optional",
          "type": "boolean"
        },
        "runAsUser": {
          "description": "The UID to run the entrypoint of the container process.\nDefaults to user specified in image metadata if unspecified.\nMay also be set in PodSecurityContext.  If set in both SecurityContext and\nPodSecurityContext, the value specified in SecurityContext takes precedence.\nNote that this field cannot be set when spec.os.name is windows.\n+optional",
          "type": "integer"
        },
        "seLinuxOptions": {
          "$ref": "#/definitions/v1.SELinuxOptions",
          "description": "The SELinux context to be applied to the container.\nIf unspecified, the container runtime will allocate a random SELinux context for each\ncontainer.  May also be set in PodSecurityContext.  If set in both SecurityContext and\nPodSecurityContext, the value specified in SecurityContext takes precedence.\nNote that this field cannot be set when spec.os.name is windows.\n+optional"
        },
        "seccompProfile": {
          "$ref": "#/definitions/v1.SeccompProfile",
          "description": "The seccomp options to use by this container. If seccomp options are\nprovided at both the pod & container level, the container options\noverride the pod options.\nNote that this field cannot be set when spec.os.name is windows.\n+optional"
        },
        "windowsOptions": {
          "$ref": "#/definitions/v1.WindowsSecurityContextOptions",
          "description": "The Windows specific settings applied to all containers.\nIf unspecified, the options from the PodSecurityContext will be used.\nIf set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.\nNote that this field cannot be set when spec.os.name is linux.\n+optional"
        }
      },
      "type": "object"
    },
    "v1.Service": {
      "properties": {
        "annotations": {
          "additionalProperties": {
            "type": "string"
          },
          "description": "Annotations is an unstructured key value map stored with a resource that may be\nset by external tools to store and retrieve arbitrary metadata. They are not\nqueryable and should be preserved when modifying objects.\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/annotations\n+optional",
          "type": "object"
        },
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object.\nServers should convert recognized schemas to the latest internal value, and\nmay reject unrecognized values.\nMore info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources\n+optional",
          "type": "string"
        },
        "creationTimestamp": {
          "description": "CreationTimestamp is a timestamp representing the server time when this object was\ncreated. It is not guaranteed to be set in happens-before order across separate operations.\nClients may not set this value. It is represented in RFC3339 form and is in UTC.\n\nPopulated by the system.\nRead-only.\nNull for lists.\nMore info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata\n+optional",
          "type": "string"
        },
        "deletionGracePeriodSeconds": {
          "description": "Number of seconds allowed for this object to gracefully terminate before\nit will be removed from the system. Only set when deletionTimestamp is also set.\nMay only be shortened.\nRead-only.\n+optional",
          "type": "integer"
        },
        "deletionTimestamp": {
          "description": "DeletionTimestamp is RFC 3339 date and time at which this resource will be deleted. This\nfield is set by the server when a graceful deletion is requested by the user, and is not\ndirectly settable by a client. The resource is expected to be deleted (no longer visible\nfrom resource lists, and not reachable by name) after the time in this field, once the\nfinalizers list is empty. As long as the finalizers list contains items, deletion is blocked.\nOnce the deletionTimestamp is set, this value may not be unset or be set further into the\nfuture, although it may be shortened or the resource may be deleted prior to this time.\nFor example, a user may request that a pod is deleted in 30 seconds. The Kubelet will react\nby sending a graceful termination signal to the containers in the pod. After that 30 seconds,\nthe Kubelet will send a hard termination signal (SIGKILL) to the container and after cleanup,\nremove the pod from the API. In the presence of network partitions, this object may still\nexist after this timestamp, until an administrator or automated process can determine the\nresource is fully terminated.\nIf not set, graceful deletion of the object has not been requested.\n\nPopulated by the system when a graceful deletion is requested.\nRead-only.\nMore info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata\n+optional",
          "type": "string"
        },
        "finalizers": {
          "description": "Must be empty before the object is deleted from the registry. Each entry\nis an identifier for the responsible component that will remove the entry\nfrom the list. If the deletionTimestamp of the object is non-nil, entries\nin this list can only be removed.\nFinalizers may be processed and removed in any order.  Order is NOT enforced\nbecause it introduces significant risk of stuck finalizers.\nfinalizers is a shared field, any actor with permission can reorder it.\nIf the finalizer list is processed in order, then this can lead to a situation\nin which the component responsible for the first finalizer in the list is\nwaiting for a signal (field value, external system, or other) produced by a\ncomponent responsible for a finalizer later in the list, resulting in a deadlock.\nWithout enforced ordering finalizers are free to order amongst themselves and\nare not vulnerable to ordering changes in the list.\n+optional\n+patchStrategy=merge",
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "generateName": {
          "description": "GenerateName is an optional prefix, used by the server, to generate a unique\nname ONLY IF the Name field has not been provided.\nIf this field is used, the name returned to the client will be different\nthan the name passed. This value will also be combined with a unique suffix.\nThe provided value has the same validation rules as the Name field,\nand may be truncated by the length of the suffix required to make the value\nunique on the server.\n\nIf this field is specified and the generated name exists, the server will return a 409.\n\nApplied only if Name is not specified.\nMore info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#idempotency\n+optional",
          "type": "string"
        },
        "generation": {
          "description": "A sequence number representing a specific generation of the desired state.\nPopulated by the system. Read-only.\n+optional",
          "type": "integer"
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents.\nServers may infer this from the endpoint the client submits requests to.\nCannot be updated.\nIn CamelCase.\nMore info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds\n+optional",
          "type": "string"
        },
        "labels": {
          "additionalProperties": {
            "type": "string"
          },
          "description": "Map of string keys and values that can be used to organize and categorize\n(scope and select) objects. May match selectors of replication controllers\nand services.\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/labels\n+optional",
          "type": "object"
        },
        "managedFields": {
          "description": "ManagedFields maps workflow-id and version to the set of fields\nthat are managed by that workflow. This is mostly for internal\nhousekeeping, and users typically shouldn't need to set or\nunderstand this field. A workflow can be the user's name, a\ncontroller's name, or the name of a specific apply path like\n\"ci-cd\". The set of fields is always in the version that the\nworkflow used when modifying the object.\n\n+optional",
          "items": {
            "$ref": "#/definitions/v1.ManagedFieldsEntry"
          },
          "type": "array"
        },
        "name": {
          "description": "Name must be unique within a namespace. Is required when creating resources, although\nsome resources may allow a client to request the generation of an appropriate name\nautomatically. Name is primarily intended for creation idempotence and configuration\ndefinition.\nCannot be updated.\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names#names\n+optional",
          "type": "string"
        },
        "namespace": {
          "description": "Namespace defines the space within which each name must be unique. An empty namespace is\nequivalent to the \"default\" namespace, but \"default\" is the canonical representation.\nNot all objects are required to be scoped to a namespace - the value of this field for\nthose objects will be empty.\n\nMust be a DNS_LABEL.\nCannot be updated.\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces\n+optional",
          "type": "string"
        },
        "ownerReferences": {
          "description": "List of objects depended by this object. If ALL objects in the list have\nbeen deleted, this object will be garbage collected. If this object is managed by a controller,\nthen an entry in this list will point to this controller, with the controller field set to true.\nThere cannot be more than one managing controller.\n+optional\n+patchMergeKey=uid\n+patchStrategy=merge",
          "items": {
            "$ref": "#/definitions/v1.OwnerReference"
          },
          "type": "array"
        },
        "resourceVersion": {
          "description": "An opaque value that represents the internal version of this object that can\nbe used by clients to determine when objects have changed. May be used for optimistic\nconcurrency, change detection, and the watch operation on a resource or set of resources.\nClients must treat these values as opaque and passed unmodified back to the server.\nThey may only be valid for a particular resource or set of resources.\n\nPopulated by the system.\nRead-only.\nValue must be treated as opaque by clients and .\nMore info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency\n+optional",
          "type": "string"
        },
        "selfLink": {
          "description": "Deprecated: selfLink is a legacy read-only field that is no longer populated by the system.\n+optional",
          "type": "string"
        },
        "spec": {
          "$ref": "#/definitions/v1.ServiceSpec",
          "description": "Spec defines the behavior of a service.\nhttps://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status\n+optional"
        },
        "status": {
          "$ref": "#/definitions/v1.ServiceStatus",
          "description": "Most recently observed status of the service.\nPopulated by the system.\nRead-only.\nMore info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status\n+optional"
        },
        "uid": {
          "description": "UID is the unique in time and space value for this object. It is typically generated by\nthe server on successful creation of a resource and is not allowed to change on PUT\noperations.\n\nPopulated by the system.\nRead-only.\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names#uids\n+optional",
          "type": "string"
        }
      },
      "type": "object"
    },
    "v1.ServicePort": {
      "properties": {
        "appProtocol": {
          "description": "The application protocol for this port.\nThis is used as a hint for implementations to offer richer behavior for protocols that they understand.\nThis field follows standard Kubernetes label syntax.\nValid values are either:\n\n* Un-prefixed protocol names - reserved for IANA standard service names (as per\nRFC-6335 and https://www.iana.org/assignments/service-names).\n\n* Kubernetes-defined prefixed names:\n  * 'kubernetes.io/h2c' - HTTP/2 prior knowledge over cleartext as described in https://www.rfc-editor.org/rfc/rfc9113.html#name-starting-http-2-with-prior-\n  * 'kubernetes.io/ws'  - WebSocket over cleartext as described in https://www.rfc-editor.org/rfc/rfc6455\n  * 'kubernetes.io/wss' - WebSocket over TLS as described in https://www.rfc-editor.org/rfc/rfc6455\n\n* Other protocols should use implementation-defined prefixed names such as\nmycompany.com/my-custom-protocol.\n+optional",
          "type": "string"
        },
        "name": {
          "description": "The name of this port within the service. This must be a DNS_LABEL.\nAll ports within a ServiceSpec must have unique names. When considering\nthe endpoints for a Service, this must match the 'name' field in the\nEndpointPort.\nOptional if only one ServicePort is defined on this service.\n+optional",
          "type": "string"
        },
        "nodePort": {
          "description": "The port on each node on which this service is exposed when type is\nNodePort or LoadBalancer.  Usually assigned by the system. If a value is\nspecified, in-range, and not in use it will be used, otherwise the\noperation will fail.  If not specified, a port will be allocated if this\nService requires one.  If this field is specified when creating a\nService which does not need it, creation will fail. This field will be\nwiped when updating a Service to no longer need it (e.g. changing type\nfrom NodePort to ClusterIP).\nMore info: https://kubernetes.io/docs/concepts/services-networking/service/#type-nodeport\n+optional",
          "type": "integer"
        },
        "port": {
          "description": "The port that will be exposed by this service.",
          "type": "integer"
        },
        "protocol": {
          "description": "The IP protocol for this port. Supports \"TCP\", \"UDP\", and \"SCTP\".\nDefault is TCP.\n+default=\"TCP\"\n+optional",
          "type": "string"
        },
        "targetPort": {
          "$ref": "#/definitions/intstr.IntOrString",
          "description": "Number or name of the port to access on the pods targeted by the service.\nNumber must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.\nIf this is a string, it will be looked up as a named port in the\ntarget Pod's container ports. If this is not specified, the value\nof the 'port' field is used (an identity map).\nThis field is ignored for services with clusterIP=None, and should be\nomitted or set equal to the 'port' field.\nMore info: https://kubernetes.io/docs/concepts/services-networking/service/#defining-a-service\n+optional"
        }
      },
      "type": "object"
    },
    "v1.ServiceSpec": {
      "properties": {
        "allocateLoadBalancerNodePorts": {
          "description": "allocateLoadBalancerNodePorts defines if NodePorts will be automatically\nallocated for services with type LoadBalancer.  Default is \"true\". It\nmay be set to \"false\" if the cluster load-balancer does not rely on\nNodePorts.  If the caller requests specific NodePorts (by specifying a\nvalue), those requests will be respected, regardless of this field.\nThis field may only be set for services with type LoadBalancer and will\nbe cleared if the type is changed to any other type.\n+optional",
          "type": "boolean"
        },
        "clusterIP": {
          "description": "clusterIP is the IP address of the service and is usually assigned\nrandomly. If an address is specified manually, is in-range (as per\nsystem configuration), and is not in use, it will be allocated to the\nservice; otherwise creation of the service will fail. This field may not\nbe changed through updates unless the type field is also being changed\nto ExternalName (which requires this field to be blank) or the type\nfield is being changed from ExternalName (in which case this field may\noptionally be specified, as describe above).  Valid values are \"None\",\nempty string (\"\"), or a valid IP address. Setting this to \"None\" makes a\n\"headless service\" (no virtual IP), which is useful when direct endpoint\nconnections are preferred and proxying is not required.  Only applies to\ntypes ClusterIP, NodePort, and LoadBalancer. If this field is specified\nwhen creating a Service of type ExternalName, creation will fail. This\nfield will be wiped when updating a Service to type ExternalName.\nMore info: https://kubernetes.io/docs/concepts/services-networking/service/#virtual-ips-and-service-proxies\n+optional",
          "type": "string"
        },
        "clusterIPs": {
          "description": "ClusterIPs is a list of IP addresses assigned to this service, and are\nusually assigned randomly.  If an address is specified manually, is\nin-range (as per system configuration), and is not in use, it will be\nallocated to the service; otherwise creation of the service will fail.\nThis field may not be changed through updates unless the type field is\nalso being changed to ExternalName (which requires this field to be\nempty) or the type field is being changed from ExternalName (in which\ncase this field may optionally be specified, as describe above).  Valid\nvalues are \"None\", empty string (\"\"), or a valid IP address.  Setting\nthis to \"None\" makes a \"headless service\" (no virtual IP), which is\nuseful when direct endpoint connections are preferred and proxying is\nnot required.  Only applies to types ClusterIP, NodePort, and\nLoadBalancer. If this field is specified when creating a Service of type\nExternalName, creation will fail. This field will be wiped when updating\na Service to type ExternalName.  If this field is not specified, it will\nbe initialized from the clusterIP field.  If this field is specified,\nclients must ensure that clusterIPs[0] and clusterIP have the same\nvalue.\n\nThis field may hold a maximum of two entries (dual-stack IPs, in either order).\nThese IPs must correspond to the values of the ipFamilies field. Both\nclusterIPs and ipFamilies are governed by the ipFamilyPolicy field.\nMore info: https://kubernetes.io/docs/concepts/services-networking/service/#virtual-ips-and-service-proxies\n+listType=atomic\n+optional",
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "externalIPs": {
          "description": "externalIPs is a list of IP addresses for which nodes in the cluster\nwill also accept traffic for this service.  These IPs are not managed by\nKubernetes.  The user is responsible for ensuring that traffic arrives\nat a node with this IP.  A common example is external load-balancers\nthat are not part of the Kubernetes system.\n+optional",
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "externalName": {
          "description": "externalName is the external reference that discovery mechanisms will\nreturn as an alias for this service (e.g. a DNS CNAME record). No\nproxying will be involved.  Must be a lowercase RFC-1123 hostname\n(https://tools.ietf.org/html/rfc1123) and requires `type` to be \"ExternalName\".\n+optional",
          "type": "string"
        },
        "externalTrafficPolicy": {
          "description": "externalTrafficPolicy describes how nodes distribute service traffic they\nreceive on one of the Service's \"externally-facing\" addresses (NodePorts,\nExternalIPs, and LoadBalancer IPs). If set to \"Local\", the proxy will configure\nthe service in a way that assumes that external load balancers will take care\nof balancing the service traffic between nodes, and so each node will deliver\ntraffic only to the node-local endpoints of the service, without masquerading\nthe client source IP. (Traffic mistakenly sent to a node with no endpoints will\nbe dropped.) The default value, \"Cluster\", uses the standard behavior of\nrouting to all endpoints evenly (possibly modified by topology and other\nfeatures). Note that traffic sent to an External IP or LoadBalancer IP from\nwithin the cluster will always get \"Cluster\" semantics, but clients sending to\na NodePort from within the cluster may need to take traffic policy into account\nwhen picking a node.\n+optional",
          "type": "string"
        },
        "healthCheckNodePort": {
          "description": "healthCheckNodePort specifies the healthcheck nodePort for the service.\nThis only applies when type is set to LoadBalancer and\nexternalTrafficPolicy is set to Local. If a value is specified, is\nin-range, and is not in use, it will be used.  If not specified, a value\nwill be automatically allocated.  External systems (e.g. load-balancers)\ncan use this port to determine if a given node holds endpoints for this\nservice or not.  If this field is specified when creating a Service\nwhich does not need it, creation will fail. This field will be wiped\nwhen updating a Service to no longer need it (e.g. changing type).\nThis field cannot be updated once set.\n+optional",
          "type": "integer"
        },
        "internalTrafficPolicy": {
          "description": "InternalTrafficPolicy describes how nodes distribute service traffic they\nreceive on the ClusterIP. If set to \"Local\", the proxy will assume that pods\nonly want to talk to endpoints of the service on the same node as the pod,\ndropping the traffic if there are no local endpoints. The default value,\n\"Cluster\", uses the standard behavior of routing to all endpoints evenly\n(possibly modified by topology and other features).\n+optional",
          "type": "string"
        },
        "ipFamilies": {
          "description": "IPFamilies is a list of IP families (e.g. IPv4, IPv6) assigned to this\nservice. This field is usually assigned automatically based on cluster\nconfiguration and the ipFamilyPolicy field. If this field is specified\nmanually, the requested family is available in the cluster,\nand ipFamilyPolicy allows it, it will be used; otherwise creation of\nthe service will fail. This field is conditionally mutable: it allows\nfor adding or removing a secondary IP family, but it does not allow\nchanging the primary IP family of the Service. Valid values are \"IPv4\"\nand \"IPv6\".  This field only applies to Services of types ClusterIP,\nNodePort, and LoadBalancer, and does apply to \"headless\" services.\nThis field will be wiped when updating a Service to type ExternalName.\n\nThis field may hold a maximum of two entries (dual-stack families, in\neither order).  These families must correspond to the values of the\nclusterIPs field, if specified. Both clusterIPs and ipFamilies are\ngoverned by the ipFamilyPolicy field.\n+listType=atomic\n+optional",
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "ipFamilyPolicy": {
          "description": "IPFamilyPolicy represents the dual-stack-ness requested or required by\nthis Service. If there is no value provided, then this field will be set\nto SingleStack. Services can be \"SingleStack\" (a single IP family),\n\"PreferDualStack\" (two IP families on dual-stack configured clusters or\na single IP family on single-stack clusters), or \"RequireDualStack\"\n(two IP families on dual-stack configured clusters, otherwise fail). The\nipFamilies and clusterIPs fields depend on the value of this field. This\nfield will be wiped when updating a service to type ExternalName.\n+optional",
          "type": "string"
        },
        "loadBalancerClass": {
          "description": "loadBalancerClass is the class of the load balancer implementation this Service belongs to.\nIf specified, the value of this field must be a label-style identifier, with an optional prefix,\ne.g. \"internal-vip\" or \"example.com/internal-vip\". Unprefixed names are reserved for end-users.\nThis field can only be set when the Service type is 'LoadBalancer'. If not set, the default load\nbalancer implementation is used, today this is typically done through the cloud provider integration,\nbut should apply for any default implementation. If set, it is assumed that a load balancer\nimplementation is watching for Services with a matching class. Any default load balancer\nimplementation (e.g. cloud providers) should ignore Services that set this field.\nThis field can only be set when creating or updating a Service to type 'LoadBalancer'.\nOnce set, it can not be changed. This field will be wiped when a service is updated to a non 'LoadBalancer' type.\n+optional",
          "type": "string"
        },
        "loadBalancerIP": {
          "description": "Only applies to Service Type: LoadBalancer.\nThis feature depends on whether the underlying cloud-provider supports specifying\nthe loadBalancerIP when a load balancer is created.\nThis field will be ignored if the cloud-provider does not support the feature.\nDeprecated: This field was under-specified and its meaning varies across implementations.\nUsing it is non-portable and it may not support dual-stack.\nUsers are encouraged to use implementation-specific annotations when available.\n+optional",
          "type": "string"
        },
        "loadBalancerSourceRanges": {
          "description": "If specified and supported by the platform, this will restrict traffic through the cloud-provider\nload-balancer will be restricted to the specified client IPs. This field will be ignored if the\ncloud-provider does not support the feature.\"\nMore info: https://kubernetes.io/docs/tasks/access-application-cluster/create-external-load-balancer/\n+optional",
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "ports": {
          "description": "The list of ports that are exposed by this service.\nMore info: https://kubernetes.io/docs/concepts/services-networking/service/#virtual-ips-and-service-proxies\n+patchMergeKey=port\n+patchStrategy=merge\n+listType=map\n+listMapKey=port\n+listMapKey=protocol",
          "items": {
            "$ref": "#/definitions/v1.ServicePort"
          },
          "type": "array"
        },
        "publishNotReadyAddresses": {
          "description": "publishNotReadyAddresses indicates that any agent which deals with endpoints for this\nService should disregard any indications of ready/not-ready.\nThe primary use case for setting this field is for a StatefulSet's Headless Service to\npropagate SRV DNS records for its Pods for the purpose of peer discovery.\nThe Kubernetes controllers that generate Endpoints and EndpointSlice resources for\nServices interpret this to mean that all endpoints are considered \"ready\" even if the\nPods themselves are not. Agents which consume only Kubernetes generated endpoints\nthrough the Endpoints or EndpointSlice resources can safely assume this behavior.\n+optional",
          "type": "boolean"
        },
        "selector": {
          "additionalProperties": {
            "type": "string"
          },
          "description": "Route service traffic to pods with label keys and values matching this\nselector. If empty or not present, the service is assumed to have an\nexternal process managing its endpoints, which Kubernetes will not\nmodify. Only applies to types ClusterIP, NodePort, and LoadBalancer.\nIgnored if type is ExternalName.\nMore info: https://kubernetes.io/docs/concepts/services-networking/service/\n+optional\n+mapType=atomic",
          "type": "object"
        },
        "sessionAffinity": {
          "description": "Supports \"ClientIP\" and \"None\". Used to maintain session affinity.\nEnable client IP based session affinity.\nMust be ClientIP or None.\nDefaults to None.\nMore info: https://kubernetes.io/docs/concepts/services-networking/service/#virtual-ips-and-service-proxies\n+optional",
          "type": "string"
        },
        "sessionAffinityConfig": {
          "$ref": "#/definitions/v1.SessionAffinityConfig",
          "description": "sessionAffinityConfig contains the configurations of session affinity.\n+optional"
        },
        "type": {
          "description": "type determines how the Service is exposed. Defaults to ClusterIP. Valid\noptions are ExternalName, ClusterIP, NodePort, and LoadBalancer.\n\"ClusterIP\" allocates a cluster-internal IP address for load-balancing\nto endpoints. Endpoints are determined by the selector or if that is not\nspecified, by manual construction of an Endpoints object or\nEndpointSlice objects. If clusterIP is \"None\", no virtual IP is\nallocated and the endpoints are published as a set of endpoints rather\nthan a virtual IP.\n\"NodePort\" builds on ClusterIP and allocates a port on every node which\nroutes to the same endpoints as the clusterIP.\n\"LoadBalancer\" builds on NodePort and creates an external load-balancer\n(if supported in the current cloud) which routes to the same endpoints\nas the clusterIP.\n\"ExternalName\" aliases this service to the specified externalName.\nSeveral other fields do not apply to ExternalName services.\nMore info: https://kubernetes.io/docs/concepts/services-networking/service/#publishing-services-service-types\n+optional",
          "type": "string"
        }
      },
      "type": "object"
    },
    "v1.ServiceStatus": {
      "properties": {
        "conditions": {
          "description": "Current service state\n+optional\n+patchMergeKey=type\n+patchStrategy=merge\n+listType=map\n+listMapKey=type",
          "items": {
            "$ref": "#/definitions/v1.Condition"
          },
          "type": "array"
        },
        "loadBalancer": {
          "$ref": "#/definitions/v1.LoadBalancerStatus",
          "description": "LoadBalancer contains the current status of the load-balancer,\nif one is present.\n+optional"
        }
      },
      "type": "object"
    },
    "v1.SessionAffinityConfig": {
      "properties": {
        "clientIP": {
          "$ref": "#/definitions/v1.ClientIPConfig",
          "description": "clientIP contains the configurations of Client IP based session affinity.\n+optional"
        }
      },
      "type": "object"
    },
    "v1.SleepAction": {
      "properties": {
        "seconds": {
          "description": "Seconds is the number of seconds to sleep.",
          "type": "integer"
        }
      },
      "type": "object"
    },
    "v1.Subject": {
      "properties": {
        "apiGroup": {
          "description": "APIGroup holds the API group of the referenced subject.\nDefaults to \"\" for ServiceAccount subjects.\nDefaults to \"rbac.authorization.k8s.io\" for User and Group subjects.\n+optional",
          "type": "string"
        },
        "kind": {
          "description": "Kind of object being referenced. Values defined by this API group are \"User\", \"Group\", and \"ServiceAccount\".\nIf the Authorizer does not recognized the kind value, the Authorizer should report an error.",
          "type": "string"
        },
        "name": {
          "description": "Name of the object being referenced.",
          "type": "string"
        },
        "namespace": {
          "description": "Namespace of the referenced object.  If the object kind is non-namespace, such as \"User\" or \"Group\", and this value is not empty\nthe Authorizer should report an error.\n+optional",
          "type": "string"
        }
      },
      "type": "object"
    },
    "v1.TCPSocketAction": {
      "properties": {
        "host": {
          "description": "Optional: Host name to connect to, defaults to the pod IP.\n+optional",
          "type": "string"
        },
        "port": {
          "$ref": "#/definitions/intstr.IntOrString",
          "description": "Number or name of the port to access on the container.\nNumber must be in the range 1 to 65535.\nName must be an IANA_SVC_NAME."
        }
      },
      "type": "object"
    },
    "v1.VolumeDevice": {
      "properties": {
        "devicePath": {
          "description": "devicePath is the path inside of the container that the device will be mapped to.",
          "type": "string"
        },
        "name": {
          "description": "name must match the name of a persistentVolumeClaim in the pod",
          "type": "string"
        }
      },
      "type": "object"
    },
    "v1.VolumeMount": {
      "properties": {
        "mountPath": {
          "description": "Path within the container at which the volume should be mounted.  Must\nnot contain ':'.",
          "type": "string"
        },
        "mountPropagation": {
          "description": "mountPropagation determines how mounts are propagated from the host\nto container and the other way around.\nWhen not set, MountPropagationNone is used.\nThis field is beta in 1.10.\n+optional",
          "type": "string"
        },
        "name": {
          "description": "This must match the Name of a Volume.",
          "type": "string"
        },
        "readOnly": {
          "description": "Mounted read-only if true, read-write otherwise (false or unspecified).\nDefaults to false.\n+optional",
          "type": "boolean"
        },
        "subPath": {
          "description": "Path within the volume from which the container's volume should be mounted.\nDefaults to \"\" (volume's root).\n+optional",
          "type": "string"
        },
        "subPathExpr": {
          "description": "Expanded path within the volume from which the container's volume should be mounted.\nBehaves similarly to SubPath but environment variable references $(VAR_NAME) are expanded using the container's environment.\nDefaults to \"\" (volume's root).\nSubPathExpr and SubPath are mutually exclusive.\n+optional",
          "type": "string"
        }
      },
      "type": "object"
    },
    "v1.WindowsSecurityContextOptions": {
      "properties": {
        "gmsaCredentialSpec": {
          "description": "GMSACredentialSpec is where the GMSA admission webhook\n(https://github.com/kubernetes-sigs/windows-gmsa) inlines the contents of the\nGMSA credential spec named by the GMSACredentialSpecName field.\n+optional",
          "type": "string"
        },
        "gmsaCredentialSpecName": {
          "description": "GMSACredentialSpecName is the name of the GMSA credential spec to use.\n+optional",
          "type": "string"
        },
        "hostProcess": {
          "description": "HostProcess determines if a container should be run as a 'Host Process' container.\nAll of a Pod's containers must have the same effective HostProcess value\n(it is not allowed to have a mix of HostProcess containers and non-HostProcess containers).\nIn addition, if HostProcess is true then HostNetwork must also be set to true.\n+optional",
          "type": "boolean"
        },
        "runAsUserName": {
          "description": "The UserName in Windows to run the entrypoint of the container process.\nDefaults to the user specified in image metadata if unspecified.\nMay also be set in PodSecurityContext. If set in both SecurityContext and\nPodSecurityContext, the value specified in SecurityContext takes precedence.\n+optional",
          "type": "string"
        }
      },
      "type": "object"
    },
    "v1beta1.ContainerMetrics": {
      "properties": {
        "name": {
          "description": "Container name corresponding to the one from pod.spec.containers.",
          "type": "string"
        },
        "usage": {
          "$ref": "#/definitions/v1.ResourceList",
          "description": "The memory usage is the memory working set."
        }
      },
      "type": "object"
    },
    "v1beta1.NodeMetrics": {
      "properties": {
        "annotations": {
          "additionalProperties": {
            "type": "string"
          },
          "description": "Annotations is an unstructured key value map stored with a resource that may be\nset by external tools to store and retrieve arbitrary metadata. They are not\nqueryable and should be preserved when modifying objects.\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/annotations\n+optional",
          "type": "object"
        },
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object.\nServers should convert recognized schemas to the latest internal value, and\nmay reject unrecognized values.\nMore info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources\n+optional",
          "type": "string"
        },
        "creationTimestamp": {
          "description": "CreationTimestamp is a timestamp representing the server time when this object was\ncreated. It is not guaranteed to be set in happens-before order across separate operations.\nClients may not set this value. It is represented in RFC3339 form and is in UTC.\n\nPopulated by the system.\nRead-only.\nNull for lists.\nMore info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata\n+optional",
          "type": "string"
        },
        "deletionGracePeriodSeconds": {
          "description": "Number of seconds allowed for this object to gracefully terminate before\nit will be removed from the system. Only set when deletionTimestamp is also set.\nMay only be shortened.\nRead-only.\n+optional",
          "type": "integer"
        },
        "deletionTimestamp": {
          "description": "DeletionTimestamp is RFC 3339 date and time at which this resource will be deleted. This\nfield is set by the server when a graceful deletion is requested by the user, and is not\ndirectly settable by a client. The resource is expected to be deleted (no longer visible\nfrom resource lists, and not reachable by name) after the time in this field, once the\nfinalizers list is empty. As long as the finalizers list contains items, deletion is blocked.\nOnce the deletionTimestamp is set, this value may not be unset or be set further into the\nfuture, although it may be shortened or the resource may be deleted prior to this time.\nFor example, a user may request that a pod is deleted in 30 seconds. The Kubelet will react\nby sending a graceful termination signal to the containers in the pod. After that 30 seconds,\nthe Kubelet will send a hard termination signal (SIGKILL) to the container and after cleanup,\nremove the pod from the API. In the presence of network partitions, this object may still\nexist after this timestamp, until an administrator or automated process can determine the\nresource is fully terminated.\nIf not set, graceful deletion of the object has not been requested.\n\nPopulated by the system when a graceful deletion is requested.\nRead-only.\nMore info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata\n+optional",
          "type": "string"
        },
        "finalizers": {
          "description": "Must be empty before the object is deleted from the registry. Each entry\nis an identifier for the responsible component that will remove the entry\nfrom the list. If the deletionTimestamp of the object is non-nil, entries\nin this list can only be removed.\nFinalizers may be processed and removed in any order.  Order is NOT enforced\nbecause it introduces significant risk of stuck finalizers.\nfinalizers is a shared field, any actor with permission can reorder it.\nIf the finalizer list is processed in order, then this can lead to a situation\nin which the component responsible for the first finalizer in the list is\nwaiting for a signal (field value, external system, or other) produced by a\ncomponent responsible for a finalizer later in the list, resulting in a deadlock.\nWithout enforced ordering finalizers are free to order amongst themselves and\nare not vulnerable to ordering changes in the list.\n+optional\n+patchStrategy=merge",
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "generateName": {
          "description": "GenerateName is an optional prefix, used by the server, to generate a unique\nname ONLY IF the Name field has not been provided.\nIf this field is used, the name returned to the client will be different\nthan the name passed. This value will also be combined with a unique suffix.\nThe provided value has the same validation rules as the Name field,\nand may be truncated by the length of the suffix required to make the value\nunique on the server.\n\nIf this field is specified and the generated name exists, the server will return a 409.\n\nApplied only if Name is not specified.\nMore info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#idempotency\n+optional",
          "type": "string"
        },
        "generation": {
          "description": "A sequence number representing a specific generation of the desired state.\nPopulated by the system. Read-only.\n+optional",
          "type": "integer"
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents.\nServers may infer this from the endpoint the client submits requests to.\nCannot be updated.\nIn CamelCase.\nMore info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds\n+optional",
          "type": "string"
        },
        "labels": {
          "additionalProperties": {
            "type": "string"
          },
          "description": "Map of string keys and values that can be used to organize and categorize\n(scope and select) objects. May match selectors of replication controllers\nand services.\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/labels\n+optional",
          "type": "object"
        },
        "managedFields": {
          "description": "ManagedFields maps workflow-id and version to the set of fields\nthat are managed by that workflow. This is mostly for internal\nhousekeeping, and users typically shouldn't need to set or\nunderstand this field. A workflow can be the user's name, a\ncontroller's name, or the name of a specific apply path like\n\"ci-cd\". The set of fields is always in the version that the\nworkflow used when modifying the object.\n\n+optional",
          "items": {
            "$ref": "#/definitions/v1.ManagedFieldsEntry"
          },
          "type": "array"
        },
        "name": {
          "description": "Name must be unique within a namespace. Is required when creating resources, although\nsome resources may allow a client to request the generation of an appropriate name\nautomatically. Name is primarily intended for creation idempotence and configuration\ndefinition.\nCannot be updated.\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names#names\n+optional",
          "type": "string"
        },
        "namespace": {
          "description": "Namespace defines the space within which each name must be unique. An empty namespace is\nequivalent to the \"default\" namespace, but \"default\" is the canonical representation.\nNot all objects are required to be scoped to a namespace - the value of this field for\nthose objects will be empty.\n\nMust be a DNS_LABEL.\nCannot be updated.\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces\n+optional",
          "type": "string"
        },
        "ownerReferences": {
          "description": "List of objects depended by this object. If ALL objects in the list have\nbeen deleted, this object will be garbage collected. If this object is managed by a controller,\nthen an entry in this list will point to this controller, with the controller field set to true.\nThere cannot be more than one managing controller.\n+optional\n+patchMergeKey=uid\n+patchStrategy=merge",
          "items": {
            "$ref": "#/definitions/v1.OwnerReference"
          },
          "type": "array"
        },
        "resourceVersion": {
          "description": "An opaque value that represents the internal version of this object that can\nbe used by clients to determine when objects have changed. May be used for optimistic\nconcurrency, change detection, and the watch operation on a resource or set of resources.\nClients must treat these values as opaque and passed unmodified back to the server.\nThey may only be valid for a particular resource or set of resources.\n\nPopulated by the system.\nRead-only.\nValue must be treated as opaque by clients and .\nMore info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency\n+optional",
          "type": "string"
        },
        "selfLink": {
          "description": "Deprecated: selfLink is a legacy read-only field that is no longer populated by the system.\n+optional",
          "type": "string"
        },
        "timestamp": {
          "description": "The following fields define time interval from which metrics were\ncollected from the interval [Timestamp-Window, Timestamp].",
          "type": "string"
        },
        "uid": {
          "description": "UID is the unique in time and space value for this object. It is typically generated by\nthe server on successful creation of a resource and is not allowed to change on PUT\noperations.\n\nPopulated by the system.\nRead-only.\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names#uids\n+optional",
          "type": "string"
        },
        "usage": {
          "$ref": "#/definitions/v1.ResourceList",
          "description": "The memory usage is the memory working set."
        },
        "window": {
          "$ref": "#/definitions/v1.Duration"
        }
      },
      "type": "object"
    },
    "v1beta1.NodeMetricsList": {
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object.\nServers should convert recognized schemas to the latest internal value, and\nmay reject unrecognized values.\nMore info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources\n+optional",
          "type": "string"
        },
        "continue": {
          "description": "continue may be set if the user set a limit on the number of items returned, and indicates that\nthe server has more data available. The value is opaque and may be used to issue another request\nto the endpoint that served this list to retrieve the next set of available objects. Continuing a\nconsistent list may not be possible if the server configuration has changed or more than a few\nminutes have passed. The resourceVersion field returned when using this continue value will be\nidentical to the value in the first response, unless you have received this token from an error\nmessage.",
          "type": "string"
        },
        "items": {
          "description": "List of node metrics.",
          "items": {
            "$ref": "#/definitions/v1beta1.NodeMetrics"
          },
          "type": "array"
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents.\nServers may infer this from the endpoint the client submits requests to.\nCannot be updated.\nIn CamelCase.\nMore info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds\n+optional",
          "type": "string"
        },
        "remainingItemCount": {
          "description": "remainingItemCount is the number of subsequent items in the list which are not included in this\nlist response. If the list request contained label or field selectors, then the number of\nremaining items is unknown and the field will be left unset and omitted during serialization.\nIf the list is complete (either because it is not chunking or because this is the last chunk),\nthen there are no more remaining items and this field will be left unset and omitted during\nserialization.\nServers older than v1.15 do not set this field.\nThe intended use of the remainingItemCount is *estimating* the size of a collection. Clients\nshould not rely on the remainingItemCount to be set or to be exact.\n+optional",
          "type": "integer"
        },
        "resourceVersion": {
          "description": "String that identifies the server's internal version of this object that\ncan be used by clients to determine when objects have changed.\nValue must be treated as opaque by clients and passed unmodified back to the server.\nPopulated by the system.\nRead-only.\nMore info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency\n+optional",
          "type": "string"
        },
        "selfLink": {
          "description": "Deprecated: selfLink is a legacy read-only field that is no longer populated by the system.\n+optional",
          "type": "string"
        }
      },
      "type": "object"
    },
    "v1beta1.PodMetrics": {
      "properties": {
        "annotations": {
          "additionalProperties": {
            "type": "string"
          },
          "description": "Annotations is an unstructured key value map stored with a resource that may be\nset by external tools to store and retrieve arbitrary metadata. They are not\nqueryable and should be preserved when modifying objects.\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/annotations\n+optional",
          "type": "object"
        },
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object.\nServers should convert recognized schemas to the latest internal value, and\nmay reject unrecognized values.\nMore info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources\n+optional",
          "type": "string"
        },
        "containers": {
          "description": "Metrics for all containers are collected within the same time window.",
          "items": {
            "$ref": "#/definitions/v1beta1.ContainerMetrics"
          },
          "type": "array"
        },
        "creationTimestamp": {
          "description": "CreationTimestamp is a timestamp representing the server time when this object was\ncreated. It is not guaranteed to be set in happens-before order across separate operations.\nClients may not set this value. It is represented in RFC3339 form and is in UTC.\n\nPopulated by the system.\nRead-only.\nNull for lists.\nMore info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata\n+optional",
          "type": "string"
        },
        "deletionGracePeriodSeconds": {
          "description": "Number of seconds allowed for this object to gracefully terminate before\nit will be removed from the system. Only set when deletionTimestamp is also set.\nMay only be shortened.\nRead-only.\n+optional",
          "type": "integer"
        },
        "deletionTimestamp": {
          "description": "DeletionTimestamp is RFC 3339 date and time at which this resource will be deleted. This\nfield is set by the server when a graceful deletion is requested by the user, and is not\ndirectly settable by a client. The resource is expected to be deleted (no longer visible\nfrom resource lists, and not reachable by name) after the time in this field, once the\nfinalizers list is empty. As long as the finalizers list contains items, deletion is blocked.\nOnce the deletionTimestamp is set, this value may not be unset or be set further into the\nfuture, although it may be shortened or the resource may be deleted prior to this time.\nFor example, a user may request that a pod is deleted in 30 seconds. The Kubelet will react\nby sending a graceful termination signal to the containers in the pod. After that 30 seconds,\nthe Kubelet will send a hard termination signal (SIGKILL) to the container and after cleanup,\nremove the pod from the API. In the presence of network partitions, this object may still\nexist after this timestamp, until an administrator or automated process can determine the\nresource is fully terminated.\nIf not set, graceful deletion of the object has not been requested.\n\nPopulated by the system when a graceful deletion is requested.\nRead-only.\nMore info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata\n+optional",
          "type": "string"
        },
        "finalizers": {
          "description": "Must be empty before the object is deleted from the registry. Each entry\nis an identifier for the responsible component that will remove the entry\nfrom the list. If the deletionTimestamp of the object is non-nil, entries\nin this list can only be removed.\nFinalizers may be processed and removed in any order.  Order is NOT enforced\nbecause it introduces significant risk of stuck finalizers.\nfinalizers is a shared field, any actor with permission can reorder it.\nIf the finalizer list is processed in order, then this can lead to a situation\nin which the component responsible for the first finalizer in the list is\nwaiting for a signal (field value, external system, or other) produced by a\ncomponent responsible for a finalizer later in the list, resulting in a deadlock.\nWithout enforced ordering finalizers are free to order amongst themselves and\nare not vulnerable to ordering changes in the list.\n+optional\n+patchStrategy=merge",
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "generateName": {
          "description": "GenerateName is an optional prefix, used by the server, to generate a unique\nname ONLY IF the Name field has not been provided.\nIf this field is used, the name returned to the client will be different\nthan the name passed. This value will also be combined with a unique suffix.\nThe provided value has the same validation rules as the Name field,\nand may be truncated by the length of the suffix required to make the value\nunique on the server.\n\nIf this field is specified and the generated name exists, the server will return a 409.\n\nApplied only if Name is not specified.\nMore info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#idempotency\n+optional",
          "type": "string"
        },
        "generation": {
          "description": "A sequence number representing a specific generation of the desired state.\nPopulated by the system. Read-only.\n+optional",
          "type": "integer"
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents.\nServers may infer this from the endpoint the client submits requests to.\nCannot be updated.\nIn CamelCase.\nMore info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds\n+optional",
          "type": "string"
        },
        "labels": {
          "additionalProperties": {
            "type": "string"
          },
          "description": "Map of string keys and values that can be used to organize and categorize\n(scope and select) objects. May match selectors of replication controllers\nand services.\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/labels\n+optional",
          "type": "object"
        },
        "managedFields": {
          "description": "ManagedFields maps workflow-id and version to the set of fields\nthat are managed by that workflow. This is mostly for internal\nhousekeeping, and users typically shouldn't need to set or\nunderstand this field. A workflow can be the user's name, a\ncontroller's name, or the name of a specific apply path like\n\"ci-cd\". The set of fields is always in the version that the\nworkflow used when modifying the object.\n\n+optional",
          "items": {
            "$ref": "#/definitions/v1.ManagedFieldsEntry"
          },
          "type": "array"
        },
        "name": {
          "description": "Name must be unique within a namespace. Is required when creating resources, although\nsome resources may allow a client to request the generation of an appropriate name\nautomatically. Name is primarily intended for creation idempotence and configuration\ndefinition.\nCannot be updated.\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names#names\n+optional",
          "type": "string"
        },
        "namespace": {
          "description": "Namespace defines the space within which each name must be unique. An empty namespace is\nequivalent to the \"default\" namespace, but \"default\" is the canonical representation.\nNot all objects are required to be scoped to a namespace - the value of this field for\nthose objects will be empty.\n\nMust be a DNS_LABEL.\nCannot be updated.\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces\n+optional",
          "type": "string"
        },
        "ownerReferences": {
          "description": "List of objects depended by this object. If ALL objects in the list have\nbeen deleted, this object will be garbage collected. If this object is managed by a controller,\nthen an entry in this list will point to this controller, with the controller field set to true.\nThere cannot be more than one managing controller.\n+optional\n+patchMergeKey=uid\n+patchStrategy=merge",
          "items": {
            "$ref": "#/definitions/v1.OwnerReference"
          },
          "type": "array"
        },
        "resourceVersion": {
          "description": "An opaque value that represents the internal version of this object that can\nbe used by clients to determine when objects have changed. May be used for optimistic\nconcurrency, change detection, and the watch operation on a resource or set of resources.\nClients must treat these values as opaque and passed unmodified back to the server.\nThey may only be valid for a particular resource or set of resources.\n\nPopulated by the system.\nRead-only.\nValue must be treated as opaque by clients and .\nMore info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency\n+optional",
          "type": "string"
        },
        "selfLink": {
          "description": "Deprecated: selfLink is a legacy read-only field that is no longer populated by the system.\n+optional",
          "type": "string"
        },
        "timestamp": {
          "description": "The following fields define time interval from which metrics were\ncollected from the interval [Timestamp-Window, Timestamp].",
          "type": "string"
        },
        "uid": {
          "description": "UID is the unique in time and space value for this object. It is typically generated by\nthe server on successful creation of a resource and is not allowed to change on PUT\noperations.\n\nPopulated by the system.\nRead-only.\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names#uids\n+optional",
          "type": "string"
        },
        "window": {
          "$ref": "#/definitions/v1.Duration"
        }
      },
      "type": "object"
    },
    "v1beta1.PodMetricsList": {
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object.\nServers should convert recognized schemas to the latest internal value, and\nmay reject unrecognized values.\nMore info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources\n+optional",
          "type": "string"
        },
        "continue": {
          "description": "continue may be set if the user set a limit on the number of items returned, and indicates that\nthe server has more data available. The value is opaque and may be used to issue another request\nto the endpoint that served this list to retrieve the next set of available objects. Continuing a\nconsistent list may not be possible if the server configuration has changed or more than a few\nminutes have passed. The resourceVersion field returned when using this continue value will be\nidentical to the value in the first response, unless you have received this token from an error\nmessage.",
          "type": "string"
        },
        "items": {
          "description": "List of pod metrics.",
          "items": {
            "$ref": "#/definitions/v1beta1.PodMetrics"
          },
          "type": "array"
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents.\nServers may infer this from the endpoint the client submits requests to.\nCannot be updated.\nIn CamelCase.\nMore info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds\n+optional",
          "type": "string"
        },
        "remainingItemCount": {
          "description": "remainingItemCount is the number of subsequent items in the list which are not included in this\nlist response. If the list request contained label or field selectors, then the number of\nremaining items is unknown and the field will be left unset and omitted during serialization.\nIf the list is complete (either because it is not chunking or because this is the last chunk),\nthen there are no more remaining items and this field will be left unset and omitted during\nserialization.\nServers older than v1.15 do not set this field.\nThe intended use of the remainingItemCount is *estimating* the size of a collection. Clients\nshould not rely on the remainingItemCount to be set or to be exact.\n+optional",
          "type": "integer"
        },
        "resourceVersion": {
          "description": "String that identifies the server's internal version of this object that\ncan be used by clients to determine when objects have changed.\nValue must be treated as opaque by clients and passed unmodified back to the server.\nPopulated by the system.\nRead-only.\nMore info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency\n+optional",
          "type": "string"
        },
        "selfLink": {
          "description": "Deprecated: selfLink is a legacy read-only field that is no longer populated by the system.\n+optional",
          "type": "string"
        }
      },
      "type": "object"
    },
    "v2.ContainerResourceMetricSource": {
      "properties": {
        "container": {
          "description": "container is the name of the container in the pods of the scaling target",
          "type": "string"
        },
        "name": {
          "description": "name is the name of the resource in question.",
          "type": "string"
        },
        "target": {
          "$ref": "#/definitions/v2.MetricTarget",
          "description": "target specifies the target value for the given metric"
        }
      },
      "type": "object"
    },
    "v2.ContainerResourceMetricStatus": {
      "properties": {
        "container": {
          "description": "container is the name of the container in the pods of the scaling target",
          "type": "string"
        },
        "current": {
          "$ref": "#/definitions/v2.MetricValueStatus",
          "description": "current contains the current value for the given metric"
        },
        "name": {
          "description": "name is the name of the resource in question.",
          "type": "string"
        }
      },
      "type": "object"
    },
    "v2.CrossVersionObjectReference": {
      "properties": {
        "apiVersion": {
          "description": "apiVersion is the API version of the referent\n+optional",
          "type": "string"
        },
        "kind": {
          "description": "kind is the kind of the referent; More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string"
        },
        "name": {
          "description": "name is the name of the referent; More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names",
          "type": "string"
        }
      },
      "type": "object"
    },
    "v2.ExternalMetricSource": {
      "properties": {
        "metric": {
          "$ref": "#/definitions/v2.MetricIdentifier",
          "description": "metric identifies the target metric by name and selector"
        },
        "target": {
          "$ref": "#/definitions/v2.MetricTarget",
          "description": "target specifies the target value for the given metric"
        }
      },
      "type": "object"
    },
    "v2.ExternalMetricStatus": {
      "properties": {
        "current": {
          "$ref": "#/definitions/v2.MetricValueStatus",
          "description": "current contains the current value for the given metric"
        },
        "metric": {
          "$ref": "#/definitions/v2.MetricIdentifier",
          "description": "metric identifies the target metric by name and selector"
        }
      },
      "type": "object"
    },
    "v2.HPAScalingPolicy": {
      "properties": {
        "periodSeconds": {
          "description": "periodSeconds specifies the window of time for which the policy should hold true.\nPeriodSeconds must be greater than zero and less than or equal to 1800 (30 min).",
          "type": "integer"
        },
        "type": {
          "description": "type is used to specify the scaling policy.",
          "type": "string"
        },
        "value": {
          "description": "value contains the amount of change which is permitted by the policy.\nIt must be greater than zero",
          "type": "integer"
        }
      },
      "type": "object"
    },
    "v2.HPAScalingRules": {
      "properties": {
        "policies": {
          "description": "policies is a list of potential scaling polices which can be used during scaling.\nAt least one policy must be specified, otherwise the HPAScalingRules will be discarded as invalid\n+listType=atomic\n+optional",
          "items": {
            "$ref": "#/definitions/v2.HPAScalingPolicy"
          },
          "type": "array"
        },
        "selectPolicy": {
          "description": "selectPolicy is used to specify which policy should be used.\nIf not set, the default value Max is used.\n+optional",
          "type": "string"
        },
        "stabilizationWindowSeconds": {
          "description": "stabilizationWindowSeconds is the number of seconds for which past recommendations should be\nconsidered while scaling up or scaling down.\nStabilizationWindowSeconds must be greater than or equal to zero and less than or equal to 3600 (one hour).\nIf not set, use the default values:\n- For scale up: 0 (i.e. no stabilization is done).\n- For scale down: 300 (i.e. the stabilization window is 300 seconds long).\n+optional",
          "type": "integer"
        }
      },
      "type": "object"
    },
    "v2.HorizontalPodAutoscaler": {
      "properties": {
        "annotations": {
          "additionalProperties": {
            "type": "string"
          },
          "description": "Annotations is an unstructured key value map stored with a resource that may be\nset by external tools to store and retrieve arbitrary metadata. They are not\nqueryable and should be preserved when modifying objects.\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/annotations\n+optional",
          "type": "object"
        },
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object.\nServers should convert recognized schemas to the latest internal value, and\nmay reject unrecognized values.\nMore info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources\n+optional",
          "type": "string"
        },
        "creationTimestamp": {
          "description": "CreationTimestamp is a timestamp representing the server time when this object was\ncreated. It is not guaranteed to be set in happens-before order across separate operations.\nClients may not set this value. It is represented in RFC3339 form and is in UTC.\n\nPopulated by the system.\nRead-only.\nNull for lists.\nMore info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata\n+optional",
          "type": "string"
        },
        "deletionGracePeriodSeconds": {
          "description": "Number of seconds allowed for this object to gracefully terminate before\nit will be removed from the system. Only set when deletionTimestamp is also set.\nMay only be shortened.\nRead-only.\n+optional",
          "type": "integer"
        },
        "deletionTimestamp": {
          "description": "DeletionTimestamp is RFC 3339 date and time at which this resource will be deleted. This\nfield is set by the server when a graceful deletion is requested by the user, and is not\ndirectly settable by a client. The resource is expected to be deleted (no longer visible\nfrom resource lists, and not reachable by name) after the time in this field, once the\nfinalizers list is empty. As long as the finalizers list contains items, deletion is blocked.\nOnce the deletionTimestamp is set, this value may not be unset or be set further into the\nfuture, although it may be shortened or the resource may be deleted prior to this time.\nFor example, a user may request that a pod is deleted in 30 seconds. The Kubelet will react\nby sending a graceful termination signal to the containers in the pod. After that 30 seconds,\nthe Kubelet will send a hard termination signal (SIGKILL) to the container and after cleanup,\nremove the pod from the API. In the presence of network partitions, this object may still\nexist after this timestamp, until an administrator or automated process can determine the\nresource is fully terminated.\nIf not set, graceful deletion of the object has not been requested.\n\nPopulated by the system when a graceful deletion is requested.\nRead-only.\nMore info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata\n+optional",
          "type": "string"
        },
        "finalizers": {
          "description": "Must be empty before the object is deleted from the registry. Each entry\nis an identifier for the responsible component that will remove the entry\nfrom the list. If the deletionTimestamp of the object is non-nil, entries\nin this list can only be removed.\nFinalizers may be processed and removed in any order.  Order is NOT enforced\nbecause it introduces significant risk of stuck finalizers.\nfinalizers is a shared field, any actor with permission can reorder it.\nIf the finalizer list is processed in order, then this can lead to a situation\nin which the component responsible for the first finalizer in the list is\nwaiting for a signal (field value, external system, or other) produced by a\ncomponent responsible for a finalizer later in the list, resulting in a deadlock.\nWithout enforced ordering finalizers are free to order amongst themselves and\nare not vulnerable to ordering changes in the list.\n+optional\n+patchStrategy=merge",
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "generateName": {
          "description": "GenerateName is an optional prefix, used by the server, to generate a unique\nname ONLY IF the Name field has not been provided.\nIf this field is used, the name returned to the client will be different\nthan the name passed. This value will also be combined with a unique suffix.\nThe provided value has the same validation rules as the Name field,\nand may be truncated by the length of the suffix required to make the value\nunique on the server.\n\nIf this field is specified and the generated name exists, the server will return a 409.\n\nApplied only if Name is not specified.\nMore info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#idempotency\n+optional",
          "type": "string"
        },
        "generation": {
          "description": "A sequence number representing a specific generation of the desired state.\nPopulated by the system. Read-only.\n+optional",
          "type": "integer"
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents.\nServers may infer this from the endpoint the client submits requests to.\nCannot be updated.\nIn CamelCase.\nMore info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds\n+optional",
          "type": "string"
        },
        "labels": {
          "additionalProperties": {
            "type": "string"
          },
          "description": "Map of string keys and values that can be used to organize and categorize\n(scope and select) objects. May match selectors of replication controllers\nand services.\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/labels\n+optional",
          "type": "object"
        },
        "managedFields": {
          "description": "ManagedFields maps workflow-id and version to the set of fields\nthat are managed by that workflow. This is mostly for internal\nhousekeeping, and users typically shouldn't need to set or\nunderstand this field. A workflow can be the user's name, a\ncontroller's name, or the name of a specific apply path like\n\"ci-cd\". The set of fields is always in the version that the\nworkflow used when modifying the object.\n\n+optional",
          "items": {
            "$ref": "#/definitions/v1.ManagedFieldsEntry"
          },
          "type": "array"
        },
        "name": {
          "description": "Name must be unique within a namespace. Is required when creating resources, although\nsome resources may allow a client to request the generation of an appropriate name\nautomatically. Name is primarily intended for creation idempotence and configuration\ndefinition.\nCannot be updated.\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names#names\n+optional",
          "type": "string"
        },
        "namespace": {
          "description": "Namespace defines the space within which each name must be unique. An empty namespace is\nequivalent to the \"default\" namespace, but \"default\" is the canonical representation.\nNot all objects are required to be scoped to a namespace - the value of this field for\nthose objects will be empty.\n\nMust be a DNS_LABEL.\nCannot be updated.\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces\n+optional",
          "type": "string"
        },
        "ownerReferences": {
          "description": "List of objects depended by this object. If ALL objects in the list have\nbeen deleted, this object will be garbage collected. If this object is managed by a controller,\nthen an entry in this list will point to this controller, with the controller field set to true.\nThere cannot be more than one managing controller.\n+optional\n+patchMergeKey=uid\n+patchStrategy=merge",
          "items": {
            "$ref": "#/definitions/v1.OwnerReference"
          },
          "type": "array"
        },
        "resourceVersion": {
          "description": "An opaque value that represents the internal version of this object that can\nbe used by clients to determine when objects have changed. May be used for optimistic\nconcurrency, change detection, and the watch operation on a resource or set of resources.\nClients must treat these values as opaque and passed unmodified back to the server.\nThey may only be valid for a particular resource or set of resources.\n\nPopulated by the system.\nRead-only.\nValue must be treated as opaque by clients and .\nMore info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency\n+optional",
          "type": "string"
        },
        "selfLink": {
          "description": "Deprecated: selfLink is a legacy read-only field that is no longer populated by the system.\n+optional",
          "type": "string"
        },
        "spec": {
          "$ref": "#/definitions/v2.HorizontalPodAutoscalerSpec",
          "description": "spec is the specification for the behaviour of the autoscaler.\nMore info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status.\n+optional"
        },
        "status": {
          "$ref": "#/definitions/v2.HorizontalPodAutoscalerStatus",
          "description": "status is the current information about the autoscaler.\n+optional"
        },
        "uid": {
          "description": "UID is the unique in time and space value for this object. It is typically generated by\nthe server on successful creation of a resource and is not allowed to change on PUT\noperations.\n\nPopulated by the system.\nRead-only.\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names#uids\n+optional",
          "type": "string"
        }
      },
      "type": "object"
    },
    "v2.HorizontalPodAutoscalerBehavior": {
      "properties": {
        "scaleDown": {
          "$ref": "#/definitions/v2.HPAScalingRules",
          "description": "scaleDown is scaling policy for scaling Down.\nIf not set, the default value is to allow to scale down to minReplicas pods, with a\n300 second stabilization window (i.e., the highest recommendation for\nthe last 300sec is used).\n+optional"
        },
        "scaleUp": {
          "$ref": "#/definitions/v2.HPAScalingRules",
          "description": "scaleUp is scaling policy for scaling Up.\nIf not set, the default value is the higher of:\n  * increase no more than 4 pods per 60 seconds\n  * double the number of pods per 60 seconds\nNo stabilization is used.\n+optional"
        }
      },
      "type": "object"
    },
    "v2.HorizontalPodAutoscalerCondition": {
      "properties": {
        "lastTransitionTime": {
          "description": "lastTransitionTime is the last time the condition transitioned from\none status to another\n+optional",
          "type": "string"
        },
        "message": {
          "description": "message is a human-readable explanation containing details about\nthe transition\n+optional",
          "type": "string"
        },
        "reason": {
          "description": "reason is the reason for the condition's last transition.\n+optional",
          "type": "string"
        },
        "status": {
          "description": "status is the status of the condition (True, False, Unknown)",
          "type": "string"
        },
        "type": {
          "description": "type describes the current condition",
          "type": "string"
        }
      },
      "type": "object"
    },
    "v2.HorizontalPodAutoscalerSpec": {
      "properties": {
        "behavior": {
          "$ref": "#/definitions/v2.HorizontalPodAutoscalerBehavior",
          "description": "behavior configures the scaling behavior of the target\nin both Up and Down directions (scaleUp and scaleDown fields respectively).\nIf not set, the default HPAScalingRules for scale up and scale down are used.\n+optional"
        },
        "maxReplicas": {
          "description": "maxReplicas is the upper limit for the number of replicas to which the autoscaler can scale up.\nIt cannot be less that minReplicas.",
          "type": "integer"
        },
        "metrics": {
          "description": "metrics contains the specifications for which to use to calculate the\ndesired replica count (the maximum replica count across all metrics will\nbe used).  The desired replica count is calculated multiplying the\nratio between the target value and the current value by the current\nnumber of pods.  Ergo, metrics used must decrease as the pod count is\nincreased, and vice-versa.  See the individual metric source types for\nmore information about how each type of metric must respond.\nIf not set, the default metric will be set to 80% average CPU utilization.\n+listType=atomic\n+optional",
          "items": {
            "$ref": "#/definitions/v2.MetricSpec"
          },
          "type": "array"
        },
        "minReplicas": {
          "description": "minReplicas is the lower limit for the number of replicas to which the autoscaler\ncan scale down.  It defaults to 1 pod.  minReplicas is allowed to be 0 if the\nalpha feature gate HPAScaleToZero is enabled and at least one Object or External\nmetric is configured.  Scaling is active as long as at least one metric value is\navailable.\n+optional",
          "type": "integer"
        },
        "scaleTargetRef": {
          "$ref": "#/definitions/v2.CrossVersionObjectReference",
          "description": "scaleTargetRef points to the target resource to scale, and is used to the pods for which metrics\nshould be collected, as well as to actually change the replica count."
        }
      },
      "type": "object"
    },
    "v2.HorizontalPodAutoscalerStatus": {
      "properties": {
        "conditions": {
          "description": "conditions is the set of conditions required for this autoscaler to scale its target,\nand indicates whether or not those conditions are met.\n+patchMergeKey=type\n+patchStrategy=merge\n+listType=map\n+listMapKey=type\n+optional",
          "items": {
            "$ref": "#/definitions/v2.HorizontalPodAutoscalerCondition"
          },
          "type": "array"
        },
        "currentMetrics": {
          "description": "currentMetrics is the last read state of the metrics used by this autoscaler.\n+listType=atomic\n+optional",
          "items": {
            "$ref": "#/definitions/v2.MetricStatus"
          },
          "type": "array"
        },
        "currentReplicas": {
          "description": "currentReplicas is current number of replicas of pods managed by this autoscaler,\nas last seen by the autoscaler.\n+optional",
          "type": "integer"
        },
        "desiredReplicas": {
          "description": "desiredReplicas is the desired number of replicas of pods managed by this autoscaler,\nas last calculated by the autoscaler.",
          "type": "integer"
        },
        "lastScaleTime": {
          "description": "lastScaleTime is the last time the HorizontalPodAutoscaler scaled the number of pods,\nused by the autoscaler to control how often the number of pods is changed.\n+optional",
          "type": "string"
        },
        "observedGeneration": {
          "description": "observedGeneration is the most recent generation observed by this autoscaler.\n+optional",
          "type": "integer"
        }
      },
      "type": "object"
    },
    "v2.MetricIdentifier": {
      "properties": {
        "name": {
          "description": "name is the name of the given metric",
          "type": "string"
        },
        "selector": {
          "$ref": "#/definitions/v1.LabelSelector",
          "description": "selector is the string-encoded form of a standard kubernetes label selector for the given metric\nWhen set, it is passed as an additional parameter to the metrics server for more specific metrics scoping.\nWhen unset, just the metricName will be used to gather metrics.\n+optional"
        }
      },
      "type": "object"
    },
    "v2.MetricSpec": {
      "properties": {
        "containerResource": {
          "$ref": "#/definitions/v2.ContainerResourceMetricSource",
          "description": "containerResource refers to a resource metric (such as those specified in\nrequests and limits) known to Kubernetes describing a single container in\neach pod of the current scale target (e.g. CPU or memory). Such metrics are\nbuilt in to Kubernetes, and have special scaling options on top of those\navailable to normal per-pod metrics using the \"pods\" source.\nThis is an alpha feature and can be enabled by the HPAContainerMetrics feature flag.\n+optional"
        },
        "external": {
          "$ref": "#/definitions/v2.ExternalMetricSource",
          "description": "external refers to a global metric that is not associated\nwith any Kubernetes object. It allows autoscaling based on information\ncoming from components running outside of cluster\n(for example length of queue in cloud messaging service, or\nQPS from loadbalancer running outside of cluster).\n+optional"
        },
        "object": {
          "$ref": "#/definitions/v2.ObjectMetricSource",
          "description": "object refers to a metric describing a single kubernetes object\n(for example, hits-per-second on an Ingress object).\n+optional"
        },
        "pods": {
          "$ref": "#/definitions/v2.PodsMetricSource",
          "description": "pods refers to a metric describing each pod in the current scale target\n(for example, transactions-processed-per-second).  The values will be\naveraged together before being compared to the target value.\n+optional"
        },
        "resource": {
          "$ref": "#/definitions/v2.ResourceMetricSource",
          "description": "resource refers to a resource metric (such as those specified in\nrequests and limits) known to Kubernetes describing each pod in the\ncurrent scale target (e.g. CPU or memory). Such metrics are built in to\nKubernetes, and have special scaling options on top of those available\nto normal per-pod metrics using the \"pods\" source.\n+optional"
        },
        "type": {
          "description": "type is the type of metric source.  It should be one of \"ContainerResource\", \"External\",\n\"Object\", \"Pods\" or \"Resource\", each mapping to a matching field in the object.\nNote: \"ContainerResource\" type is available on when the feature-gate\nHPAContainerMetrics is enabled",
          "type": "string"
        }
      },
      "type": "object"
    },
    "v2.MetricStatus": {
      "properties": {
        "containerResource": {
          "$ref": "#/definitions/v2.ContainerResourceMetricStatus",
          "description": "container resource refers to a resource metric (such as those specified in\nrequests and limits) known to Kubernetes describing a single container in each pod in the\ncurrent scale target (e.g. CPU or memory). Such metrics are built in to\nKubernetes, and have special scaling options on top of those available\nto normal per-pod metrics using the \"pods\" source.\n+optional"
        },
        "external": {
          "$ref": "#/definitions/v2.ExternalMetricStatus",
          "description": "external refers to a global metric that is not associated\nwith any Kubernetes object. It allows autoscaling based on information\ncoming from components running outside of cluster\n(for example length of queue in cloud messaging service, or\nQPS from loadbalancer running outside of cluster).\n+optional"
        },
        "object": {
          "$ref": "#/definitions/v2.ObjectMetricStatus",
          "description": "object refers to a metric describing a single kubernetes object\n(for example, hits-per-second on an Ingress object).\n+optional"
        },
        "pods": {
          "$ref": "#/definitions/v2.PodsMetricStatus",
          "description": "pods refers to a metric describing each pod in the current scale target\n(for example, transactions-processed-per-second).  The values will be\naveraged together before being compared to the target value.\n+optional"
        },
        "resource": {
          "$ref": "#/definitions/v2.ResourceMetricStatus",
          "description": "resource refers to a resource metric (such as those specified in\nrequests and limits) known to Kubernetes describing each pod in the\ncurrent scale target (e.g. CPU or memory). Such metrics are built in to\nKubernetes, and have special scaling options on top of those available\nto normal per-pod metrics using the \"pods\" source.\n+optional"
        },
        "type": {
          "description": "type is the type of metric source.  It will be one of \"ContainerResource\", \"External\",\n\"Object\", \"Pods\" or \"Resource\", each corresponds to a matching field in the object.\nNote: \"ContainerResource\" type is available on when the feature-gate\nHPAContainerMetrics is enabled",
          "type": "string"
        }
      },
      "type": "object"
    },
    "v2.MetricTarget": {
      "properties": {
        "averageUtilization": {
          "description": "averageUtilization is the target value of the average of the\nresource metric across all relevant pods, represented as a percentage of\nthe requested value of the resource for the pods.\nCurrently only valid for Resource metric source type\n+optional",
          "type": "integer"
        },
        "averageValue": {
          "$ref": "#/definitions/resource.Quantity",
          "description": "averageValue is the target value of the average of the\nmetric across all relevant pods (as a quantity)\n+optional"
        },
        "type": {
          "description": "type represents whether the metric type is Utilization, Value, or AverageValue",
          "type": "string"
        },
        "value": {
          "$ref": "#/definitions/resource.Quantity",
          "description": "value is the target value of the metric (as a quantity).\n+optional"
        }
      },
      "type": "object"
    },
    "v2.MetricValueStatus": {
      "properties": {
        "averageUtilization": {
          "description": "currentAverageUtilization is the current value of the average of the\nresource metric across all relevant pods, represented as a percentage of\nthe requested value of the resource for the pods.\n+optional",
          "type": "integer"
        },
        "averageValue": {
          "$ref": "#/definitions/resource.Quantity",
          "description": "averageValue is the current value of the average of the\nmetric across all relevant pods (as a quantity)\n+optional"
        },
        "value": {
          "$ref": "#/definitions/resource.Quantity",
          "description": "value is the current value of the metric (as a quantity).\n+optional"
        }
      },
      "type": "object"
    },
    "v2.ObjectMetricSource": {
      "properties": {
        "describedObject": {
          "$ref": "#/definitions/v2.CrossVersionObjectReference",
          "description": "describedObject specifies the descriptions of a object,such as kind,name apiVersion"
        },
        "metric": {
          "$ref": "#/definitions/v2.MetricIdentifier",
          "description": "metric identifies the target metric by name and selector"
        },
        "target": {
          "$ref": "#/definitions/v2.MetricTarget",
          "description": "target specifies the target value for the given metric"
        }
      },
      "type": "object"
    },
    "v2.ObjectMetricStatus": {
      "properties": {
        "current": {
          "$ref": "#/definitions/v2.MetricValueStatus",
          "description": "current contains the current value for the given metric"
        },
        "describedObject": {
          "$ref": "#/definitions/v2.CrossVersionObjectReference",
          "description": "DescribedObject specifies the descriptions of a object,such as kind,name apiVersion"
        },
        "metric": {
          "$ref": "#/definitions/v2.MetricIdentifier",
          "description": "metric identifies the target metric by name and selector"
        }
      },
      "type": "object"
    },
    "v2.PodsMetricSource": {
      "properties": {
        "metric": {
          "$ref": "#/definitions/v2.MetricIdentifier",
          "description": "metric identifies the target metric by name and selector"
        },
        "target": {
          "$ref": "#/definitions/v2.MetricTarget",
          "description": "target specifies the target value for the given metric"
        }
      },
      "type": "object"
    },
    "v2.PodsMetricStatus": {
      "properties": {
        "current": {
          "$ref": "#/definitions/v2.MetricValueStatus",
          "description": "current contains the current value for the given metric"
        },
        "metric": {
          "$ref": "#/definitions/v2.MetricIdentifier",
          "description": "metric identifies the target metric by name and selector"
        }
      },
      "type": "object"
    },
    "v2.ResourceMetricSource": {
      "properties": {
        "name": {
          "description": "name is the name of the resource in question.",
          "type": "string"
        },
        "target": {
          "$ref": "#/definitions/v2.MetricTarget",
          "description": "target specifies the target value for the given metric"
        }
      },
      "type": "object"
    },
    "v2.ResourceMetricStatus": {
      "properties": {
        "current": {
          "$ref": "#/definitions/v2.MetricValueStatus",
          "description": "current contains the current value for the given metric"
        },
        "name": {
          "description": "name is the name of the resource in question.",
          "type": "string"
        }
      },
      "type": "object"
    },
    "webhooks.webhookCreatePayload": {
      "properties": {
        "endpointID": {
          "description": "Environment(Endpoint) identifier. Reference the environment(endpoint) that will be used for deployment",
          "example": 1,
          "type": "integer"
        },
        "registryID": {
          "description": "Registry Identifier",
          "example": 1,
          "type": "integer"
        },
        "resourceID": {
          "type": "string"
        },
        "webhookType": {
          "description": "Type of webhook (1 - service)",
          "type": "integer"
        }
      },
      "type": "object"
    },
    "webhooks.webhookUpdatePayload": {
      "properties": {
        "registryID": {
          "description": "Registry Identifier",
          "type": "integer"
        }
      },
      "type": "object"
    }
  },
  "info": {
    "contact": {
      "email": "info@portainer.io"
    },
    "description": "Portainer API is an HTTP API served by Portainer. It is used by the Portainer UI and everything you can do with the UI can be done using the HTTP API.\nExamples are available at https://documentation.portainer.io/api/api-examples/\nYou can find out more about Portainer at [http://portainer.io](http://portainer.io) and get some support on [Slack](http://portainer.io/slack/).\n\n# Authentication\n\nMost of the API environments(endpoints) require to be authenticated as well as some level of authorization to be used.\nPortainer API uses JSON Web Token to manage authentication and thus requires you to provide a token in the **Authorization** header of each request\nwith the **Bearer** authentication mechanism.\n\nExample:\n\n```\nBearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6MSwidXNlcm5hbWUiOiJhZG1pbiIsInJvbGUiOjEsImV4cCI6MTQ5OTM3NjE1NH0.NJ6vE8FY1WG6jsRQzfMqeatJ4vh2TWAeeYfDhP71YEE\n```\n\n# Security\n\nEach API environment(endpoint) has an associated access policy, it is documented in the description of each environment(endpoint).\n\nDifferent access policies are available:\n\n- Public access\n- Authenticated access\n- Restricted access\n- Administrator access\n\n### Public access\n\nNo authentication is required to access the environments(endpoints) with this access policy.\n\n### Authenticated access\n\nAuthentication is required to access the environments(endpoints) with this access policy.\n\n### Restricted access\n\nAuthentication is required to access the environments(endpoints) with this access policy.\nExtra-checks might be added to ensure access to the resource is granted. Returned data might also be filtered.\n\n### Administrator access\n\nAuthentication as well as an administrator role are required to access the environments(endpoints) with this access policy.\n\n# Execute Docker requests\n\nPortainer **DO NOT** expose specific environments(endpoints) to manage your Docker resources (create a container, remove a volume, etc...).\n\nInstead, it acts as a reverse-proxy to the Docker HTTP API. This means that you can execute Docker requests **via** the Portainer HTTP API.\n\nTo do so, you can use the `/endpoints/{id}/docker` Portainer API environment(endpoint) (which is not documented below due to Swagger limitations). This environment(endpoint) has a restricted access policy so you still need to be authenticated to be able to query this environment(endpoint). Any query on this environment(endpoint) will be proxied to the Docker API of the associated environment(endpoint) (requests and responses objects are the same as documented in the Docker API).\n\n# Private Registry\n\nUsing private registry, you will need to pass a based64 encoded JSON string ‘{\"registryId\":\\<registryID value\\>}’ inside the Request Header. The parameter name is \"X-Registry-Auth\".\n\\<registryID value\\> - The registry ID where the repository was created.\n\nExample:\n\n```\neyJyZWdpc3RyeUlkIjoxfQ==\n```\n\n**NOTE**: You can find more information on how to query the Docker API in the [Docker official documentation](https://docs.docker.com/engine/api/v1.30/) as well as in [this Portainer example](https://documentation.portainer.io/api/api-examples/).\n",
    "license": {
      "name": "zlib",
      "url": "https://github.com/portainer/portainer/blob/develop/LICENSE"
    },
    "title": "PortainerCE API",
    "version": "2.26.1"
  },
  "paths": {
    "/auth": {
      "post": {
        "consumes": [
          "application/json"
        ],
        "description": "**Access policy**: public\nUse this environment(endpoint) to authenticate against Portainer using a username and password.",
        "operationId": "AuthenticateUser",
        "parameters": [
          {
            "description": "Credentials used for authentication",
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/auth.authenticatePayload"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/auth.authenticateResponse"
            }
          },
          "400": {
            "description": "Invalid request"
          },
          "422": {
            "description": "Invalid Credentials"
          },
          "500": {
            "description": "Server error"
          }
        },
        "summary": "Authenticate",
        "tags": [
          "auth"
        ]
      }
    },
    "/auth/logout": {
      "post": {
        "description": "**Access policy**: public",
        "operationId": "Logout",
        "responses": {
          "204": {
            "description": "Success"
          },
          "500": {
            "description": "Server error"
          }
        },
        "security": [
          {
            "ApiKeyAuth": []
          },
          {
            "jwt": []
          }
        ],
        "summary": "Logout",
        "tags": [
          "auth"
        ]
      }
    },
    "/auth/oauth/validate": {
      "post": {
        "consumes": [
          "application/json"
        ],
        "description": "**Access policy**: public",
        "operationId": "ValidateOAuth",
        "parameters": [
          {
            "description": "OAuth Credentials used for authentication",
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/auth.oauthPayload"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/auth.authenticateResponse"
            }
          },
          "400": {
            "description": "Invalid request"
          },
          "422": {
            "description": "Invalid Credentials"
          },
          "500": {
            "description": "Server error"
          }
        },
        "summary": "Authenticate with OAuth",
        "tags": [
          "auth"
        ]
      }
    },
    "/backup": {
      "post": {
        "consumes": [
          "application/json"
        ],
        "description": "Creates an archive with a system data snapshot that could be used to restore the system.\n**Access policy**: admin",
        "operationId": "Backup",
        "parameters": [
          {
            "description": "An object contains the password to encrypt the backup with",
            "in": "body",
            "name": "body",
            "schema": {
              "$ref": "#/definitions/backup.backupPayload"
            }
          }
        ],
        "produces": [
          "application/octet-stream"
        ],
        "responses": {
          "200": {
            "description": "Success"
          },
          "400": {
            "description": "Invalid request"
          },
          "500": {
            "description": "Server error"
          }
        },
        "security": [
          {
            "ApiKeyAuth": []
          },
          {
            "jwt": []
          }
        ],
        "summary": "Creates an archive with a system data snapshot that could be used to restore the system.",
        "tags": [
          "backup"
        ]
      }
    },
    "/custom_templates": {
      "get": {
        "description": "List available custom templates.\n**Access policy**: authenticated",
        "operationId": "CustomTemplateList",
        "parameters": [
          {
            "description": "Template types",
            "in": "query",
            "items": {
              "enum": [
                1,
                2,
                3
              ],
              "type": "integer"
            },
            "name": "type",
            "required": true,
            "type": "array"
          },
          {
            "description": "Filter by edge templates",
            "in": "query",
            "name": "edge",
            "type": "boolean"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "items": {
                "$ref": "#/definitions/portainer.CustomTemplate"
              },
              "type": "array"
            }
          },
          "500": {
            "description": "Server error"
          }
        },
        "security": [
          {
            "ApiKeyAuth": []
          },
          {
            "jwt": []
          }
        ],
        "summary": "List available custom templates",
        "tags": [
          "custom_templates"
        ]
      },
      "post": {
        "consumes": [
          "application/json",
          "multipart/form-data"
        ],
        "deprecated": true,
        "description": "Create a custom template.\n**Access policy**: authenticated",
        "operationId": "CustomTemplateCreate",
        "parameters": [
          {
            "description": "method for creating template",
            "enum": [
              "string",
              "file",
              "repository"
            ],
            "in": "query",
            "name": "method",
            "required": true,
            "type": "string"
          },
          {
            "description": "for body documentation see the relevant /custom_templates/{method} endpoint",
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "type": "object"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/portainer.CustomTemplate"
            }
          },
          "400": {
            "description": "Invalid request"
          },
          "500": {
            "description": "Server error"
          }
        },
        "security": [
          {
            "ApiKeyAuth": []
          },
          {
            "jwt": []
          }
        ],
        "summary": "Create a custom template",
        "tags": [
          "custom_templates"
        ]
      }
    },
    "/custom_templates/{id}": {
      "delete": {
        "description": "Remove a template.\n**Access policy**: authenticated",
        "operationId": "CustomTemplateDelete",
        "parameters": [
          {
            "description": "Template identifier",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "integer"
          }
        ],
        "responses": {
          "204": {
            "description": "Success"
          },
          "400": {
            "description": "Invalid request"
          },
          "403": {
            "description": "Access denied to resource"
          },
          "404": {
            "description": "Template not found"
          },
          "500": {
            "description": "Server error"
          }
        },
        "security": [
          {
            "ApiKeyAuth": []
          },
          {
            "jwt": []
          }
        ],
        "summary": "Remove a template",
        "tags": [
          "custom_templates"
        ]
      },
      "get": {
        "description": "Retrieve details about a template.\n**Access policy**: authenticated",
        "operationId": "CustomTemplateInspect",
        "parameters": [
          {
            "description": "Template identifier",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "integer"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/portainer.CustomTemplate"
            }
          },
          "400": {
            "description": "Invalid request"
          },
          "404": {
            "description": "Template not found"
          },
          "500": {
            "description": "Server error"
          }
        },
        "security": [
          {
            "ApiKeyAuth": []
          },
          {
            "jwt": []
          }
        ],
        "summary": "Inspect a custom template",
        "tags": [
          "custom_templates"
        ]
      },
      "put": {
        "consumes": [
          "application/json"
        ],
        "description": "Update a template.\n**Access policy**: authenticated",
        "operationId": "CustomTemplateUpdate",
        "parameters": [
          {
            "description": "Template identifier",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "integer"
          },
          {
            "description": "Template details",
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/customtemplates.customTemplateUpdatePayload"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/portainer.CustomTemplate"
            }
          },
          "400": {
            "description": "Invalid request"
          },
          "403": {
            "description": "Permission denied to access template"
          },
          "404": {
            "description": "Template not found"
          },
          "500": {
            "description": "Server error"
          }
        },
        "security": [
          {
            "ApiKeyAuth": []
          },
          {
            "jwt": []
          }
        ],
        "summary": "Update a template",
        "tags": [
          "custom_templates"
        ]
      }
    },
    "/custom_templates/{id}/file": {
      "get": {
        "description": "Retrieve the content of the Stack file for the specified custom template\n**Access policy**: authenticated",
        "operationId": "CustomTemplateFile",
        "parameters": [
          {
            "description": "Template identifier",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "integer"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/customtemplates.fileResponse"
            }
          },
          "400": {
            "description": "Invalid request"
          },
          "404": {
            "description": "Custom template not found"
          },
          "500": {
            "description": "Server error"
          }
        },
        "security": [
          {
            "ApiKeyAuth": []
          },
          {
            "jwt": []
          }
        ],
        "summary": "Get Template stack file content.",
        "tags": [
          "custom_templates"
        ]
      }
    },
    "/custom_templates/{id}/git_fetch": {
      "put": {
        "description": "Retrieve details about a template created from git repository method.\n**Access policy**: authenticated",
        "operationId": "CustomTemplateGitFetch",
        "parameters": [
          {
            "description": "Template identifier",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "integer"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/customtemplates.fileResponse"
            }
          },
          "400": {
            "description": "Invalid request"
          },
          "404": {
            "description": "Custom template not found"
          },
          "500": {
            "description": "Server error"
          }
        },
        "security": [
          {
            "ApiKeyAuth": []
          },
          {
            "jwt": []
          }
        ],
        "summary": "Fetch the latest config file content based on custom template's git repository configuration",
        "tags": [
          "custom_templates"
        ]
      }
    },
    "/custom_templates/create/file": {
      "post": {
        "consumes": [
          "multipart/form-data"
        ],
        "description": "Create a custom template.\n**Access policy**: authenticated",
        "operationId": "CustomTemplateCreateFile",
        "parameters": [
          {
            "description": "Title of the template",
            "in": "formData",
            "name": "Title",
            "required": true,
            "type": "string"
          },
          {
            "description": "Description of the template",
            "in": "formData",
            "name": "Description",
            "required": true,
            "type": "string"
          },
          {
            "description": "A note that will be displayed in the UI. Supports HTML content",
            "in": "formData",
            "name": "Note",
            "required": true,
            "type": "string"
          },
          {
            "description": "Platform associated to the template (1 - 'linux', 2 - 'windows')",
            "enum": [
              1,
              2
            ],
            "in": "formData",
            "name": "Platform",
            "required": true,
            "type": "integer"
          },
          {
            "description": "Type of created stack (1 - swarm, 2 - compose, 3 - kubernetes)",
            "enum": [
              1,
              2,
              3
            ],
            "in": "formData",
            "name": "Type",
            "required": true,
            "type": "integer"
          },
          {
            "description": "File",
            "in": "formData",
            "name": "File",
            "required": true,
            "type": "file"
          },
          {
            "description": "URL of the template's logo",
            "in": "formData",
            "name": "Logo",
            "type": "string"
          },
          {
            "description": "A json array of variables definitions",
            "in": "formData",
            "name": "Variables",
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/portainer.CustomTemplate"
            }
          },
          "400": {
            "description": "Invalid request"
          },
          "500": {
            "description": "Server error"
          }
        },
        "security": [
          {
            "ApiKeyAuth": []
          },
          {
            "jwt": []
          }
        ],
        "summary": "Create a custom template",
        "tags": [
          "custom_templates"
        ]
      }
    },
    "/custom_templates/create/repository": {
      "post": {
        "consumes": [
          "application/json"
        ],
        "description": "Create a custom template.\n**Access policy**: authenticated",
        "operationId": "CustomTemplateCreateRepository",
        "parameters": [
          {
            "description": "Required when using method=repository",
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/customtemplates.customTemplateFromGitRepositoryPayload"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/portainer.CustomTemplate"
            }
          },
          "400": {
            "description": "Invalid request"
          },
          "500": {
            "description": "Server error"
          }
        },
        "security": [
          {
            "ApiKeyAuth": []
          },
          {
            "jwt": []
          }
        ],
        "summary": "Create a custom template",
        "tags": [
          "custom_templates"
        ]
      }
    },
    "/custom_templates/create/string": {
      "post": {
        "consumes": [
          "application/json"
        ],
        "description": "Create a custom template.\n**Access policy**: authenticated",
        "operationId": "CustomTemplateCreateString",
        "parameters": [
          {
            "description": "body",
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/customtemplates.customTemplateFromFileContentPayload"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/portainer.CustomTemplate"
            }
          },
          "400": {
            "description": "Invalid request"
          },
          "500": {
            "description": "Server error"
          }
        },
        "security": [
          {
            "ApiKeyAuth": []
          },
          {
            "jwt": []
          }
        ],
        "summary": "Create a custom template",
        "tags": [
          "custom_templates"
        ]
      }
    },
    "/docker/{environmentId}/containers/{containerId}/gpus": {
      "get": {
        "consumes": [
          "application/json"
        ],
        "description": "**Access policy**:",
        "operationId": "dockerContainerGpusInspect",
        "parameters": [
          {
            "description": "Environment identifier",
            "in": "path",
            "name": "environmentId",
            "required": true,
            "type": "integer"
          },
          {
            "description": "Container identifier",
            "in": "path",
            "name": "containerId",
            "required": true,
            "type": "integer"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/containers.containerGpusResponse"
            }
          },
          "400": {
            "description": "Bad request"
          },
          "404": {
            "description": "Environment or container not found"
          },
          "500": {
            "description": "Internal server error"
          }
        },
        "security": [
          {
            "jwt": []
          }
        ],
        "summary": "Fetch container gpus data",
        "tags": [
          "docker"
        ]
      }
    },
    "/docker/{environmentId}/dashboard": {
      "post": {
        "consumes": [
          "application/json"
        ],
        "description": "**Access policy**: restricted",
        "operationId": "dockerDashboard",
        "parameters": [
          {
            "description": "Environment identifier",
            "in": "path",
            "name": "environmentId",
            "required": true,
            "type": "integer"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/docker.dashboardResponse"
            }
          },
          "400": {
            "description": "Bad request"
          },
          "500": {
            "description": "Internal server error"
          }
        },
        "security": [
          {
            "jwt": []
          }
        ],
        "summary": "Get counters for the dashboard",
        "tags": [
          "docker"
        ]
      }
    },
    "/docker/{environmentId}/images": {
      "get": {
        "description": "**Access policy**:",
        "operationId": "dockerImagesList",
        "parameters": [
          {
            "description": "Environment identifier",
            "in": "path",
            "name": "environmentId",
            "required": true,
            "type": "integer"
          },
          {
            "description": "Include image usage information",
            "in": "query",
            "name": "withUsage",
            "type": "boolean"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "items": {
                "$ref": "#/definitions/images.ImageResponse"
              },
              "type": "array"
            }
          },
          "400": {
            "description": "Bad request"
          },
          "500": {
            "description": "Internal server error"
          }
        },
        "security": [
          {
            "jwt": []
          }
        ],
        "summary": "Fetch images",
        "tags": [
          "docker"
        ]
      }
    },
    "/edge_groups": {
      "get": {
        "description": "**Access policy**: administrator",
        "operationId": "EdgeGroupList",
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "EdgeGroups",
            "schema": {
              "items": {
                "$ref": "#/definitions/edgegroups.decoratedEdgeGroup"
              },
              "type": "array"
            }
          },
          "500": {
            "description": "Internal Server Error"
          },
          "503": {
            "description": "Edge compute features are disabled"
          }
        },
        "security": [
          {
            "ApiKeyAuth": []
          },
          {
            "jwt": []
          }
        ],
        "summary": "list EdgeGroups",
        "tags": [
          "edge_groups"
        ]
      },
      "post": {
        "consumes": [
          "application/json"
        ],
        "description": "**Access policy**: administrator",
        "operationId": "EdgeGroupCreate",
        "parameters": [
          {
            "description": "EdgeGroup data",
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/edgegroups.edgeGroupCreatePayload"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/portainer.EdgeGroup"
            }
          },
          "500": {
            "description": "Internal Server Error"
          },
          "503": {
            "description": "Edge compute features are disabled"
          }
        },
        "security": [
          {
            "ApiKeyAuth": []
          },
          {
            "jwt": []
          }
        ],
        "summary": "Create an EdgeGroup",
        "tags": [
          "edge_groups"
        ]
      }
    },
    "/edge_groups/{id}": {
      "delete": {
        "description": "**Access policy**: administrator",
        "operationId": "EdgeGroupDelete",
        "parameters": [
          {
            "description": "EdgeGroup Id",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "integer"
          }
        ],
        "responses": {
          "204": {
            "description": "No Content"
          },
          "409": {
            "description": "Edge group is in use by an Edge stack or Edge job"
          },
          "500": {
            "description": "Server error"
          },
          "503": {
            "description": "Edge compute features are disabled"
          }
        },
        "security": [
          {
            "ApiKeyAuth": []
          },
          {
            "jwt": []
          }
        ],
        "summary": "Deletes an EdgeGroup",
        "tags": [
          "edge_groups"
        ]
      },
      "get": {
        "description": "**Access policy**: administrator",
        "operationId": "EdgeGroupInspect",
        "parameters": [
          {
            "description": "EdgeGroup Id",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "integer"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/portainer.EdgeGroup"
            }
          },
          "500": {
            "description": "Internal Server Error"
          },
          "503": {
            "description": "Edge compute features are disabled"
          }
        },
        "security": [
          {
            "ApiKeyAuth": []
          },
          {
            "jwt": []
          }
        ],
        "summary": "Inspects an EdgeGroup",
        "tags": [
          "edge_groups"
        ]
      },
      "put": {
        "consumes": [
          "application/json"
        ],
        "description": "**Access policy**: administrator",
        "operationId": "EgeGroupUpdate",
        "parameters": [
          {
            "description": "EdgeGroup Id",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "integer"
          },
          {
            "description": "EdgeGroup data",
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/edgegroups.edgeGroupUpdatePayload"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/portainer.EdgeGroup"
            }
          },
          "500": {
            "description": "Internal Server Error"
          },
          "503": {
            "description": "Edge compute features are disabled"
          }
        },
        "security": [
          {
            "ApiKeyAuth": []
          },
          {
            "jwt": []
          }
        ],
        "summary": "Updates an EdgeGroup",
        "tags": [
          "edge_groups"
        ]
      }
    },
    "/edge_jobs": {
      "get": {
        "description": "**Access policy**: administrator",
        "operationId": "EdgeJobList",
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "items": {
                "$ref": "#/definitions/portainer.EdgeJob"
              },
              "type": "array"
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "500": {
            "description": "Internal Server Error"
          },
          "503": {
            "description": "Edge compute features are disabled"
          }
        },
        "security": [
          {
            "ApiKeyAuth": []
          },
          {
            "jwt": []
          }
        ],
        "summary": "Fetch EdgeJobs list",
        "tags": [
          "edge_jobs"
        ]
      },
      "post": {
        "deprecated": true,
        "description": "**Access policy**: administrator",
        "operationId": "EdgeJobCreate",
        "parameters": [
          {
            "description": "Creation Method",
            "enum": [
              "file",
              "string"
            ],
            "in": "query",
            "name": "method",
            "required": true,
            "type": "string"
          },
          {
            "description": "for body documentation see the relevant /edge_jobs/create/{method} endpoint",
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "type": "object"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/portainer.EdgeGroup"
            }
          },
          "500": {
            "description": "Internal Server Error"
          },
          "503": {
            "description": "Edge compute features are disabled"
          }
        },
        "security": [
          {
            "ApiKeyAuth": []
          },
          {
            "jwt": []
          }
        ],
        "summary": "Create an EdgeJob",
        "tags": [
          "edge_jobs"
        ]
      }
    },
    "/edge_jobs/{id}": {
      "delete": {
        "description": "**Access policy**: administrator",
        "operationId": "EdgeJobDelete",
        "parameters": [
          {
            "description": "EdgeJob Id",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "integer"
          }
        ],
        "responses": {
          "204": {
            "description": "No Content"
          },
          "400": {
            "description": "Bad Request"
          },
          "500": {
            "description": "Internal Server Error"
          },
          "503": {
            "description": "Edge compute features are disabled"
          }
        },
        "security": [
          {
            "ApiKeyAuth": []
          },
          {
            "jwt": []
          }
        ],
        "summary": "Delete an EdgeJob",
        "tags": [
          "edge_jobs"
        ]
      },
      "get": {
        "description": "**Access policy**: administrator",
        "operationId": "EdgeJobInspect",
        "parameters": [
          {
            "description": "EdgeJob Id",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "integer"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/portainer.EdgeJob"
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "500": {
            "description": "Internal Server Error"
          },
          "503": {
            "description": "Edge compute features are disabled"
          }
        },
        "security": [
          {
            "ApiKeyAuth": []
          },
          {
            "jwt": []
          }
        ],
        "summary": "Inspect an EdgeJob",
        "tags": [
          "edge_jobs"
        ]
      },
      "put": {
        "consumes": [
          "application/json"
        ],
        "description": "**Access policy**: administrator",
        "operationId": "EdgeJobUpdate",
        "parameters": [
          {
            "description": "EdgeJob Id",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "integer"
          },
          {
            "description": "EdgeGroup data",
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/edgejobs.edgeJobUpdatePayload"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/portainer.EdgeJob"
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "500": {
            "description": "Internal Server Error"
          },
          "503": {
            "description": "Edge compute features are disabled"
          }
        },
        "security": [
          {
            "ApiKeyAuth": []
          },
          {
            "jwt": []
          }
        ],
        "summary": "Update an EdgeJob",
        "tags": [
          "edge_jobs"
        ]
      }
    },
    "/edge_jobs/{id}/file": {
      "get": {
        "description": "**Access policy**: administrator",
        "operationId": "EdgeJobFile",
        "parameters": [
          {
            "description": "EdgeJob Id",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "integer"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/edgejobs.edgeJobFileResponse"
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "500": {
            "description": "Internal Server Error"
          },
          "503": {
            "description": "Edge compute features are disabled"
          }
        },
        "security": [
          {
            "ApiKeyAuth": []
          },
          {
            "jwt": []
          }
        ],
        "summary": "Fetch a file of an EdgeJob",
        "tags": [
          "edge_jobs"
        ]
      }
    },
    "/edge_jobs/{id}/tasks": {
      "get": {
        "description": "**Access policy**: administrator",
        "operationId": "EdgeJobTasksList",
        "parameters": [
          {
            "description": "EdgeJob Id",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "integer"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "items": {
                "$ref": "#/definitions/edgejobs.taskContainer"
              },
              "type": "array"
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "500": {
            "description": "Internal Server Error"
          },
          "503": {
            "description": "Edge compute features are disabled"
          }
        },
        "security": [
          {
            "ApiKeyAuth": []
          },
          {
            "jwt": []
          }
        ],
        "summary": "Fetch the list of tasks on an EdgeJob",
        "tags": [
          "edge_jobs"
        ]
      }
    },
    "/edge_jobs/{id}/tasks/{taskID}/logs": {
      "delete": {
        "description": "**Access policy**: administrator",
        "operationId": "EdgeJobTasksClear",
        "parameters": [
          {
            "description": "EdgeJob Id",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "integer"
          },
          {
            "description": "Task Id",
            "in": "path",
            "name": "taskID",
            "required": true,
            "type": "integer"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "204": {
            "description": "No Content"
          },
          "400": {
            "description": "Bad Request"
          },
          "500": {
            "description": "Internal Server Error"
          },
          "503": {
            "description": "Edge compute features are disabled"
          }
        },
        "security": [
          {
            "ApiKeyAuth": []
          },
          {
            "jwt": []
          }
        ],
        "summary": "Clear the log for a specifc task on an EdgeJob",
        "tags": [
          "edge_jobs"
        ]
      },
      "get": {
        "description": "**Access policy**: administrator",
        "operationId": "EdgeJobTaskLogsInspect",
        "parameters": [
          {
            "description": "EdgeJob Id",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "integer"
          },
          {
            "description": "Task Id",
            "in": "path",
            "name": "taskID",
            "required": true,
            "type": "integer"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/edgejobs.fileResponse"
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "500": {
            "description": "Internal Server Error"
          },
          "503": {
            "description": "Edge compute features are disabled"
          }
        },
        "security": [
          {
            "ApiKeyAuth": []
          },
          {
            "jwt": []
          }
        ],
        "summary": "Fetch the log for a specifc task on an EdgeJob",
        "tags": [
          "edge_jobs"
        ]
      },
      "post": {
        "description": "**Access policy**: administrator",
        "operationId": "EdgeJobTasksCollect",
        "parameters": [
          {
            "description": "EdgeJob Id",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "integer"
          },
          {
            "description": "Task Id",
            "in": "path",
            "name": "taskID",
            "required": true,
            "type": "integer"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "204": {
            "description": "No Content"
          },
          "400": {
            "description": "Bad Request"
          },
          "500": {
            "description": "Internal Server Error"
          },
          "503": {
            "description": "Edge compute features are disabled"
          }
        },
        "security": [
          {
            "ApiKeyAuth": []
          },
          {
            "jwt": []
          }
        ],
        "summary": "Collect the log for a specifc task on an EdgeJob",
        "tags": [
          "edge_jobs"
        ]
      }
    },
    "/edge_jobs/create/file": {
      "post": {
        "consumes": [
          "multipart/form-data"
        ],
        "description": "**Access policy**: administrator",
        "operationId": "EdgeJobCreateFile",
        "parameters": [
          {
            "description": "Content of the Stack file",
            "in": "formData",
            "name": "file",
            "required": true,
            "type": "file"
          },
          {
            "description": "Name of the stack",
            "in": "formData",
            "name": "Name",
            "required": true,
            "type": "string"
          },
          {
            "description": "A cron expression to schedule this job",
            "in": "formData",
            "name": "CronExpression",
            "required": true,
            "type": "string"
          },
          {
            "description": "JSON stringified array of Edge Groups ids",
            "in": "formData",
            "name": "EdgeGroups",
            "required": true,
            "type": "string"
          },
          {
            "description": "JSON stringified array of Environment ids",
            "in": "formData",
            "name": "Endpoints",
            "required": true,
            "type": "string"
          },
          {
            "description": "If recurring",
            "in": "formData",
            "name": "Recurring",
            "type": "boolean"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/portainer.EdgeGroup"
            }
          },
          "500": {
            "description": "Internal Server Error"
          },
          "503": {
            "description": "Edge compute features are disabled"
          }
        },
        "security": [
          {
            "ApiKeyAuth": []
          },
          {
            "jwt": []
          }
        ],
        "summary": "Create an EdgeJob from a file",
        "tags": [
          "edge_jobs"
        ]
      }
    },
    "/edge_jobs/create/string": {
      "post": {
        "description": "**Access policy**: administrator",
        "operationId": "EdgeJobCreateString",
        "parameters": [
          {
            "description": "EdgeGroup data when method is string",
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/edgejobs.edgeJobCreateFromFileContentPayload"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/portainer.EdgeGroup"
            }
          },
          "500": {
            "description": "Internal Server Error"
          },
          "503": {
            "description": "Edge compute features are disabled"
          }
        },
        "security": [
          {
            "ApiKeyAuth": []
          },
          {
            "jwt": []
          }
        ],
        "summary": "Create an EdgeJob from a text",
        "tags": [
          "edge_jobs"
        ]
      }
    },
    "/edge_stacks": {
      "get": {
        "description": "**Access policy**: administrator",
        "operationId": "EdgeStackList",
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "items": {
                "$ref": "#/definitions/portainer.EdgeStack"
              },
              "type": "array"
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "500": {
            "description": "Internal Server Error"
          },
          "503": {
            "description": "Edge compute features are disabled"
          }
        },
        "security": [
          {
            "ApiKeyAuth": []
          },
          {
            "jwt": []
          }
        ],
        "summary": "Fetches the list of EdgeStacks",
        "tags": [
          "edge_stacks"
        ]
      },
      "post": {
        "deprecated": true,
        "description": "**Access policy**: administrator",
        "operationId": "EdgeStackCreate",
        "parameters": [
          {
            "description": "Creation Method",
            "enum": [
              "file",
              "string",
              "repository"
            ],
            "in": "query",
            "name": "method",
            "required": true,
            "type": "string"
          },
          {
            "description": "for body documentation see the relevant /edge_stacks/create/{method} endpoint",
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "type": "object"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/portainer.EdgeStack"
            }
          },
          "500": {
            "description": "Internal Server Error"
          },
          "503": {
            "description": "Edge compute features are disabled"
          }
        },
        "security": [
          {
            "ApiKeyAuth": []
          },
          {
            "jwt": []
          }
        ],
        "summary": "Create an EdgeStack",
        "tags": [
          "edge_stacks"
        ]
      }
    },
    "/edge_stacks/{id}": {
      "delete": {
        "description": "**Access policy**: administrator",
        "operationId": "EdgeStackDelete",
        "parameters": [
          {
            "description": "EdgeStack Id",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "integer"
          }
        ],
        "responses": {
          "204": {
            "description": "No Content"
          },
          "400": {
            "description": "Bad Request"
          },
          "500": {
            "description": "Internal Server Error"
          },
          "503": {
            "description": "Edge compute features are disabled"
          }
        },
        "security": [
          {
            "ApiKeyAuth": []
          },
          {
            "jwt": []
          }
        ],
        "summary": "Delete an EdgeStack",
        "tags": [
          "edge_stacks"
        ]
      },
      "get": {
        "description": "**Access policy**: administrator",
        "operationId": "EdgeStackInspect",
        "parameters": [
          {
            "description": "EdgeStack Id",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "integer"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/portainer.EdgeStack"
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "500": {
            "description": "Internal Server Error"
          },
          "503": {
            "description": "Edge compute features are disabled"
          }
        },
        "security": [
          {
            "ApiKeyAuth": []
          },
          {
            "jwt": []
          }
        ],
        "summary": "Inspect an EdgeStack",
        "tags": [
          "edge_stacks"
        ]
      },
      "put": {
        "consumes": [
          "application/json"
        ],
        "description": "**Access policy**: administrator",
        "operationId": "EdgeStackUpdate",
        "parameters": [
          {
            "description": "EdgeStack Id",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "integer"
          },
          {
            "description": "EdgeStack data",
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/edgestacks.updateEdgeStackPayload"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/portainer.EdgeStack"
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "500": {
            "description": "Internal Server Error"
          },
          "503": {
            "description": "Edge compute features are disabled"
          }
        },
        "security": [
          {
            "ApiKeyAuth": []
          },
          {
            "jwt": []
          }
        ],
        "summary": "Update an EdgeStack",
        "tags": [
          "edge_stacks"
        ]
      }
    },
    "/edge_stacks/{id}/file": {
      "get": {
        "description": "**Access policy**: administrator",
        "operationId": "EdgeStackFile",
        "parameters": [
          {
            "description": "EdgeStack Id",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "integer"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/edgestacks.stackFileResponse"
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "500": {
            "description": "Internal Server Error"
          },
          "503": {
            "description": "Edge compute features are disabled"
          }
        },
        "security": [
          {
            "ApiKeyAuth": []
          },
          {
            "jwt": []
          }
        ],
        "summary": "Fetches the stack file for an EdgeStack",
        "tags": [
          "edge_stacks"
        ]
      }
    },
    "/edge_stacks/{id}/status": {
      "put": {
        "consumes": [
          "application/json"
        ],
        "description": "Authorized only if the request is done by an Edge Environment(Endpoint)",
        "operationId": "EdgeStackStatusUpdate",
        "parameters": [
          {
            "description": "EdgeStack Id",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "integer"
          },
          {
            "description": "EdgeStack status payload",
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/edgestacks.updateStatusPayload"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/portainer.EdgeStack"
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          },
          "500": {
            "description": "Internal Server Error"
          }
        },
        "summary": "Update an EdgeStack status",
        "tags": [
          "edge_stacks"
        ]
      }
    },
    "/edge_stacks/{id}/status/{environmentId}": {
      "delete": {
        "deprecated": true,
        "description": "Authorized only if the request is done by an Edge Environment(Endpoint)",
        "operationId": "EdgeStackStatusDelete",
        "parameters": [
          {
            "description": "EdgeStack Id",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "integer"
          },
          {
            "description": "Environment identifier",
            "in": "path",
            "name": "environmentId",
            "required": true,
            "type": "integer"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/portainer.EdgeStack"
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          },
          "500": {
            "description": "Internal Server Error"
          }
        },
        "summary": "Delete an EdgeStack status",
        "tags": [
          "edge_stacks"
        ]
      }
    },
    "/edge_stacks/create/file": {
      "post": {
        "consumes": [
          "multipart/form-data"
        ],
        "description": "**Access policy**: administrator",
        "operationId": "EdgeStackCreateFile",
        "parameters": [
          {
            "description": "Name of the stack. it must only consist of lowercase alphanumeric characters, hyphens, or underscores as well as start with a letter or number",
            "in": "formData",
            "name": "Name",
            "required": true,
            "type": "string"
          },
          {
            "description": "Content of the Stack file",
            "in": "formData",
            "name": "file",
            "required": true,
            "type": "file"
          },
          {
            "description": "JSON stringified array of Edge Groups ids",
            "in": "formData",
            "name": "EdgeGroups",
            "required": true,
            "type": "string"
          },
          {
            "description": "deploy type 0 - 'compose', 1 - 'kubernetes'",
            "in": "formData",
            "name": "DeploymentType",
            "required": true,
            "type": "integer"
          },
          {
            "description": "JSON stringified array of Registry ids to use for this stack",
            "in": "formData",
            "name": "Registries",
            "type": "string"
          },
          {
            "description": "Uses the manifest's namespaces instead of the default one, relevant only for kube environments",
            "in": "formData",
            "name": "UseManifestNamespaces",
            "type": "boolean"
          },
          {
            "description": "Pre Pull image",
            "in": "formData",
            "name": "PrePullImage",
            "type": "boolean"
          },
          {
            "description": "Retry deploy",
            "in": "formData",
            "name": "RetryDeploy",
            "type": "boolean"
          },
          {
            "description": "if true, will not create an edge stack, but just will check the settings and return a non-persisted edge stack object",
            "in": "query",
            "name": "dryrun",
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/portainer.EdgeStack"
            }
          },
          "400": {
            "description": "Bad request"
          },
          "500": {
            "description": "Internal server error"
          },
          "503": {
            "description": "Edge compute features are disabled"
          }
        },
        "security": [
          {
            "ApiKeyAuth": []
          },
          {
            "jwt": []
          }
        ],
        "summary": "Create an EdgeStack from file",
        "tags": [
          "edge_stacks"
        ]
      }
    },
    "/edge_stacks/create/repository": {
      "post": {
        "description": "**Access policy**: administrator",
        "operationId": "EdgeStackCreateRepository",
        "parameters": [
          {
            "description": "stack config",
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/edgestacks.edgeStackFromGitRepositoryPayload"
            }
          },
          {
            "description": "if true, will not create an edge stack, but just will check the settings and return a non-persisted edge stack object",
            "in": "query",
            "name": "dryrun",
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/portainer.EdgeStack"
            }
          },
          "400": {
            "description": "Bad request"
          },
          "500": {
            "description": "Internal server error"
          },
          "503": {
            "description": "Edge compute features are disabled"
          }
        },
        "security": [
          {
            "ApiKeyAuth": []
          },
          {
            "jwt": []
          }
        ],
        "summary": "Create an EdgeStack from a git repository",
        "tags": [
          "edge_stacks"
        ]
      }
    },
    "/edge_stacks/create/string": {
      "post": {
        "description": "**Access policy**: administrator",
        "operationId": "EdgeStackCreateString",
        "parameters": [
          {
            "description": "stack config",
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/edgestacks.edgeStackFromStringPayload"
            }
          },
          {
            "description": "if true, will not create an edge stack, but just will check the settings and return a non-persisted edge stack object",
            "in": "query",
            "name": "dryrun",
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/portainer.EdgeStack"
            }
          },
          "400": {
            "description": "Bad request"
          },
          "500": {
            "description": "Internal server error"
          },
          "503": {
            "description": "Edge compute features are disabled"
          }
        },
        "security": [
          {
            "ApiKeyAuth": []
          },
          {
            "jwt": []
          }
        ],
        "summary": "Create an EdgeStack from a text",
        "tags": [
          "edge_stacks"
        ]
      }
    },
    "/edge_templates": {
      "get": {
        "consumes": [
          "application/json"
        ],
        "deprecated": true,
        "description": "**Access policy**: administrator",
        "operationId": "EdgeTemplateList",
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "items": {
                "$ref": "#/definitions/portainer.Template"
              },
              "type": "array"
            }
          },
          "500": {
            "description": "Internal Server Error"
          }
        },
        "security": [
          {
            "ApiKeyAuth": []
          },
          {
            "jwt": []
          }
        ],
        "summary": "Fetches the list of Edge Templates",
        "tags": [
          "edge_templates"
        ]
      }
    },
    "/endpoint_groups": {
      "get": {
        "description": "List all environment(endpoint) groups based on the current user authorizations. Will\nreturn all environment(endpoint) groups if using an administrator account otherwise it will\nonly return authorized environment(endpoint) groups.\n**Access policy**: restricted",
        "operationId": "EndpointGroupList",
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "Environment(Endpoint) group",
            "schema": {
              "items": {
                "$ref": "#/definitions/portainer.EndpointGroup"
              },
              "type": "array"
            }
          },
          "500": {
            "description": "Server error"
          }
        },
        "security": [
          {
            "ApiKeyAuth": []
          },
          {
            "jwt": []
          }
        ],
        "summary": "List Environment(Endpoint) groups",
        "tags": [
          "endpoint_groups"
        ]
      },
      "post": {
        "consumes": [
          "application/json"
        ],
        "description": "Create a new environment(endpoint) group.\n**Access policy**: administrator",
        "parameters": [
          {
            "description": "Environment(Endpoint) Group details",
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/endpointgroups.endpointGroupCreatePayload"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/portainer.EndpointGroup"
            }
          },
          "400": {
            "description": "Invalid request"
          },
          "500": {
            "description": "Server error"
          }
        },
        "security": [
          {
            "ApiKeyAuth": []
          },
          {
            "jwt": []
          }
        ],
        "summary": "Create an Environment(Endpoint) Group",
        "tags": [
          "endpoint_groups"
        ]
      }
    },
    "/endpoint_groups/{id}": {
      "delete": {
        "description": "Remove an environment(endpoint) group.\n**Access policy**: administrator",
        "operationId": "EndpointGroupDelete",
        "parameters": [
          {
            "description": "EndpointGroup identifier",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "integer"
          }
        ],
        "responses": {
          "204": {
            "description": "Success"
          },
          "400": {
            "description": "Invalid request"
          },
          "404": {
            "description": "EndpointGroup not found"
          },
          "500": {
            "description": "Server error"
          }
        },
        "security": [
          {
            "ApiKeyAuth": []
          },
          {
            "jwt": []
          }
        ],
        "summary": "Remove an environment(endpoint) group",
        "tags": [
          "endpoint_groups"
        ]
      },
      "get": {
        "consumes": [
          "application/json"
        ],
        "description": "Retrieve details abont an environment(endpoint) group.\n**Access policy**: administrator",
        "parameters": [
          {
            "description": "Environment(Endpoint) group identifier",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "integer"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/portainer.EndpointGroup"
            }
          },
          "400": {
            "description": "Invalid request"
          },
          "404": {
            "description": "EndpointGroup not found"
          },
          "500": {
            "description": "Server error"
          }
        },
        "security": [
          {
            "ApiKeyAuth": []
          },
          {
            "jwt": []
          }
        ],
        "summary": "Inspect an Environment(Endpoint) group",
        "tags": [
          "endpoint_groups"
        ]
      },
      "put": {
        "consumes": [
          "application/json"
        ],
        "description": "Update an environment(endpoint) group.\n**Access policy**: administrator",
        "operationId": "EndpointGroupUpdate",
        "parameters": [
          {
            "description": "EndpointGroup identifier",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "integer"
          },
          {
            "description": "EndpointGroup details",
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/endpointgroups.endpointGroupUpdatePayload"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/portainer.EndpointGroup"
            }
          },
          "400": {
            "description": "Invalid request"
          },
          "404": {
            "description": "EndpointGroup not found"
          },
          "500": {
            "description": "Server error"
          }
        },
        "security": [
          {
            "ApiKeyAuth": []
          },
          {
            "jwt": []
          }
        ],
        "summary": "Update an environment(endpoint) group",
        "tags": [
          "endpoint_groups"
        ]
      }
    },
    "/endpoint_groups/{id}/endpoints/{endpointId}": {
      "delete": {
        "description": "**Access policy**: administrator",
        "operationId": "EndpointGroupDeleteEndpoint",
        "parameters": [
          {
            "description": "EndpointGroup identifier",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "integer"
          },
          {
            "description": "Environment(Endpoint) identifier",
            "in": "path",
            "name": "endpointId",
            "required": true,
            "type": "integer"
          }
        ],
        "responses": {
          "204": {
            "description": "Success"
          },
          "400": {
            "description": "Invalid request"
          },
          "404": {
            "description": "EndpointGroup not found"
          },
          "500": {
            "description": "Server error"
          }
        },
        "security": [
          {
            "ApiKeyAuth": []
          },
          {
            "jwt": []
          }
        ],
        "summary": "Removes environment(endpoint) from an environment(endpoint) group",
        "tags": [
          "endpoint_groups"
        ]
      },
      "put": {
        "description": "Add an environment(endpoint) to an environment(endpoint) group\n**Access policy**: administrator",
        "operationId": "EndpointGroupAddEndpoint",
        "parameters": [
          {
            "description": "EndpointGroup identifier",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "integer"
          },
          {
            "description": "Environment(Endpoint) identifier",
            "in": "path",
            "name": "endpointId",
            "required": true,
            "type": "integer"
          }
        ],
        "responses": {
          "204": {
            "description": "Success"
          },
          "400": {
            "description": "Invalid request"
          },
          "404": {
            "description": "EndpointGroup not found"
          },
          "500": {
            "description": "Server error"
          }
        },
        "security": [
          {
            "ApiKeyAuth": []
          },
          {
            "jwt": []
          }
        ],
        "summary": "Add an environment(endpoint) to an environment(endpoint) group",
        "tags": [
          "endpoint_groups"
        ]
      }
    },
    "/endpoints": {
      "delete": {
        "consumes": [
          "application/json"
        ],
        "description": "Remove multiple environments and optionally clean-up associated resources.\n**Access policy**: Administrator only.",
        "operationId": "EndpointDeleteBatch",
        "parameters": [
          {
            "description": "List of environments to delete, with optional deleteCluster flag to clean-up associated resources (cloud environments only)",
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/endpoints.endpointDeleteBatchPayload"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "204": {
            "description": "Environment(s) successfully deleted."
          },
          "207": {
            "description": "Partial success. Some environments were deleted successfully, while others failed.",
            "schema": {
              "$ref": "#/definitions/endpoints.endpointDeleteBatchPartialResponse"
            }
          },
          "400": {
            "description": "Invalid request payload, such as missing required fields or fields not meeting validation criteria."
          },
          "403": {
            "description": "Unauthorized access or operation not allowed."
          },
          "500": {
            "description": "Server error occurred while attempting to delete the specified environments."
          }
        },
        "security": [
          {
            "ApiKeyAuth": [],
            "jwt": []
          }
        ],
        "summary": "Remove multiple environments",
        "tags": [
          "endpoints"
        ]
      },
      "get": {
        "description": "List all environments(endpoints) based on the current user authorizations. Will\nreturn all environments(endpoints) if using an administrator or team leader account otherwise it will\nonly return authorized environments(endpoints).\n**Access policy**: restricted",
        "operationId": "EndpointList",
        "parameters": [
          {
            "description": "Start searching from",
            "in": "query",
            "name": "start",
            "type": "integer"
          },
          {
            "description": "Limit results to this value",
            "in": "query",
            "name": "limit",
            "type": "integer"
          },
          {
            "description": "Order sorted results by desc/asc",
            "in": "query",
            "name": "order",
            "type": "integer"
          },
          {
            "description": "Search query",
            "in": "query",
            "name": "search",
            "type": "string"
          },
          {
            "description": "List environments(endpoints) of these groups",
            "in": "query",
            "items": {
              "type": "integer"
            },
            "name": "groupIds",
            "type": "array"
          },
          {
            "description": "List environments(endpoints) by this status",
            "in": "query",
            "items": {
              "type": "integer"
            },
            "name": "status",
            "type": "array"
          },
          {
            "description": "List environments(endpoints) of this type",
            "in": "query",
            "items": {
              "type": "integer"
            },
            "name": "types",
            "type": "array"
          },
          {
            "description": "search environments(endpoints) with these tags (depends on tagsPartialMatch)",
            "in": "query",
            "items": {
              "type": "integer"
            },
            "name": "tagIds",
            "type": "array"
          },
          {
            "description": "If true, will return environment(endpoint) which has one of tagIds, if false (or missing) will return only environments(endpoints) that has all the tags",
            "in": "query",
            "name": "tagsPartialMatch",
            "type": "boolean"
          },
          {
            "description": "will return only these environments(endpoints)",
            "in": "query",
            "items": {
              "type": "integer"
            },
            "name": "endpointIds",
            "type": "array"
          },
          {
            "description": "If true, will return environment(endpoint) that were provisioned",
            "in": "query",
            "name": "provisioned",
            "type": "boolean"
          },
          {
            "description": "will return only environments with on of these agent versions",
            "in": "query",
            "items": {
              "type": "string"
            },
            "name": "agentVersions",
            "type": "array"
          },
          {
            "description": "if exists true show only edge async agents, false show only standard edge agents. if missing, will show both types (relevant only for edge agents)",
            "in": "query",
            "name": "edgeAsync",
            "type": "boolean"
          },
          {
            "description": "if true, show only untrusted edge agents, if false show only trusted edge agents (relevant only for edge agents)",
            "in": "query",
            "name": "edgeDeviceUntrusted",
            "type": "boolean"
          },
          {
            "description": "if bigger then zero, show only edge agents that checked-in in the last provided seconds (relevant only for edge agents)",
            "in": "query",
            "name": "edgeCheckInPassedSeconds",
            "type": "number"
          },
          {
            "description": "if true, the snapshot data won't be retrieved",
            "in": "query",
            "name": "excludeSnapshots",
            "type": "boolean"
          },
          {
            "description": "will return only environments(endpoints) with this name",
            "in": "query",
            "name": "name",
            "type": "string"
          },
          {
            "description": "only applied when edgeStackId exists. Filter the returned environments based on their deployment status in the stack (not the environment status!)",
            "in": "query",
            "name": "edgeStackStatus",
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "Endpoints",
            "schema": {
              "items": {
                "$ref": "#/definitions/portainer.Endpoint"
              },
              "type": "array"
            }
          },
          "500": {
            "description": "Server error"
          }
        },
        "security": [
          {
            "ApiKeyAuth": []
          },
          {
            "jwt": []
          }
        ],
        "summary": "List environments(endpoints)",
        "tags": [
          "endpoints"
        ]
      },
      "post": {
        "consumes": [
          "multipart/form-data"
        ],
        "description": "Create a new environment(endpoint) that will be used to manage an environment(endpoint).\n**Access policy**: administrator",
        "operationId": "EndpointCreate",
        "parameters": [
          {
            "description": "Name that will be used to identify this environment(endpoint) (example: my-environment)",
            "in": "formData",
            "name": "Name",
            "required": true,
            "type": "string"
          },
          {
            "description": "Environment(Endpoint) type. Value must be one of: 1 (Local Docker environment), 2 (Agent environment), 3 (Azure environment), 4 (Edge agent environment) or 5 (Local Kubernetes Environment)",
            "in": "formData",
            "name": "EndpointCreationType",
            "required": true,
            "type": "integer"
          },
          {
            "description": "Container engine used by the environment(endpoint). Value must be one of: 'docker' or 'podman'",
            "in": "formData",
            "name": "ContainerEngine",
            "type": "string"
          },
          {
            "description": "URL or IP address of a Docker host (example: docker.mydomain.tld:2375). Defaults to local if not specified (Linux: /var/run/docker.sock, Windows: //./pipe/docker_engine). Cannot be empty if EndpointCreationType is set to 4 (Edge agent environment)",
            "in": "formData",
            "name": "URL",
            "type": "string"
          },
          {
            "description": "URL or IP address where exposed containers will be reachable. Defaults to URL if not specified (example: docker.mydomain.tld:2375)",
            "in": "formData",
            "name": "PublicURL",
            "type": "string"
          },
          {
            "description": "Environment(Endpoint) group identifier. If not specified will default to 1 (unassigned).",
            "in": "formData",
            "name": "GroupID",
            "type": "integer"
          },
          {
            "description": "Require TLS to connect against this environment(endpoint). Must be true if EndpointCreationType is set to 2 (Agent environment)",
            "in": "formData",
            "name": "TLS",
            "type": "boolean"
          },
          {
            "description": "Skip server verification when using TLS. Must be true if EndpointCreationType is set to 2 (Agent environment)",
            "in": "formData",
            "name": "TLSSkipVerify",
            "type": "boolean"
          },
          {
            "description": "Skip client verification when using TLS. Must be true if EndpointCreationType is set to 2 (Agent environment)",
            "in": "formData",
            "name": "TLSSkipClientVerify",
            "type": "boolean"
          },
          {
            "description": "TLS CA certificate file",
            "in": "formData",
            "name": "TLSCACertFile",
            "type": "file"
          },
          {
            "description": "TLS client certificate file",
            "in": "formData",
            "name": "TLSCertFile",
            "type": "file"
          },
          {
            "description": "TLS client key file",
            "in": "formData",
            "name": "TLSKeyFile",
            "type": "file"
          },
          {
            "description": "Azure application ID. Required if environment(endpoint) type is set to 3",
            "in": "formData",
            "name": "AzureApplicationID",
            "type": "string"
          },
          {
            "description": "Azure tenant ID. Required if environment(endpoint) type is set to 3",
            "in": "formData",
            "name": "AzureTenantID",
            "type": "string"
          },
          {
            "description": "Azure authentication key. Required if environment(endpoint) type is set to 3",
            "in": "formData",
            "name": "AzureAuthenticationKey",
            "type": "string"
          },
          {
            "description": "List of tag identifiers to which this environment(endpoint) is associated",
            "in": "formData",
            "items": {
              "type": "integer"
            },
            "name": "TagIds",
            "type": "array"
          },
          {
            "description": "The check in interval for edge agent (in seconds)",
            "in": "formData",
            "name": "EdgeCheckinInterval",
            "type": "integer"
          },
          {
            "description": "URL or IP address that will be used to establish a reverse tunnel",
            "in": "formData",
            "name": "EdgeTunnelServerAddress",
            "required": true,
            "type": "string"
          },
          {
            "description": "List of GPUs - json stringified array of {name, value} structs",
            "in": "formData",
            "name": "Gpus",
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/portainer.Endpoint"
            }
          },
          "400": {
            "description": "Invalid request"
          },
          "409": {
            "description": "Name is not unique"
          },
          "500": {
            "description": "Server error"
          }
        },
        "security": [
          {
            "ApiKeyAuth": []
          },
          {
            "jwt": []
          }
        ],
        "summary": "Create a new environment(endpoint)",
        "tags": [
          "endpoints"
        ]
      }
    },
    "/endpoints/{id}": {
      "delete": {
        "description": "Remove the environment associated to the specified identifier and optionally clean-up associated resources.\n**Access policy**: Administrator only.",
        "operationId": "EndpointDelete",
        "parameters": [
          {
            "description": "Environment(Endpoint) identifier",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "integer"
          }
        ],
        "responses": {
          "204": {
            "description": "Environment successfully deleted."
          },
          "400": {
            "description": "Invalid request payload, such as missing required fields or fields not meeting validation criteria."
          },
          "403": {
            "description": "Unauthorized access or operation not allowed."
          },
          "404": {
            "description": "Unable to find the environment with the specified identifier inside the database."
          },
          "500": {
            "description": "Server error occurred while attempting to delete the environment."
          }
        },
        "security": [
          {
            "ApiKeyAuth": [],
            "jwt": []
          }
        ],
        "summary": "Remove an environment",
        "tags": [
          "endpoints"
        ]
      },
      "get": {
        "description": "Retrieve details about an environment(endpoint).\n**Access policy**: restricted",
        "operationId": "EndpointInspect",
        "parameters": [
          {
            "description": "Environment(Endpoint) identifier",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "integer"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/portainer.Endpoint"
            }
          },
          "400": {
            "description": "Invalid request"
          },
          "404": {
            "description": "Environment(Endpoint) not found"
          },
          "500": {
            "description": "Server error"
          }
        },
        "security": [
          {
            "ApiKeyAuth": []
          },
          {
            "jwt": []
          }
        ],
        "summary": "Inspect an environment(endpoint)",
        "tags": [
          "endpoints"
        ]
      },
      "put": {
        "consumes": [
          "application/json"
        ],
        "description": "Update an environment(endpoint).\n**Access policy**: authenticated",
        "operationId": "EndpointUpdate",
        "parameters": [
          {
            "description": "Environment(Endpoint) identifier",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "integer"
          },
          {
            "description": "Environment(Endpoint) details",
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/endpoints.endpointUpdatePayload"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/portainer.Endpoint"
            }
          },
          "400": {
            "description": "Invalid request"
          },
          "404": {
            "description": "Environment(Endpoint) not found"
          },
          "409": {
            "description": "Name is not unique"
          },
          "500": {
            "description": "Server error"
          }
        },
        "security": [
          {
            "ApiKeyAuth": []
          },
          {
            "jwt": []
          }
        ],
        "summary": "Update an environment(endpoint)",
        "tags": [
          "endpoints"
        ]
      }
    },
    "/endpoints/{id}/association": {
      "put": {
        "description": "De-association an edge environment(endpoint).\n**Access policy**: administrator",
        "operationId": "EndpointAssociationDelete",
        "parameters": [
          {
            "description": "Environment(Endpoint) identifier",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "integer"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "204": {
            "description": "Success"
          },
          "400": {
            "description": "Invalid request"
          },
          "404": {
            "description": "Environment(Endpoint) not found"
          },
          "500": {
            "description": "Server error"
          }
        },
        "security": [
          {
            "ApiKeyAuth": []
          },
          {
            "jwt": []
          }
        ],
        "summary": "De-association an edge environment(endpoint)",
        "tags": [
          "endpoints"
        ]
      }
    },
    "/endpoints/{id}/docker/v2/browse/put": {
      "post": {
        "consumes": [
          "multipart/form-data"
        ],
        "description": "Use this environment(endpoint) to upload TLS files.\n**Access policy**: administrator",
        "parameters": [
          {
            "description": "Environment(Endpoint) identifier",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "integer"
          },
          {
            "description": "Optional volume identifier to upload the file",
            "in": "query",
            "name": "volumeID",
            "type": "string"
          },
          {
            "description": "The destination path to upload the file to",
            "in": "formData",
            "name": "Path",
            "required": true,
            "type": "string"
          },
          {
            "description": "The file to upload",
            "in": "formData",
            "name": "file",
            "required": true,
            "type": "file"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "204": {
            "description": "Success"
          },
          "400": {
            "description": "Invalid request"
          },
          "500": {
            "description": "Server error"
          }
        },
        "security": [
          {
            "ApiKeyAuth": []
          },
          {
            "jwt": []
          }
        ],
        "summary": "Upload a file under a specific path on the file system of an environment (endpoint)",
        "tags": [
          "endpoints"
        ]
      }
    },
    "/endpoints/{id}/dockerhub/{registryId}": {
      "get": {
        "description": "get docker pull limits for a docker hub registry in the environment\n**Access policy**:",
        "operationId": "endpointDockerhubStatus",
        "parameters": [
          {
            "description": "endpoint ID",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "integer"
          },
          {
            "description": "registry ID",
            "in": "path",
            "name": "registryId",
            "required": true,
            "type": "integer"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/endpoints.dockerhubStatusResponse"
            }
          },
          "400": {
            "description": "Invalid request"
          },
          "403": {
            "description": "Permission denied"
          },
          "404": {
            "description": "registry or endpoint not found"
          },
          "500": {
            "description": "Server error"
          }
        },
        "security": [
          {
            "ApiKeyAuth": []
          },
          {
            "jwt": []
          }
        ],
        "summary": "fetch docker pull limits",
        "tags": [
          "endpoints"
        ]
      }
    },
    "/endpoints/{id}/edge/jobs/{jobID}/logs": {
      "post": {
        "consumes": [
          "application/json"
        ],
        "description": "**Access policy**: public",
        "parameters": [
          {
            "description": "environment(endpoint) Id",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "integer"
          },
          {
            "description": "Job Id",
            "in": "path",
            "name": "jobID",
            "required": true,
            "type": "integer"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "400": {
            "description": "Bad Request"
          },
          "500": {
            "description": "Internal Server Error"
          }
        },
        "summary": "Inspect an EdgeJob Log",
        "tags": [
          "edge",
          "endpoints"
        ]
      }
    },
    "/endpoints/{id}/edge/stacks/{stackId}": {
      "get": {
        "consumes": [
          "application/json"
        ],
        "description": "**Access policy**: public",
        "parameters": [
          {
            "description": "environment(endpoint) Id",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "integer"
          },
          {
            "description": "EdgeStack Id",
            "in": "path",
            "name": "stackId",
            "required": true,
            "type": "integer"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/edge.StackPayload"
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "404": {
            "description": "Not Found"
          },
          "500": {
            "description": "Internal Server Error"
          }
        },
        "summary": "Inspect an Edge Stack for an Environment(Endpoint)",
        "tags": [
          "edge",
          "endpoints",
          "edge_stacks"
        ]
      }
    },
    "/endpoints/{id}/edge/status": {
      "get": {
        "description": "environment(endpoint) for edge agent to check status of environment(endpoint)\n**Access policy**: restricted only to Edge environments(endpoints)",
        "operationId": "EndpointEdgeStatusInspect",
        "parameters": [
          {
            "description": "Environment(Endpoint) identifier",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/endpointedge.endpointEdgeStatusInspectResponse"
            }
          },
          "400": {
            "description": "Invalid request"
          },
          "403": {
            "description": "Permission denied to access environment(endpoint)"
          },
          "404": {
            "description": "Environment(Endpoint) not found"
          },
          "500": {
            "description": "Server error"
          }
        },
        "security": [
          {
            "ApiKeyAuth": []
          },
          {
            "jwt": []
          }
        ],
        "summary": "Get environment(endpoint) status",
        "tags": [
          "endpoints"
        ]
      }
    },
    "/endpoints/{id}/forceupdateservice": {
      "put": {
        "consumes": [
          "application/json"
        ],
        "description": "force update a docker service\n**Access policy**: authenticated",
        "operationId": "endpointForceUpdateService",
        "parameters": [
          {
            "description": "endpoint identifier",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "integer"
          },
          {
            "description": "details",
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/endpoints.forceUpdateServicePayload"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/swarm.ServiceUpdateResponse"
            }
          },
          "400": {
            "description": "Invalid request"
          },
          "403": {
            "description": "Permission denied"
          },
          "404": {
            "description": "endpoint not found"
          },
          "500": {
            "description": "Server error"
          }
        },
        "security": [
          {
            "ApiKeyAuth": []
          },
          {
            "jwt": []
          }
        ],
        "summary": "force update a docker service",
        "tags": [
          "endpoints"
        ]
      }
    },
    "/endpoints/{id}/kubernetes/helm": {
      "get": {
        "consumes": [
          "application/json"
        ],
        "description": "**Access policy**: authenticated",
        "operationId": "HelmList",
        "parameters": [
          {
            "description": "Environment(Endpoint) identifier",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "integer"
          },
          {
            "description": "specify an optional namespace",
            "in": "query",
            "name": "namespace",
            "type": "string"
          },
          {
            "description": "specify an optional filter",
            "in": "query",
            "name": "filter",
            "type": "string"
          },
          {
            "description": "specify an optional selector",
            "in": "query",
            "name": "selector",
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "items": {
                "$ref": "#/definitions/release.ReleaseElement"
              },
              "type": "array"
            }
          },
          "400": {
            "description": "Invalid environment(endpoint) identifier"
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Environment(Endpoint) or ServiceAccount not found"
          },
          "500": {
            "description": "Server error"
          }
        },
        "security": [
          {
            "ApiKeyAuth": []
          },
          {
            "jwt": []
          }
        ],
        "summary": "List Helm Releases",
        "tags": [
          "helm"
        ]
      },
      "post": {
        "consumes": [
          "application/json"
        ],
        "description": "**Access policy**: authenticated",
        "operationId": "HelmInstall",
        "parameters": [
          {
            "description": "Environment(Endpoint) identifier",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "integer"
          },
          {
            "description": "Chart details",
            "in": "body",
            "name": "payload",
            "required": true,
            "schema": {
              "$ref": "#/definitions/helm.installChartPayload"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/release.Release"
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Environment(Endpoint) or ServiceAccount not found"
          },
          "500": {
            "description": "Server error"
          }
        },
        "security": [
          {
            "ApiKeyAuth": []
          },
          {
            "jwt": []
          }
        ],
        "summary": "Install Helm Chart",
        "tags": [
          "helm"
        ]
      }
    },
    "/endpoints/{id}/kubernetes/helm/{release}": {
      "delete": {
        "description": "**Access policy**: authenticated",
        "operationId": "HelmDelete",
        "parameters": [
          {
            "description": "Environment(Endpoint) identifier",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "integer"
          },
          {
            "description": "The name of the release/application to uninstall",
            "in": "path",
            "name": "release",
            "required": true,
            "type": "string"
          },
          {
            "description": "An optional namespace",
            "in": "query",
            "name": "namespace",
            "type": "string"
          }
        ],
        "responses": {
          "204": {
            "description": "Success"
          },
          "400": {
            "description": "Invalid environment(endpoint) id or bad request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Environment(Endpoint) or ServiceAccount not found"
          },
          "500": {
            "description": "Server error or helm error"
          }
        },
        "security": [
          {
            "ApiKeyAuth": []
          },
          {
            "jwt": []
          }
        ],
        "summary": "Delete Helm Release",
        "tags": [
          "helm"
        ]
      }
    },
    "/endpoints/{id}/kubernetes/helm/repositories": {
      "get": {
        "deprecated": true,
        "description": "Inspect a user helm repositories.\n**Access policy**: authenticated",
        "operationId": "HelmUserRepositoriesListDeprecated",
        "parameters": [
          {
            "description": "User identifier",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "integer"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/helm.helmUserRepositoryResponse"
            }
          },
          "400": {
            "description": "Invalid request"
          },
          "403": {
            "description": "Permission denied"
          },
          "500": {
            "description": "Server error"
          }
        },
        "security": [
          {
            "ApiKeyAuth": []
          },
          {
            "jwt": []
          }
        ],
        "summary": "List a users helm repositories",
        "tags": [
          "helm"
        ]
      },
      "post": {
        "consumes": [
          "application/json"
        ],
        "deprecated": true,
        "description": "Create a user helm repository.\n**Access policy**: authenticated",
        "operationId": "HelmUserRepositoryCreateDeprecated",
        "parameters": [
          {
            "description": "Environment(Endpoint) identifier",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "integer"
          },
          {
            "description": "Helm Repository",
            "in": "body",
            "name": "payload",
            "required": true,
            "schema": {
              "$ref": "#/definitions/helm.addHelmRepoUrlPayload"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/portainer.HelmUserRepository"
            }
          },
          "400": {
            "description": "Invalid request"
          },
          "403": {
            "description": "Permission denied"
          },
          "500": {
            "description": "Server error"
          }
        },
        "security": [
          {
            "ApiKeyAuth": []
          },
          {
            "jwt": []
          }
        ],
        "summary": "Create a user helm repository",
        "tags": [
          "helm"
        ]
      }
    },
    "/endpoints/{id}/registries": {
      "get": {
        "description": "List all registries based on the current user authorizations in current environment.\n**Access policy**: authenticated",
        "operationId": "endpointRegistriesList",
        "parameters": [
          {
            "description": "required if kubernetes environment, will show registries by namespace",
            "in": "query",
            "name": "namespace",
            "type": "string"
          },
          {
            "description": "Environment(Endpoint) identifier",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "integer"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "items": {
                "$ref": "#/definitions/portainer.Registry"
              },
              "type": "array"
            }
          },
          "500": {
            "description": "Server error"
          }
        },
        "security": [
          {
            "ApiKeyAuth": []
          },
          {
            "jwt": []
          }
        ],
        "summary": "List Registries on environment",
        "tags": [
          "endpoints"
        ]
      }
    },
    "/endpoints/{id}/registries/{registryId}": {
      "put": {
        "consumes": [
          "application/json"
        ],
        "description": "**Access policy**: authenticated",
        "operationId": "endpointRegistryAccess",
        "parameters": [
          {
            "description": "Environment(Endpoint) identifier",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "integer"
          },
          {
            "description": "Registry identifier",
            "in": "path",
            "name": "registryId",
            "required": true,
            "type": "integer"
          },
          {
            "description": "details",
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/endpoints.registryAccessPayload"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "204": {
            "description": "Success"
          },
          "400": {
            "description": "Invalid request"
          },
          "403": {
            "description": "Permission denied"
          },
          "404": {
            "description": "Endpoint not found"
          },
          "500": {
            "description": "Server error"
          }
        },
        "security": [
          {
            "ApiKeyAuth": []
          },
          {
            "jwt": []
          }
        ],
        "summary": "update registry access for environment",
        "tags": [
          "endpoints"
        ]
      }
    },
    "/endpoints/{id}/settings": {
      "put": {
        "consumes": [
          "application/json"
        ],
        "description": "Update settings for an environment(endpoint).\n**Access policy**: authenticated",
        "operationId": "EndpointSettingsUpdate",
        "parameters": [
          {
            "description": "Environment(Endpoint) identifier",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "integer"
          },
          {
            "description": "Environment(Endpoint) details",
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/endpoints.endpointSettingsUpdatePayload"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/portainer.Endpoint"
            }
          },
          "400": {
            "description": "Invalid request"
          },
          "404": {
            "description": "Environment(Endpoint) not found"
          },
          "500": {
            "description": "Server error"
          }
        },
        "security": [
          {
            "ApiKeyAuth": []
          },
          {
            "jwt": []
          }
        ],
        "summary": "Update settings for an environment(endpoint)",
        "tags": [
          "endpoints"
        ]
      }
    },
    "/endpoints/{id}/snapshot": {
      "post": {
        "description": "Snapshots an environment(endpoint)\n**Access policy**: administrator",
        "operationId": "EndpointSnapshot",
        "parameters": [
          {
            "description": "Environment(Endpoint) identifier",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "integer"
          }
        ],
        "responses": {
          "204": {
            "description": "Success"
          },
          "400": {
            "description": "Invalid request"
          },
          "404": {
            "description": "Environment(Endpoint) not found"
          },
          "500": {
            "description": "Server error"
          }
        },
        "security": [
          {
            "ApiKeyAuth": []
          },
          {
            "jwt": []
          }
        ],
        "summary": "Snapshots an environment(endpoint)",
        "tags": [
          "endpoints"
        ]
      }
    },
    "/endpoints/global-key": {
      "post": {
        "operationId": "EndpointCreateGlobalKey",
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/endpoints.endpointCreateGlobalKeyResponse"
            }
          },
          "400": {
            "description": "Invalid request"
          },
          "500": {
            "description": "Server error"
          }
        },
        "summary": "Create or retrieve the endpoint for an EdgeID",
        "tags": [
          "endpoints"
        ]
      }
    },
    "/endpoints/relations": {
      "put": {
        "consumes": [
          "application/json"
        ],
        "description": "Update relations for a list of environments\nEdge groups, tags and environment group can be updated.\n\n**Access policy**: administrator",
        "operationId": "EndpointUpdateRelations",
        "parameters": [
          {
            "description": "Environment relations data",
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/endpoints.endpointUpdateRelationsPayload"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Success"
          },
          "400": {
            "description": "Invalid request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Not found"
          },
          "500": {
            "description": "Server error"
          }
        },
        "security": [
          {
            "jwt": []
          }
        ],
        "summary": "Update relations for a list of environments",
        "tags": [
          "endpoints"
        ]
      }
    },
    "/endpoints/snapshot": {
      "post": {
        "description": "Snapshot all environments(endpoints)\n**Access policy**: administrator",
        "operationId": "EndpointSnapshots",
        "responses": {
          "204": {
            "description": "Success"
          },
          "500": {
            "description": "Server Error"
          }
        },
        "security": [
          {
            "ApiKeyAuth": []
          },
          {
            "jwt": []
          }
        ],
        "summary": "Snapshot all environments(endpoints)",
        "tags": [
          "endpoints"
        ]
      }
    },
    "/gitops/repo/file/preview": {
      "post": {
        "description": "Retrieve the compose file content based on git repository configuration\n**Access policy**: authenticated",
        "operationId": "GitOperationRepoFilePreview",
        "parameters": [
          {
            "description": "Template details",
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/gitops.repositoryFilePreviewPayload"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/gitops.fileResponse"
            }
          },
          "400": {
            "description": "Invalid request"
          },
          "500": {
            "description": "Server error"
          }
        },
        "security": [
          {
            "ApiKeyAuth": []
          },
          {
            "jwt": []
          }
        ],
        "summary": "preview the content of target file in the git repository",
        "tags": [
          "gitops"
        ]
      }
    },
    "/kubernetes/{id}/applications": {
      "get": {
        "description": "Get a list of applications across all namespaces in the cluster. If the nodeName is provided, it will return the applications running on that node.\n**Access policy**: authenticated",
        "operationId": "GetAllKubernetesApplications",
        "parameters": [
          {
            "description": "Environment(Endpoint) identifier",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "integer"
          },
          {
            "description": "Namespace name",
            "in": "query",
            "name": "namespace",
            "required": true,
            "type": "string"
          },
          {
            "description": "Node name",
            "in": "query",
            "name": "nodeName",
            "required": true,
            "type": "string"
          },
          {
            "description": "Include dependencies in the response",
            "in": "query",
            "name": "withDependencies",
            "type": "boolean"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "items": {
                "$ref": "#/definitions/kubernetes.K8sApplication"
              },
              "type": "array"
            }
          },
          "400": {
            "description": "Invalid request payload, such as missing required fields or fields not meeting validation criteria."
          },
          "401": {
            "description": "Unauthorized access - the user is not authenticated or does not have the necessary permissions. Ensure that you have provided a valid API key or JWT token, and that you have the required permissions."
          },
          "403": {
            "description": "Permission denied - the user is authenticated but does not have the necessary permissions to access the requested resource or perform the specified operation. Check your user roles and permissions."
          },
          "404": {
            "description": "Unable to find an environment with the specified identifier."
          },
          "500": {
            "description": "Server error occurred while attempting to retrieve the list of applications from the cluster."
          }
        },
        "security": [
          {
            "ApiKeyAuth": [],
            "jwt": []
          }
        ],
        "summary": "Get a list of applications across all namespaces in the cluster. If the nodeName is provided, it will return the applications running on that node.",
        "tags": [
          "kubernetes"
        ]
      }
    },
    "/kubernetes/{id}/applications/count": {
      "get": {
        "description": "Get the count of Applications across all namespaces in the cluster. If the nodeName is provided, it will return the count of applications running on that node.\n**Access policy**: Authenticated user.",
        "operationId": "GetAllKubernetesApplicationsCount",
        "parameters": [
          {
            "description": "Environment identifier",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "integer"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "type": "integer"
            }
          },
          "400": {
            "description": "Invalid request payload, such as missing required fields or fields not meeting validation criteria."
          },
          "401": {
            "description": "Unauthorized access - the user is not authenticated or does not have the necessary permissions. Ensure that you have provided a valid API key or JWT token, and that you have the required permissions."
          },
          "403": {
            "description": "Permission denied - the user is authenticated but does not have the necessary permissions to access the requested resource or perform the specified operation. Check your user roles and permissions."
          },
          "404": {
            "description": "Unable to find an environment with the specified identifier."
          },
          "500": {
            "description": "Server error occurred while attempting to retrieve the count of all applications from the cluster."
          }
        },
        "security": [
          {
            "ApiKeyAuth": [],
            "jwt": []
          }
        ],
        "summary": "Get Applications count",
        "tags": [
          "kubernetes"
        ]
      }
    },
    "/kubernetes/{id}/cluster_role_bindings/delete": {
      "post": {
        "consumes": [
          "application/json"
        ],
        "description": "Delete the provided list of cluster role bindings.\n**Access policy**: Authenticated user.",
        "operationId": "DeleteClusterRoleBindings",
        "parameters": [
          {
            "description": "Environment identifier",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "integer"
          },
          {
            "description": "A list of cluster role bindings to delete",
            "in": "body",
            "name": "payload",
            "required": true,
            "schema": {
              "items": {
                "type": "string"
              },
              "type": "array"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Success"
          },
          "400": {
            "description": "Invalid request payload, such as missing required fields or fields not meeting validation criteria."
          },
          "401": {
            "description": "Unauthorized access - the user is not authenticated or does not have the necessary permissions. Ensure that you have provided a valid API key or JWT token, and that you have the required permissions."
          },
          "403": {
            "description": "Permission denied - the user is authenticated but does not have the necessary permissions to access the requested resource or perform the specified operation. Check your user roles and permissions."
          },
          "404": {
            "description": "Unable to find an environment with the specified identifier or unable to find a specific cluster role binding."
          },
          "500": {
            "description": "Server error occurred while attempting to delete cluster role bindings."
          }
        },
        "security": [
          {
            "ApiKeyAuth": [],
            "jwt": []
          }
        ],
        "summary": "Delete cluster role bindings",
        "tags": [
          "kubernetes"
        ]
      }
    },
    "/kubernetes/{id}/cluster_roles/delete": {
      "post": {
        "consumes": [
          "application/json"
        ],
        "description": "Delete the provided list of cluster roles.\n**Access policy**: Authenticated user.",
        "operationId": "DeleteClusterRoles",
        "parameters": [
          {
            "description": "Environment identifier",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "integer"
          },
          {
            "description": "A list of cluster roles to delete",
            "in": "body",
            "name": "payload",
            "required": true,
            "schema": {
              "items": {
                "type": "string"
              },
              "type": "array"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Success"
          },
          "400": {
            "description": "Invalid request payload, such as missing required fields or fields not meeting validation criteria."
          },
          "401": {
            "description": "Unauthorized access - the user is not authenticated or does not have the necessary permissions. Ensure that you have provided a valid API key or JWT token, and that you have the required permissions."
          },
          "403": {
            "description": "Permission denied - the user is authenticated but does not have the necessary permissions to access the requested resource or perform the specified operation. Check your user roles and permissions."
          },
          "404": {
            "description": "Unable to find an environment with the specified identifier or unable to find a specific cluster role."
          },
          "500": {
            "description": "Server error occurred while attempting to delete cluster roles."
          }
        },
        "security": [
          {
            "ApiKeyAuth": [],
            "jwt": []
          }
        ],
        "summary": "Delete cluster roles",
        "tags": [
          "kubernetes"
        ]
      }
    },
    "/kubernetes/{id}/clusterrolebindings": {
      "get": {
        "description": "Get a list of kubernetes cluster role bindings within the given environment at the cluster level.\n**Access policy**: Authenticated user.",
        "operationId": "GetAllKubernetesClusterRoleBindings",
        "parameters": [
          {
            "description": "Environment identifier",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "integer"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "items": {
                "$ref": "#/definitions/kubernetes.K8sClusterRoleBinding"
              },
              "type": "array"
            }
          },
          "400": {
            "description": "Invalid request payload, such as missing required fields or fields not meeting validation criteria."
          },
          "401": {
            "description": "Unauthorized access - the user is not authenticated or does not have the necessary permissions. Ensure that you have provided a valid API key or JWT token, and that you have the required permissions."
          },
          "403": {
            "description": "Permission denied - the user is authenticated but does not have the necessary permissions to access the requested resource or perform the specified operation. Check your user roles and permissions."
          },
          "404": {
            "description": "Unable to find an environment with the specified identifier."
          },
          "500": {
            "description": "Server error occurred while attempting to retrieve the list of cluster role bindings."
          }
        },
        "security": [
          {
            "ApiKeyAuth": [],
            "jwt": []
          }
        ],
        "summary": "Get a list of kubernetes cluster role bindings",
        "tags": [
          "kubernetes"
        ]
      }
    },
    "/kubernetes/{id}/clusterroles": {
      "get": {
        "description": "Get a list of kubernetes cluster roles within the given environment at the cluster level.\n**Access policy**: Authenticated user.",
        "operationId": "GetAllKubernetesClusterRoles",
        "parameters": [
          {
            "description": "Environment identifier",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "integer"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "items": {
                "$ref": "#/definitions/kubernetes.K8sClusterRole"
              },
              "type": "array"
            }
          },
          "400": {
            "description": "Invalid request payload, such as missing required fields or fields not meeting validation criteria."
          },
          "401": {
            "description": "Unauthorized access - the user is not authenticated or does not have the necessary permissions. Ensure that you have provided a valid API key or JWT token, and that you have the required permissions."
          },
          "403": {
            "description": "Permission denied - the user is authenticated but does not have the necessary permissions to access the requested resource or perform the specified operation. Check your user roles and permissions."
          },
          "404": {
            "description": "Unable to find an environment with the specified identifier."
          },
          "500": {
            "description": "Server error occurred while attempting to retrieve the list of cluster roles."
          }
        },
        "security": [
          {
            "ApiKeyAuth": [],
            "jwt": []
          }
        ],
        "summary": "Get a list of kubernetes cluster roles",
        "tags": [
          "kubernetes"
        ]
      }
    },
    "/kubernetes/{id}/configmaps": {
      "get": {
        "description": "Get a list of ConfigMaps across all namespaces in the cluster. For non-admin users, it will only return ConfigMaps based on the namespaces that they have access to.\n**Access policy**: Authenticated user.",
        "operationId": "GetAllKubernetesConfigMaps",
        "parameters": [
          {
            "description": "Environment identifier",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "integer"
          },
          {
            "description": "Set to true to include information about applications that use the ConfigMaps in the response",
            "in": "query",
            "name": "isUsed",
            "required": true,
            "type": "boolean"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "items": {
                "$ref": "#/definitions/kubernetes.K8sConfigMap"
              },
              "type": "array"
            }
          },
          "400": {
            "description": "Invalid request payload, such as missing required fields or fields not meeting validation criteria."
          },
          "401": {
            "description": "Unauthorized access - the user is not authenticated or does not have the necessary permissions. Ensure that you have provided a valid API key or JWT token, and that you have the required permissions."
          },
          "403": {
            "description": "Permission denied - the user is authenticated but does not have the necessary permissions to access the requested resource or perform the specified operation. Check your user roles and permissions."
          },
          "404": {
            "description": "Unable to find an environment with the specified identifier."
          },
          "500": {
            "description": "Server error occurred while attempting to retrieve all configmaps from the cluster."
          }
        },
        "security": [
          {
            "ApiKeyAuth": [],
            "jwt": []
          }
        ],
        "summary": "Get a list of ConfigMaps",
        "tags": [
          "kubernetes"
        ]
      }
    },
    "/kubernetes/{id}/configmaps/count": {
      "get": {
        "description": "Get the count of ConfigMaps across all namespaces in the cluster. For non-admin users, it will only return the count of ConfigMaps based on the namespaces that they have access to.\n**Access policy**: Authenticated user.",
        "operationId": "GetAllKubernetesConfigMapsCount",
        "parameters": [
          {
            "description": "Environment identifier",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "integer"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "type": "integer"
            }
          },
          "400": {
            "description": "Invalid request payload, such as missing required fields or fields not meeting validation criteria."
          },
          "401": {
            "description": "Unauthorized access - the user is not authenticated or does not have the necessary permissions. Ensure that you have provided a valid API key or JWT token, and that you have the required permissions."
          },
          "403": {
            "description": "Permission denied - the user is authenticated but does not have the necessary permissions to access the requested resource or perform the specified operation. Check your user roles and permissions."
          },
          "404": {
            "description": "Unable to find an environment with the specified identifier."
          },
          "500": {
            "description": "Server error occurred while attempting to retrieve the count of all configmaps from the cluster."
          }
        },
        "security": [
          {
            "ApiKeyAuth": [],
            "jwt": []
          }
        ],
        "summary": "Get ConfigMaps count",
        "tags": [
          "kubernetes"
        ]
      }
    },
    "/kubernetes/{id}/cron_jobs": {
      "get": {
        "description": "Get a list of kubernetes Cron Jobs that the user has access to.\n**Access policy**: Authenticated user.",
        "operationId": "GetKubernetesCronJobs",
        "parameters": [
          {
            "description": "Environment identifier",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "integer"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "items": {
                "$ref": "#/definitions/kubernetes.K8sCronJob"
              },
              "type": "array"
            }
          },
          "400": {
            "description": "Invalid request payload, such as missing required fields or fields not meeting validation criteria."
          },
          "401": {
            "description": "Unauthorized access - the user is not authenticated or does not have the necessary permissions. Ensure that you have provided a valid API key or JWT token, and that you have the required permissions."
          },
          "403": {
            "description": "Permission denied - the user is authenticated but does not have the necessary permissions to access the requested resource or perform the specified operation. Check your user roles and permissions."
          },
          "404": {
            "description": "Unable to find an environment with the specified identifier."
          },
          "500": {
            "description": "Server error occurred while attempting to retrieve the list of Cron Jobs."
          }
        },
        "security": [
          {
            "ApiKeyAuth": [],
            "jwt": []
          }
        ],
        "summary": "Get a list of kubernetes Cron Jobs",
        "tags": [
          "kubernetes"
        ]
      }
    },
    "/kubernetes/{id}/cron_jobs/delete": {
      "post": {
        "consumes": [
          "application/json"
        ],
        "description": "Delete the provided list of Cron Jobs.\n**Access policy**: Authenticated user.",
        "operationId": "DeleteCronJobs",
        "parameters": [
          {
            "description": "Environment identifier",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "integer"
          },
          {
            "description": "A map where the key is the namespace and the value is an array of Cron Jobs to delete",
            "in": "body",
            "name": "payload",
            "required": true,
            "schema": {
              "$ref": "#/definitions/kubernetes.K8sCronJobDeleteRequests"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Success"
          },
          "400": {
            "description": "Invalid request payload, such as missing required fields or fields not meeting validation criteria."
          },
          "401": {
            "description": "Unauthorized access - the user is not authenticated or does not have the necessary permissions. Ensure that you have provided a valid API key or JWT token, and that you have the required permissions."
          },
          "403": {
            "description": "Permission denied - the user is authenticated but does not have the necessary permissions to access the requested resource or perform the specified operation. Check your user roles and permissions."
          },
          "404": {
            "description": "Unable to find an environment with the specified identifier or unable to find a specific service account."
          },
          "500": {
            "description": "Server error occurred while attempting to delete Cron Jobs."
          }
        },
        "security": [
          {
            "ApiKeyAuth": [],
            "jwt": []
          }
        ],
        "summary": "Delete Cron Jobs",
        "tags": [
          "kubernetes"
        ]
      }
    },
    "/kubernetes/{id}/dashboard": {
      "get": {
        "consumes": [
          "application/json"
        ],
        "description": "Get the dashboard summary data which is simply a count of a range of different commonly used kubernetes resources.\n**Access policy**: Authenticated user.",
        "operationId": "GetKubernetesDashboard",
        "parameters": [
          {
            "description": "Environment (Endpoint) identifier",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "integer"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "items": {
                "$ref": "#/definitions/kubernetes.K8sDashboard"
              },
              "type": "array"
            }
          },
          "400": {
            "description": "Invalid request"
          },
          "500": {
            "description": "Server error"
          }
        },
        "security": [
          {
            "ApiKeyAuth": [],
            "jwt": []
          }
        ],
        "summary": "Get the dashboard summary data",
        "tags": [
          "kubernetes"
        ]
      }
    },
    "/kubernetes/{id}/ingresscontrollers": {
      "get": {
        "description": "Get a list of ingress controllers for the given environment. If the allowedOnly query parameter is set, only ingress controllers that are allowed by the environment's ingress configuration will be returned.\n**Access policy**: Authenticated user.",
        "operationId": "GetAllKubernetesIngressControllers",
        "parameters": [
          {
            "description": "Environment identifier",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "integer"
          },
          {
            "description": "Only return allowed ingress controllers",
            "in": "query",
            "name": "allowedOnly",
            "type": "boolean"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "items": {
                "$ref": "#/definitions/kubernetes.K8sIngressController"
              },
              "type": "array"
            }
          },
          "400": {
            "description": "Invalid request payload, such as missing required fields or fields not meeting validation criteria."
          },
          "401": {
            "description": "Unauthorized access - the user is not authenticated or does not have the necessary permissions. Ensure that you have provided a valid API key or JWT token, and that you have the required permissions."
          },
          "403": {
            "description": "Permission denied - the user is authenticated but does not have the necessary permissions to access the requested resource or perform the specified operation. Check your user roles and permissions."
          },
          "404": {
            "description": "Unable to find an environment with the specified identifier."
          },
          "500": {
            "description": "Server error occurred while attempting to retrieve ingress controllers"
          }
        },
        "security": [
          {
            "ApiKeyAuth": [],
            "jwt": []
          }
        ],
        "summary": "Get a list of ingress controllers",
        "tags": [
          "kubernetes"
        ]
      },
      "put": {
        "consumes": [
          "application/json"
        ],
        "description": "Update (block/unblock) ingress controllers for the provided environment.\n**Access policy**: Authenticated user.",
        "operationId": "UpdateKubernetesIngressControllers",
        "parameters": [
          {
            "description": "Environment identifier",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "integer"
          },
          {
            "description": "Ingress controllers",
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "items": {
                "$ref": "#/definitions/kubernetes.K8sIngressController"
              },
              "type": "array"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "204": {
            "description": "Success"
          },
          "400": {
            "description": "Invalid request payload, such as missing required fields or fields not meeting validation criteria."
          },
          "401": {
            "description": "Unauthorized access - the user is not authenticated or does not have the necessary permissions. Ensure that you have provided a valid API key or JWT token, and that you have the required permissions."
          },
          "403": {
            "description": "Permission denied - the user is authenticated but does not have the necessary permissions to access the requested resource or perform the specified operation. Check your user roles and permissions."
          },
          "404": {
            "description": "Unable to find an environment with the specified identifier or unable to find the ingress controllers to update."
          },
          "500": {
            "description": "Server error occurred while attempting to update ingress controllers."
          }
        },
        "security": [
          {
            "ApiKeyAuth": [],
            "jwt": []
          }
        ],
        "summary": "Update (block/unblock) ingress controllers",
        "tags": [
          "kubernetes"
        ]
      }
    },
    "/kubernetes/{id}/ingresses": {
      "get": {
        "description": "Get kubernetes ingresses at the cluster level for the provided environment.\n**Access policy**: Authenticated user.",
        "operationId": "GetAllKubernetesClusterIngresses",
        "parameters": [
          {
            "description": "Environment identifier",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "integer"
          },
          {
            "description": "Lookup services associated with each ingress",
            "in": "query",
            "name": "withServices",
            "type": "boolean"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "items": {
                "$ref": "#/definitions/kubernetes.K8sIngressInfo"
              },
              "type": "array"
            }
          },
          "400": {
            "description": "Invalid request payload, such as missing required fields or fields not meeting validation criteria."
          },
          "401": {
            "description": "Unauthorized access - the user is not authenticated or does not have the necessary permissions. Ensure that you have provided a valid API key or JWT token, and that you have the required permissions."
          },
          "403": {
            "description": "Permission denied - the user is authenticated but does not have the necessary permissions to access the requested resource or perform the specified operation. Check your user roles and permissions."
          },
          "404": {
            "description": "Unable to find an environment with the specified identifier."
          },
          "500": {
            "description": "Server error occurred while attempting to retrieve ingresses."
          }
        },
        "security": [
          {
            "ApiKeyAuth": [],
            "jwt": []
          }
        ],
        "summary": "Get kubernetes ingresses at the cluster level",
        "tags": [
          "kubernetes"
        ]
      }
    },
    "/kubernetes/{id}/ingresses/count": {
      "get": {
        "description": "Get the number of kubernetes ingresses within the given environment.\n**Access policy**: Authenticated user.",
        "operationId": "GetAllKubernetesClusterIngressesCount",
        "parameters": [
          {
            "description": "Environment identifier",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "integer"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "type": "integer"
            }
          },
          "400": {
            "description": "Invalid request payload, such as missing required fields or fields not meeting validation criteria."
          },
          "401": {
            "description": "Unauthorized access - the user is not authenticated or does not have the necessary permissions. Ensure that you have provided a valid API key or JWT token, and that you have the required permissions."
          },
          "403": {
            "description": "Permission denied - the user is authenticated but does not have the necessary permissions to access the requested resource or perform the specified operation. Check your user roles and permissions."
          },
          "404": {
            "description": "Unable to find an environment with the specified identifier."
          },
          "500": {
            "description": "Server error occurred while attempting to retrieve ingresses count."
          }
        },
        "security": [
          {
            "ApiKeyAuth": [],
            "jwt": []
          }
        ],
        "summary": "Get Ingresses count",
        "tags": [
          "kubernetes"
        ]
      }
    },
    "/kubernetes/{id}/ingresses/delete": {
      "post": {
        "consumes": [
          "application/json"
        ],
        "description": "Delete one or more Ingresses in the provided environment.\n**Access policy**: Authenticated user.",
        "operationId": "DeleteKubernetesIngresses",
        "parameters": [
          {
            "description": "Environment identifier",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "integer"
          },
          {
            "description": "Ingress details",
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/kubernetes.K8sIngressDeleteRequests"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "204": {
            "description": "Success"
          },
          "400": {
            "description": "Invalid request payload, such as missing required fields or fields not meeting validation criteria."
          },
          "401": {
            "description": "Unauthorized access - the user is not authenticated or does not have the necessary permissions. Ensure that you have provided a valid API key or JWT token, and that you have the required permissions."
          },
          "403": {
            "description": "Permission denied - the user is authenticated but does not have the necessary permissions to access the requested resource or perform the specified operation. Check your user roles and permissions."
          },
          "404": {
            "description": "Unable to find an environment with the specified identifier or unable to find a specific ingress."
          },
          "500": {
            "description": "Server error occurred while attempting to delete specified ingresses."
          }
        },
        "security": [
          {
            "ApiKeyAuth": [],
            "jwt": []
          }
        ],
        "summary": "Delete one or more Ingresses",
        "tags": [
          "kubernetes"
        ]
      }
    },
    "/kubernetes/{id}/jobs": {
      "get": {
        "description": "Get a list of kubernetes Jobs that the user has access to.\n**Access policy**: Authenticated user.",
        "operationId": "GetKubernetesJobs",
        "parameters": [
          {
            "description": "Environment identifier",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "integer"
          },
          {
            "description": "Whether to include Jobs that have a cronjob owner",
            "in": "query",
            "name": "includeCronJobChildren",
            "type": "boolean"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "items": {
                "$ref": "#/definitions/kubernetes.K8sJob"
              },
              "type": "array"
            }
          },
          "400": {
            "description": "Invalid request payload, such as missing required fields or fields not meeting validation criteria."
          },
          "401": {
            "description": "Unauthorized access - the user is not authenticated or does not have the necessary permissions. Ensure that you have provided a valid API key or JWT token, and that you have the required permissions."
          },
          "403": {
            "description": "Permission denied - the user is authenticated but does not have the necessary permissions to access the requested resource or perform the specified operation. Check your user roles and permissions."
          },
          "404": {
            "description": "Unable to find an environment with the specified identifier."
          },
          "500": {
            "description": "Server error occurred while attempting to retrieve the list of Jobs."
          }
        },
        "security": [
          {
            "ApiKeyAuth": [],
            "jwt": []
          }
        ],
        "summary": "Get a list of kubernetes Jobs",
        "tags": [
          "kubernetes"
        ]
      }
    },
    "/kubernetes/{id}/jobs/delete": {
      "post": {
        "consumes": [
          "application/json"
        ],
        "description": "Delete the provided list of Jobs.\n**Access policy**: Authenticated user.",
        "operationId": "DeleteJobs",
        "parameters": [
          {
            "description": "Environment identifier",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "integer"
          },
          {
            "description": "A map where the key is the namespace and the value is an array of Jobs to delete",
            "in": "body",
            "name": "payload",
            "required": true,
            "schema": {
              "$ref": "#/definitions/kubernetes.K8sJobDeleteRequests"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Success"
          },
          "400": {
            "description": "Invalid request payload, such as missing required fields or fields not meeting validation criteria."
          },
          "401": {
            "description": "Unauthorized access - the user is not authenticated or does not have the necessary permissions. Ensure that you have provided a valid API key or JWT token, and that you have the required permissions."
          },
          "403": {
            "description": "Permission denied - the user is authenticated but does not have the necessary permissions to access the requested resource or perform the specified operation. Check your user roles and permissions."
          },
          "404": {
            "description": "Unable to find an environment with the specified identifier or unable to find a specific service account."
          },
          "500": {
            "description": "Server error occurred while attempting to delete Jobs."
          }
        },
        "security": [
          {
            "ApiKeyAuth": [],
            "jwt": []
          }
        ],
        "summary": "Delete Jobs",
        "tags": [
          "kubernetes"
        ]
      }
    },
    "/kubernetes/{id}/max_resource_limits": {
      "get": {
        "description": "Get max CPU and memory limits (unused resources) of all nodes within k8s cluster.\n**Access policy**: Authenticated user.",
        "operationId": "GetKubernetesMaxResourceLimits",
        "parameters": [
          {
            "description": "Environment(Endpoint) identifier",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "integer"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/portainer.K8sNodesLimits"
            }
          },
          "400": {
            "description": "Invalid request"
          },
          "401": {
            "description": "Unauthorized access - the user is not authenticated or does not have the necessary permissions. Ensure that you have provided a valid API key or JWT token, and that you have the required permissions."
          },
          "403": {
            "description": "Permission denied - the user is authenticated but does not have the necessary permissions to access the requested resource or perform the specified operation. Check your user roles and permissions."
          },
          "404": {
            "description": "Unable to find an environment with the specified identifier."
          },
          "500": {
            "description": "Server error occurred while attempting to retrieve nodes limits."
          }
        },
        "security": [
          {
            "ApiKeyAuth": [],
            "jwt": []
          }
        ],
        "summary": "Get max CPU and memory limits of all nodes within k8s cluster",
        "tags": [
          "kubernetes"
        ]
      }
    },
    "/kubernetes/{id}/metrics/applications_resources": {
      "get": {
        "description": "Get the total CPU (cores) and memory (bytes) requests and limits of all applications across all namespaces.\n**Access policy**: Authenticated user.",
        "operationId": "GetApplicationsResources",
        "parameters": [
          {
            "description": "Environment(Endpoint) identifier",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "integer"
          },
          {
            "description": "Node name",
            "in": "query",
            "name": "node",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/kubernetes.K8sApplicationResource"
            }
          },
          "400": {
            "description": "Invalid request payload, such as missing required fields or fields not meeting validation criteria."
          },
          "401": {
            "description": "Unauthorized access - the user is not authenticated or does not have the necessary permissions. Ensure that you have provided a valid API key or JWT token, and that you have the required permissions."
          },
          "403": {
            "description": "Permission denied - the user is authenticated but does not have the necessary permissions to access the requested resource or perform the specified operation. Check your user roles and permissions."
          },
          "404": {
            "description": "Unable to find an environment with the specified identifier."
          },
          "500": {
            "description": "Server error occurred while attempting to retrieve the total resource requests and limits for all applications from the cluster."
          }
        },
        "security": [
          {
            "ApiKeyAuth": [],
            "jwt": []
          }
        ],
        "summary": "Get the total resource requests and limits of all applications",
        "tags": [
          "kubernetes"
        ]
      }
    },
    "/kubernetes/{id}/metrics/nodes": {
      "get": {
        "description": "Get a list of metrics associated with all nodes of a cluster.\n**Access policy**: Authenticated user.",
        "operationId": "GetKubernetesMetricsForAllNodes",
        "parameters": [
          {
            "description": "Environment identifier",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "integer"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/v1beta1.NodeMetricsList"
            }
          },
          "401": {
            "description": "Unauthorized access - the user is not authenticated or does not have the necessary permissions. Ensure that you have provided a valid API key or JWT token, and that you have the required permissions."
          },
          "500": {
            "description": "Server error occurred while attempting to retrieve the list of nodes with their live metrics."
          }
        },
        "security": [
          {
            "ApiKeyAuth": [],
            "jwt": []
          }
        ],
        "summary": "Get a list of nodes with their live metrics",
        "tags": [
          "kubernetes"
        ]
      }
    },
    "/kubernetes/{id}/metrics/nodes/{name}": {
      "get": {
        "description": "Get live metrics for the specified node.\n**Access policy**: Authenticated user.",
        "operationId": "GetKubernetesMetricsForNode",
        "parameters": [
          {
            "description": "Environment identifier",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "integer"
          },
          {
            "description": "Node identifier",
            "in": "path",
            "name": "name",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/v1beta1.NodeMetrics"
            }
          },
          "400": {
            "description": "Invalid request payload, such as missing required fields or fields not meeting validation criteria."
          },
          "401": {
            "description": "Unauthorized access - the user is not authenticated or does not have the necessary permissions. Ensure that you have provided a valid API key or JWT token, and that you have the required permissions."
          },
          "500": {
            "description": "Server error occurred while attempting to retrieve the live metrics for the specified node."
          }
        },
        "security": [
          {
            "ApiKeyAuth": [],
            "jwt": []
          }
        ],
        "summary": "Get live metrics for a node",
        "tags": [
          "kubernetes"
        ]
      }
    },
    "/kubernetes/{id}/metrics/pods/{namespace}": {
      "get": {
        "description": "Get a list of pods with their live metrics for the specified namespace.\n**Access policy**: Authenticated user.",
        "operationId": "GetKubernetesMetricsForAllPods",
        "parameters": [
          {
            "description": "Environment identifier",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "integer"
          },
          {
            "description": "Namespace",
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/v1beta1.PodMetricsList"
            }
          },
          "400": {
            "description": "Invalid request payload, such as missing required fields or fields not meeting validation criteria."
          },
          "401": {
            "description": "Unauthorized access - the user is not authenticated or does not have the necessary permissions. Ensure that you have provided a valid API key or JWT token, and that you have the required permissions."
          },
          "500": {
            "description": "Server error occurred while attempting to retrieve the list of pods with their live metrics."
          }
        },
        "security": [
          {
            "ApiKeyAuth": [],
            "jwt": []
          }
        ],
        "summary": "Get a list of pods with their live metrics",
        "tags": [
          "kubernetes"
        ]
      }
    },
    "/kubernetes/{id}/metrics/pods/{namespace}/{name}": {
      "get": {
        "description": "Get live metrics for the specified pod.\n**Access policy**: Authenticated user.",
        "operationId": "GetKubernetesMetricsForPod",
        "parameters": [
          {
            "description": "Environment identifier",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "integer"
          },
          {
            "description": "Namespace",
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          },
          {
            "description": "Pod identifier",
            "in": "path",
            "name": "name",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/v1beta1.PodMetrics"
            }
          },
          "400": {
            "description": "Invalid request payload, such as missing required fields or fields not meeting validation criteria."
          },
          "401": {
            "description": "Unauthorized access - the user is not authenticated or does not have the necessary permissions. Ensure that you have provided a valid API key or JWT token, and that you have the required permissions."
          },
          "500": {
            "description": "Server error occurred while attempting to retrieve the live metrics for the specified pod."
          }
        },
        "security": [
          {
            "ApiKeyAuth": [],
            "jwt": []
          }
        ],
        "summary": "Get live metrics for a pod",
        "tags": [
          "kubernetes"
        ]
      }
    },
    "/kubernetes/{id}/namespaces": {
      "delete": {
        "description": "Delete a kubernetes namespace within the given environment.\n**Access policy**: Authenticated user.",
        "operationId": "DeleteKubernetesNamespace",
        "parameters": [
          {
            "description": "Environment identifier",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "type": "string"
            }
          },
          "400": {
            "description": "Invalid request payload, such as missing required fields or fields not meeting validation criteria."
          },
          "403": {
            "description": "Unauthorized access or operation not allowed."
          },
          "500": {
            "description": "Server error occurred while attempting to delete the namespace."
          }
        },
        "security": [
          {
            "ApiKeyAuth": [],
            "jwt": []
          }
        ],
        "summary": "Delete a kubernetes namespace",
        "tags": [
          "kubernetes"
        ]
      },
      "get": {
        "description": "Get a list of all namespaces within the given environment based on the user role and permissions. If the user is an admin, they can access all namespaces. If the user is not an admin, they can only access namespaces that they have access to.\n**Access policy**: Authenticated user.",
        "operationId": "GetKubernetesNamespaces",
        "parameters": [
          {
            "description": "Environment identifier",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "integer"
          },
          {
            "description": "When set to true, include the resource quota information as part of the Namespace information. Default is false",
            "in": "query",
            "name": "withResourceQuota",
            "required": true,
            "type": "boolean"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "items": {
                "$ref": "#/definitions/portainer.K8sNamespaceInfo"
              },
              "type": "array"
            }
          },
          "400": {
            "description": "Invalid request payload, such as missing required fields or fields not meeting validation criteria."
          },
          "401": {
            "description": "Unauthorized access - the user is not authenticated or does not have the necessary permissions. Ensure that you have provided a valid API key or JWT token, and that you have the required permissions."
          },
          "403": {
            "description": "Permission denied - the user is authenticated but does not have the necessary permissions to access the requested resource or perform the specified operation. Check your user roles and permissions."
          },
          "404": {
            "description": "Unable to find an environment with the specified identifier."
          },
          "500": {
            "description": "Server error occurred while attempting to retrieve the list of namespaces."
          }
        },
        "security": [
          {
            "ApiKeyAuth": [],
            "jwt": []
          }
        ],
        "summary": "Get a list of namespaces",
        "tags": [
          "kubernetes"
        ]
      },
      "post": {
        "consumes": [
          "application/json"
        ],
        "description": "Create a namespace within the given environment.\n**Access policy**: Authenticated user.",
        "operationId": "CreateKubernetesNamespace",
        "parameters": [
          {
            "description": "Environment identifier",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "integer"
          },
          {
            "description": "Namespace configuration details",
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/kubernetes.K8sNamespaceDetails"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/portainer.K8sNamespaceInfo"
            }
          },
          "400": {
            "description": "Invalid request payload, such as missing required fields or fields not meeting validation criteria."
          },
          "401": {
            "description": "Unauthorized access - the user is not authenticated or does not have the necessary permissions. Ensure that you have provided a valid API key or JWT token, and that you have the required permissions."
          },
          "403": {
            "description": "Permission denied - the user is authenticated but does not have the necessary permissions to access the requested resource or perform the specified operation. Check your user roles and permissions."
          },
          "409": {
            "description": "Conflict - the namespace already exists."
          },
          "500": {
            "description": "Server error occurred while attempting to create the namespace."
          }
        },
        "security": [
          {
            "ApiKeyAuth": [],
            "jwt": []
          }
        ],
        "summary": "Create a namespace",
        "tags": [
          "kubernetes"
        ]
      },
      "put": {
        "consumes": [
          "application/json"
        ],
        "description": "Update a namespace within the given environment.\n**Access policy**: Authenticated user.",
        "operationId": "UpdateKubernetesNamespaceDeprecated",
        "parameters": [
          {
            "description": "Environment identifier",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "integer"
          },
          {
            "description": "Namespace",
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          },
          {
            "description": "Namespace details",
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/kubernetes.K8sNamespaceDetails"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/portainer.K8sNamespaceInfo"
            }
          },
          "400": {
            "description": "Invalid request payload, such as missing required fields or fields not meeting validation criteria."
          },
          "401": {
            "description": "Unauthorized access - the user is not authenticated or does not have the necessary permissions. Ensure that you have provided a valid API key or JWT token, and that you have the required permissions."
          },
          "403": {
            "description": "Permission denied - the user is authenticated but does not have the necessary permissions to access the requested resource or perform the specified operation. Check your user roles and permissions."
          },
          "404": {
            "description": "Unable to find an environment with the specified identifier or unable to find a specific namespace."
          },
          "500": {
            "description": "Server error occurred while attempting to update the namespace."
          }
        },
        "security": [
          {
            "ApiKeyAuth": [],
            "jwt": []
          }
        ],
        "summary": "Update a namespace",
        "tags": [
          "kubernetes"
        ]
      }
    },
    "/kubernetes/{id}/namespaces/{namespace}": {
      "get": {
        "description": "Get namespace details for the provided namespace within the given environment.\n**Access policy**: Authenticated user.",
        "operationId": "GetKubernetesNamespace",
        "parameters": [
          {
            "description": "Environment identifier",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "integer"
          },
          {
            "description": "The namespace name to get details for",
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          },
          {
            "description": "When set to true, include the resource quota information as part of the Namespace information. Default is false",
            "in": "query",
            "name": "withResourceQuota",
            "required": true,
            "type": "boolean"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/portainer.K8sNamespaceInfo"
            }
          },
          "400": {
            "description": "Invalid request payload, such as missing required fields or fields not meeting validation criteria."
          },
          "401": {
            "description": "Unauthorized access - the user is not authenticated or does not have the necessary permissions. Ensure that you have provided a valid API key or JWT token, and that you have the required permissions."
          },
          "403": {
            "description": "Permission denied - the user is authenticated but does not have the necessary permissions to access the requested resource or perform the specified operation. Check your user roles and permissions."
          },
          "404": {
            "description": "Unable to find an environment with the specified identifier or unable to find a specific namespace."
          },
          "500": {
            "description": "Server error occurred while attempting to retrieve specified namespace information."
          }
        },
        "security": [
          {
            "ApiKeyAuth": [],
            "jwt": []
          }
        ],
        "summary": "Get namespace details",
        "tags": [
          "kubernetes"
        ]
      },
      "put": {
        "consumes": [
          "application/json"
        ],
        "description": "Update a namespace within the given environment.\n**Access policy**: Authenticated user.",
        "operationId": "UpdateKubernetesNamespace",
        "parameters": [
          {
            "description": "Environment identifier",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "integer"
          },
          {
            "description": "Namespace",
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          },
          {
            "description": "Namespace details",
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/kubernetes.K8sNamespaceDetails"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/portainer.K8sNamespaceInfo"
            }
          },
          "400": {
            "description": "Invalid request payload, such as missing required fields or fields not meeting validation criteria."
          },
          "401": {
            "description": "Unauthorized access - the user is not authenticated or does not have the necessary permissions. Ensure that you have provided a valid API key or JWT token, and that you have the required permissions."
          },
          "403": {
            "description": "Permission denied - the user is authenticated but does not have the necessary permissions to access the requested resource or perform the specified operation. Check your user roles and permissions."
          },
          "404": {
            "description": "Unable to find an environment with the specified identifier or unable to find a specific namespace."
          },
          "500": {
            "description": "Server error occurred while attempting to update the namespace."
          }
        },
        "security": [
          {
            "ApiKeyAuth": [],
            "jwt": []
          }
        ],
        "summary": "Update a namespace",
        "tags": [
          "kubernetes"
        ]
      }
    },
    "/kubernetes/{id}/namespaces/{namespace}/configmaps/{configmap}": {
      "get": {
        "description": "Get a ConfigMap by name for a given namespace.\n**Access policy**: Authenticated user.",
        "operationId": "GetKubernetesConfigMap",
        "parameters": [
          {
            "description": "Environment identifier",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "integer"
          },
          {
            "description": "The namespace name where the configmap is located",
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          },
          {
            "description": "The configmap name to get details for",
            "in": "path",
            "name": "configmap",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/kubernetes.K8sConfigMap"
            }
          },
          "400": {
            "description": "Invalid request payload, such as missing required fields or fields not meeting validation criteria."
          },
          "401": {
            "description": "Unauthorized access - the user is not authenticated or does not have the necessary permissions. Ensure that you have provided a valid API key or JWT token, and that you have the required permissions."
          },
          "403": {
            "description": "Permission denied - the user is authenticated but does not have the necessary permissions to access the requested resource or perform the specified operation. Check your user roles and permissions."
          },
          "404": {
            "description": "Unable to find an environment with the specified identifier or a configmap with the specified name in the given namespace."
          },
          "500": {
            "description": "Server error occurred while attempting to retrieve a configmap by name within the specified namespace."
          }
        },
        "security": [
          {
            "ApiKeyAuth": [],
            "jwt": []
          }
        ],
        "summary": "Get a ConfigMap",
        "tags": [
          "kubernetes"
        ]
      }
    },
    "/kubernetes/{id}/namespaces/{namespace}/ingresscontrollers": {
      "get": {
        "description": "Get a list of ingress controllers for the given environment in the provided namespace.\n**Access policy**: Authenticated user.",
        "operationId": "GetKubernetesIngressControllersByNamespace",
        "parameters": [
          {
            "description": "Environment identifier",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "integer"
          },
          {
            "description": "Namespace",
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "items": {
                "$ref": "#/definitions/kubernetes.K8sIngressController"
              },
              "type": "array"
            }
          },
          "400": {
            "description": "Invalid request payload, such as missing required fields or fields not meeting validation criteria."
          },
          "401": {
            "description": "Unauthorized access - the user is not authenticated or does not have the necessary permissions. Ensure that you have provided a valid API key or JWT token, and that you have the required permissions."
          },
          "403": {
            "description": "Permission denied - the user is authenticated but does not have the necessary permissions to access the requested resource or perform the specified operation. Check your user roles and permissions."
          },
          "404": {
            "description": "Unable to find an environment with the specified identifier or a namespace with the specified name."
          },
          "500": {
            "description": "Server error occurred while attempting to retrieve ingress controllers by a namespace"
          }
        },
        "security": [
          {
            "ApiKeyAuth": [],
            "jwt": []
          }
        ],
        "summary": "Get a list ingress controllers by namespace",
        "tags": [
          "kubernetes"
        ]
      },
      "put": {
        "consumes": [
          "application/json"
        ],
        "description": "Update (block/unblock) ingress controllers by namespace for the provided environment.\n**Access policy**: Authenticated user.",
        "operationId": "UpdateKubernetesIngressControllersByNamespace",
        "parameters": [
          {
            "description": "Environment identifier",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "integer"
          },
          {
            "description": "Namespace name",
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          },
          {
            "description": "Ingress controllers",
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "items": {
                "$ref": "#/definitions/kubernetes.K8sIngressController"
              },
              "type": "array"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "204": {
            "description": "Success"
          },
          "400": {
            "description": "Invalid request payload, such as missing required fields or fields not meeting validation criteria."
          },
          "401": {
            "description": "Unauthorized access - the user is not authenticated or does not have the necessary permissions. Ensure that you have provided a valid API key or JWT token, and that you have the required permissions."
          },
          "403": {
            "description": "Permission denied - the user is authenticated but does not have the necessary permissions to access the requested resource or perform the specified operation. Check your user roles and permissions."
          },
          "404": {
            "description": "Unable to find an environment with the specified identifier."
          },
          "500": {
            "description": "Server error occurred while attempting to update ingress controllers by namespace."
          }
        },
        "security": [
          {
            "ApiKeyAuth": [],
            "jwt": []
          }
        ],
        "summary": "Update (block/unblock) ingress controllers by namespace",
        "tags": [
          "kubernetes"
        ]
      }
    },
    "/kubernetes/{id}/namespaces/{namespace}/ingresses": {
      "get": {
        "description": "Get a list of Ingresses. If namespace is provided, it will return the list of Ingresses in that namespace.\n**Access policy**: Authenticated user.",
        "operationId": "GetAllKubernetesIngresses",
        "parameters": [
          {
            "description": "Environment identifier",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "integer"
          },
          {
            "description": "Namespace name",
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "items": {
                "$ref": "#/definitions/kubernetes.K8sIngressInfo"
              },
              "type": "array"
            }
          },
          "400": {
            "description": "Invalid request payload, such as missing required fields or fields not meeting validation criteria."
          },
          "401": {
            "description": "Unauthorized access - the user is not authenticated or does not have the necessary permissions. Ensure that you have provided a valid API key or JWT token, and that you have the required permissions."
          },
          "403": {
            "description": "Permission denied - the user is authenticated but does not have the necessary permissions to access the requested resource or perform the specified operation. Check your user roles and permissions."
          },
          "404": {
            "description": "Unable to find an environment with the specified identifier."
          },
          "500": {
            "description": "Server error occurred while attempting to retrieve ingresses"
          }
        },
        "security": [
          {
            "ApiKeyAuth": [],
            "jwt": []
          }
        ],
        "summary": "Get a list of Ingresses",
        "tags": [
          "kubernetes"
        ]
      },
      "post": {
        "consumes": [
          "application/json"
        ],
        "description": "Create an Ingress for the provided environment.\n**Access policy**: Authenticated user.",
        "operationId": "CreateKubernetesIngress",
        "parameters": [
          {
            "description": "Environment identifier",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "integer"
          },
          {
            "description": "Namespace name",
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          },
          {
            "description": "Ingress details",
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/kubernetes.K8sIngressInfo"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "204": {
            "description": "Success"
          },
          "400": {
            "description": "Invalid request payload, such as missing required fields or fields not meeting validation criteria."
          },
          "401": {
            "description": "Unauthorized access - the user is not authenticated or does not have the necessary permissions. Ensure that you have provided a valid API key or JWT token, and that you have the required permissions."
          },
          "403": {
            "description": "Permission denied - the user is authenticated but does not have the necessary permissions to access the requested resource or perform the specified operation. Check your user roles and permissions."
          },
          "404": {
            "description": "Unable to find an environment with the specified identifier."
          },
          "409": {
            "description": "Conflict - an ingress with the same name already exists in the specified namespace."
          },
          "500": {
            "description": "Server error occurred while attempting to create an ingress."
          }
        },
        "security": [
          {
            "ApiKeyAuth": [],
            "jwt": []
          }
        ],
        "summary": "Create an Ingress",
        "tags": [
          "kubernetes"
        ]
      },
      "put": {
        "consumes": [
          "application/json"
        ],
        "description": "Update an Ingress for the provided environment.\n**Access policy**: Authenticated user.",
        "operationId": "UpdateKubernetesIngress",
        "parameters": [
          {
            "description": "Environment identifier",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "integer"
          },
          {
            "description": "Namespace name",
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          },
          {
            "description": "Ingress details",
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/kubernetes.K8sIngressInfo"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "204": {
            "description": "Success"
          },
          "400": {
            "description": "Invalid request payload, such as missing required fields or fields not meeting validation criteria."
          },
          "401": {
            "description": "Unauthorized access - the user is not authenticated or does not have the necessary permissions. Ensure that you have provided a valid API key or JWT token, and that you have the required permissions."
          },
          "403": {
            "description": "Permission denied - the user is authenticated but does not have the necessary permissions to access the requested resource or perform the specified operation. Check your user roles and permissions."
          },
          "404": {
            "description": "Unable to find an environment with the specified identifier or unable to find the specified ingress."
          },
          "500": {
            "description": "Server error occurred while attempting to update the specified ingress."
          }
        },
        "security": [
          {
            "ApiKeyAuth": [],
            "jwt": []
          }
        ],
        "summary": "Update an Ingress",
        "tags": [
          "kubernetes"
        ]
      }
    },
    "/kubernetes/{id}/namespaces/{namespace}/ingresses/{ingress}": {
      "get": {
        "description": "Get an Ingress by name for the provided environment.\n**Access policy**: Authenticated user.",
        "operationId": "GetKubernetesIngress",
        "parameters": [
          {
            "description": "Environment identifier",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "integer"
          },
          {
            "description": "Namespace name",
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          },
          {
            "description": "Ingress name",
            "in": "path",
            "name": "ingress",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/kubernetes.K8sIngressInfo"
            }
          },
          "400": {
            "description": "Invalid request payload, such as missing required fields or fields not meeting validation criteria."
          },
          "401": {
            "description": "Unauthorized access - the user is not authenticated or does not have the necessary permissions. Ensure that you have provided a valid API key or JWT token, and that you have the required permissions."
          },
          "403": {
            "description": "Permission denied - the user is authenticated but does not have the necessary permissions to access the requested resource or perform the specified operation. Check your user roles and permissions."
          },
          "404": {
            "description": "Unable to find an environment with the specified identifier or unable to find an ingress with the specified name."
          },
          "500": {
            "description": "Server error occurred while attempting to retrieve an ingress."
          }
        },
        "security": [
          {
            "ApiKeyAuth": [],
            "jwt": []
          }
        ],
        "summary": "Get an Ingress by name",
        "tags": [
          "kubernetes"
        ]
      }
    },
    "/kubernetes/{id}/namespaces/{namespace}/secrets/{secret}": {
      "get": {
        "description": "Get a Secret by name for a given namespace.\n**Access policy**: Authenticated user.",
        "operationId": "GetKubernetesSecret",
        "parameters": [
          {
            "description": "Environment identifier",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "integer"
          },
          {
            "description": "The namespace name where the secret is located",
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          },
          {
            "description": "The secret name to get details for",
            "in": "path",
            "name": "secret",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/kubernetes.K8sSecret"
            }
          },
          "400": {
            "description": "Invalid request payload, such as missing required fields or fields not meeting validation criteria."
          },
          "401": {
            "description": "Unauthorized access - the user is not authenticated or does not have the necessary permissions. Ensure that you have provided a valid API key or JWT token, and that you have the required permissions."
          },
          "403": {
            "description": "Permission denied - the user is authenticated but does not have the necessary permissions to access the requested resource or perform the specified operation. Check your user roles and permissions."
          },
          "404": {
            "description": "Unable to find an environment with the specified identifier."
          },
          "500": {
            "description": "Server error occurred while attempting to retrieve a secret by name belong in a namespace."
          }
        },
        "security": [
          {
            "ApiKeyAuth": [],
            "jwt": []
          }
        ],
        "summary": "Get a Secret",
        "tags": [
          "kubernetes"
        ]
      }
    },
    "/kubernetes/{id}/namespaces/{namespace}/services": {
      "get": {
        "description": "Get a list of services for a given namespace.\n**Access policy**: Authenticated user.",
        "operationId": "GetKubernetesServicesByNamespace",
        "parameters": [
          {
            "description": "Environment identifier",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "integer"
          },
          {
            "description": "Namespace name",
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "items": {
                "$ref": "#/definitions/kubernetes.K8sServiceInfo"
              },
              "type": "array"
            }
          },
          "400": {
            "description": "Invalid request payload, such as missing required fields or fields not meeting validation criteria."
          },
          "401": {
            "description": "Unauthorized access - the user is not authenticated or does not have the necessary permissions. Ensure that you have provided a valid API key or JWT token, and that you have the required permissions."
          },
          "403": {
            "description": "Permission denied - the user is authenticated but does not have the necessary permissions to access the requested resource or perform the specified operation. Check your user roles and permissions."
          },
          "404": {
            "description": "Unable to find an environment with the specified identifier."
          },
          "500": {
            "description": "Server error occurred while attempting to retrieve all services for a namespace."
          }
        },
        "security": [
          {
            "ApiKeyAuth": [],
            "jwt": []
          }
        ],
        "summary": "Get a list of services for a given namespace",
        "tags": [
          "kubernetes"
        ]
      },
      "post": {
        "consumes": [
          "application/json"
        ],
        "description": "Create a service within a given namespace\n**Access policy**: Authenticated user.",
        "operationId": "CreateKubernetesService",
        "parameters": [
          {
            "description": "Environment identifier",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "integer"
          },
          {
            "description": "Namespace name",
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          },
          {
            "description": "Service definition",
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/kubernetes.K8sServiceInfo"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "204": {
            "description": "Success"
          },
          "400": {
            "description": "Invalid request payload, such as missing required fields or fields not meeting validation criteria."
          },
          "401": {
            "description": "Unauthorized access - the user is not authenticated or does not have the necessary permissions. Ensure that you have provided a valid API key or JWT token, and that you have the required permissions."
          },
          "403": {
            "description": "Permission denied - the user is authenticated but does not have the necessary permissions to access the requested resource or perform the specified operation. Check your user roles and permissions."
          },
          "404": {
            "description": "Unable to find an environment with the specified identifier."
          },
          "500": {
            "description": "Server error occurred while attempting to create a service."
          }
        },
        "security": [
          {
            "ApiKeyAuth": [],
            "jwt": []
          }
        ],
        "summary": "Create a service",
        "tags": [
          "kubernetes"
        ]
      },
      "put": {
        "consumes": [
          "application/json"
        ],
        "description": "Update a service within a given namespace.\n**Access policy**: Authenticated user.",
        "operationId": "UpdateKubernetesService",
        "parameters": [
          {
            "description": "Environment identifier",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "integer"
          },
          {
            "description": "Namespace name",
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          },
          {
            "description": "Service definition",
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/kubernetes.K8sServiceInfo"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "204": {
            "description": "Success"
          },
          "400": {
            "description": "Invalid request payload, such as missing required fields or fields not meeting validation criteria."
          },
          "401": {
            "description": "Unauthorized access - the user is not authenticated or does not have the necessary permissions. Ensure that you have provided a valid API key or JWT token, and that you have the required permissions."
          },
          "403": {
            "description": "Permission denied - the user is authenticated but does not have the necessary permissions to access the requested resource or perform the specified operation. Check your user roles and permissions."
          },
          "404": {
            "description": "Unable to find an environment with the specified identifier or unable to find the service to update."
          },
          "500": {
            "description": "Server error occurred while attempting to update a service."
          }
        },
        "security": [
          {
            "ApiKeyAuth": [],
            "jwt": []
          }
        ],
        "summary": "Update a service",
        "tags": [
          "kubernetes"
        ]
      }
    },
    "/kubernetes/{id}/namespaces/{namespace}/system": {
      "put": {
        "consumes": [
          "application/json"
        ],
        "description": "Toggle the system state for a namespace\n**Access policy**: Administrator or environment administrator.",
        "operationId": "KubernetesNamespacesToggleSystem",
        "parameters": [
          {
            "description": "Environment identifier",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "integer"
          },
          {
            "description": "Namespace name",
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          },
          {
            "description": "Update details",
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/kubernetes.namespacesToggleSystemPayload"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Success"
          },
          "400": {
            "description": "Invalid request payload, such as missing required fields or fields not meeting validation criteria."
          },
          "401": {
            "description": "Unauthorized access - the user is not authenticated or does not have the necessary permissions. Ensure that you have provided a valid API key or JWT token, and that you have the required permissions."
          },
          "403": {
            "description": "Permission denied - the user is authenticated but does not have the necessary permissions to access the requested resource or perform the specified operation. Check your user roles and permissions."
          },
          "404": {
            "description": "Unable to find an environment with the specified identifier or unable to find the namespace to update."
          },
          "500": {
            "description": "Server error occurred while attempting to update the system state of the namespace."
          }
        },
        "security": [
          {
            "ApiKeyAuth": [],
            "jwt": []
          }
        ],
        "summary": "Toggle the system state for a namespace",
        "tags": [
          "kubernetes"
        ]
      }
    },
    "/kubernetes/{id}/namespaces/{namespace}/volumes": {
      "get": {
        "description": "Get a list of kubernetes volumes within the specified namespace in the given environment (Endpoint). The Endpoint ID must be a valid Portainer environment identifier.\n**Access policy**: Authenticated user.",
        "operationId": "GetKubernetesVolumesInNamespace",
        "parameters": [
          {
            "description": "Environment identifier",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "integer"
          },
          {
            "description": "Namespace identifier",
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          },
          {
            "description": "When set to True, include the applications that are using the volumes. It is set to false by default",
            "in": "query",
            "name": "withApplications",
            "type": "boolean"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "additionalProperties": {
                "$ref": "#/definitions/kubernetes.K8sVolumeInfo"
              },
              "type": "object"
            }
          },
          "400": {
            "description": "Invalid request payload, such as missing required fields or fields not meeting validation criteria."
          },
          "403": {
            "description": "Unauthorized access or operation not allowed."
          },
          "500": {
            "description": "Server error occurred while attempting to retrieve kubernetes volumes in the namespace."
          }
        },
        "security": [
          {
            "ApiKeyAuth": [],
            "jwt": []
          }
        ],
        "summary": "Get Kubernetes volumes within a namespace in the given Portainer environment",
        "tags": [
          "kubernetes"
        ]
      }
    },
    "/kubernetes/{id}/namespaces/count": {
      "get": {
        "description": "Get the total number of kubernetes namespaces within the given environment, including the system namespaces. The total count depends on the user's role and permissions.\n**Access policy**: Authenticated user.",
        "operationId": "GetKubernetesNamespacesCount",
        "parameters": [
          {
            "description": "Environment identifier",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "integer"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "type": "integer"
            }
          },
          "400": {
            "description": "Invalid request payload, such as missing required fields or fields not meeting validation criteria."
          },
          "401": {
            "description": "Unauthorized access - the user is not authenticated or does not have the necessary permissions. Ensure that you have provided a valid API key or JWT token, and that you have the required permissions."
          },
          "403": {
            "description": "Permission denied - the user is authenticated but does not have the necessary permissions to access the requested resource or perform the specified operation. Check your user roles and permissions."
          },
          "404": {
            "description": "Unable to find an environment with the specified identifier."
          },
          "500": {
            "description": "Server error occurred while attempting to compute the namespace count."
          }
        },
        "security": [
          {
            "ApiKeyAuth": [],
            "jwt": []
          }
        ],
        "summary": "Get the total number of kubernetes namespaces within the given Portainer environment.",
        "tags": [
          "kubernetes"
        ]
      }
    },
    "/kubernetes/{id}/nodes_limits": {
      "get": {
        "description": "Get CPU and memory limits of all nodes within k8s cluster.\n**Access policy**: Authenticated user.",
        "operationId": "GetKubernetesNodesLimits",
        "parameters": [
          {
            "description": "Environment(Endpoint) identifier",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "integer"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/portainer.K8sNodesLimits"
            }
          },
          "400": {
            "description": "Invalid request"
          },
          "401": {
            "description": "Unauthorized access - the user is not authenticated or does not have the necessary permissions. Ensure that you have provided a valid API key or JWT token, and that you have the required permissions."
          },
          "403": {
            "description": "Permission denied - the user is authenticated but does not have the necessary permissions to access the requested resource or perform the specified operation. Check your user roles and permissions."
          },
          "404": {
            "description": "Unable to find an environment with the specified identifier."
          },
          "500": {
            "description": "Server error occurred while attempting to retrieve nodes limits."
          }
        },
        "security": [
          {
            "ApiKeyAuth": [],
            "jwt": []
          }
        ],
        "summary": "Get CPU and memory limits of all nodes within k8s cluster",
        "tags": [
          "kubernetes"
        ]
      }
    },
    "/kubernetes/{id}/rbac_enabled": {
      "get": {
        "description": "Check if RBAC is enabled in the specified Kubernetes cluster.\n**Access policy**: Authenticated user.",
        "operationId": "GetKubernetesRBACStatus",
        "parameters": [
          {
            "description": "Environment(Endpoint) identifier",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "integer"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "RBAC status",
            "schema": {
              "type": "boolean"
            }
          },
          "401": {
            "description": "Unauthorized access - the user is not authenticated or does not have the necessary permissions. Ensure that you have provided a valid API key or JWT token, and that you have the required permissions."
          },
          "403": {
            "description": "Permission denied - the user is authenticated but does not have the necessary permissions to access the requested resource or perform the specified operation. Check your user roles and permissions."
          },
          "404": {
            "description": "Unable to find an environment with the specified identifier."
          },
          "500": {
            "description": "Server error occurred while attempting to retrieve the RBAC status."
          }
        },
        "security": [
          {
            "ApiKeyAuth": [],
            "jwt": []
          }
        ],
        "summary": "Check if RBAC is enabled",
        "tags": [
          "kubernetes"
        ]
      }
    },
    "/kubernetes/{id}/role_bindings/delete": {
      "post": {
        "consumes": [
          "application/json"
        ],
        "description": "Delete the provided list of role bindings.\n**Access policy**: Authenticated user.",
        "operationId": "DeleteRoleBindings",
        "parameters": [
          {
            "description": "Environment identifier",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "integer"
          },
          {
            "description": "A map where the key is the namespace and the value is an array of role bindings to delete",
            "in": "body",
            "name": "payload",
            "required": true,
            "schema": {
              "$ref": "#/definitions/kubernetes.K8sRoleBindingDeleteRequests"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Success"
          },
          "400": {
            "description": "Invalid request payload, such as missing required fields or fields not meeting validation criteria."
          },
          "401": {
            "description": "Unauthorized access - the user is not authenticated or does not have the necessary permissions. Ensure that you have provided a valid API key or JWT token, and that you have the required permissions."
          },
          "403": {
            "description": "Permission denied - the user is authenticated but does not have the necessary permissions to access the requested resource or perform the specified operation. Check your user roles and permissions."
          },
          "404": {
            "description": "Unable to find an environment with the specified identifier or unable to find a specific role binding."
          },
          "500": {
            "description": "Server error occurred while attempting to delete role bindings."
          }
        },
        "security": [
          {
            "ApiKeyAuth": [],
            "jwt": []
          }
        ],
        "summary": "Delete role bindings",
        "tags": [
          "kubernetes"
        ]
      }
    },
    "/kubernetes/{id}/rolebindings": {
      "get": {
        "description": "Get a list of kubernetes role bindings that the user has access to.\n**Access policy**: Authenticated user.",
        "operationId": "GetKubernetesRoleBindings",
        "parameters": [
          {
            "description": "Environment identifier",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "integer"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "items": {
                "$ref": "#/definitions/kubernetes.K8sRoleBinding"
              },
              "type": "array"
            }
          },
          "400": {
            "description": "Invalid request payload, such as missing required fields or fields not meeting validation criteria."
          },
          "401": {
            "description": "Unauthorized access - the user is not authenticated or does not have the necessary permissions. Ensure that you have provided a valid API key or JWT token, and that you have the required permissions."
          },
          "403": {
            "description": "Permission denied - the user is authenticated but does not have the necessary permissions to access the requested resource or perform the specified operation. Check your user roles and permissions."
          },
          "404": {
            "description": "Unable to find an environment with the specified identifier."
          },
          "500": {
            "description": "Server error occurred while attempting to retrieve the list of role bindings."
          }
        },
        "security": [
          {
            "ApiKeyAuth": [],
            "jwt": []
          }
        ],
        "summary": "Get a list of kubernetes role bindings",
        "tags": [
          "kubernetes"
        ]
      }
    },
    "/kubernetes/{id}/roles": {
      "get": {
        "description": "Get a list of kubernetes roles that the user has access to.\n**Access policy**: Authenticated user.",
        "operationId": "GetKubernetesRoles",
        "parameters": [
          {
            "description": "Environment identifier",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "integer"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "items": {
                "$ref": "#/definitions/kubernetes.K8sRole"
              },
              "type": "array"
            }
          },
          "400": {
            "description": "Invalid request payload, such as missing required fields or fields not meeting validation criteria."
          },
          "401": {
            "description": "Unauthorized access - the user is not authenticated or does not have the necessary permissions. Ensure that you have provided a valid API key or JWT token, and that you have the required permissions."
          },
          "403": {
            "description": "Permission denied - the user is authenticated but does not have the necessary permissions to access the requested resource or perform the specified operation. Check your user roles and permissions."
          },
          "404": {
            "description": "Unable to find an environment with the specified identifier."
          },
          "500": {
            "description": "Server error occurred while attempting to retrieve the list of roles."
          }
        },
        "security": [
          {
            "ApiKeyAuth": [],
            "jwt": []
          }
        ],
        "summary": "Get a list of kubernetes roles",
        "tags": [
          "kubernetes"
        ]
      }
    },
    "/kubernetes/{id}/roles/delete": {
      "post": {
        "consumes": [
          "application/json"
        ],
        "description": "Delete the provided list of roles.\n**Access policy**: Authenticated user.",
        "operationId": "DeleteRoles",
        "parameters": [
          {
            "description": "Environment identifier",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "integer"
          },
          {
            "description": "A map where the key is the namespace and the value is an array of roles to delete",
            "in": "body",
            "name": "payload",
            "required": true,
            "schema": {
              "$ref": "#/definitions/kubernetes.K8sRoleDeleteRequests"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Success"
          },
          "400": {
            "description": "Invalid request payload, such as missing required fields or fields not meeting validation criteria."
          },
          "401": {
            "description": "Unauthorized access - the user is not authenticated or does not have the necessary permissions. Ensure that you have provided a valid API key or JWT token, and that you have the required permissions."
          },
          "403": {
            "description": "Permission denied - the user is authenticated but does not have the necessary permissions to access the requested resource or perform the specified operation. Check your user roles and permissions."
          },
          "404": {
            "description": "Unable to find an environment with the specified identifier or unable to find a specific role."
          },
          "500": {
            "description": "Server error occurred while attempting to delete roles."
          }
        },
        "security": [
          {
            "ApiKeyAuth": [],
            "jwt": []
          }
        ],
        "summary": "Delete roles",
        "tags": [
          "kubernetes"
        ]
      }
    },
    "/kubernetes/{id}/secrets": {
      "get": {
        "description": "Get a list of Secrets for a given namespace. If isUsed is set to true, information about the applications that use the secrets is also returned.\n**Access policy**: Authenticated user.",
        "operationId": "GetKubernetesSecrets",
        "parameters": [
          {
            "description": "Environment identifier",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "integer"
          },
          {
            "description": "When set to true, associate the Secrets with the applications that use them",
            "in": "query",
            "name": "isUsed",
            "required": true,
            "type": "boolean"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "items": {
                "$ref": "#/definitions/kubernetes.K8sSecret"
              },
              "type": "array"
            }
          },
          "400": {
            "description": "Invalid request payload, such as missing required fields or fields not meeting validation criteria."
          },
          "401": {
            "description": "Unauthorized access - the user is not authenticated or does not have the necessary permissions. Ensure that you have provided a valid API key or JWT token, and that you have the required permissions."
          },
          "403": {
            "description": "Permission denied - the user is authenticated but does not have the necessary permissions to access the requested resource or perform the specified operation. Check your user roles and permissions."
          },
          "404": {
            "description": "Unable to find an environment with the specified identifier."
          },
          "500": {
            "description": "Server error occurred while attempting to retrieve all secrets from the cluster."
          }
        },
        "security": [
          {
            "ApiKeyAuth": [],
            "jwt": []
          }
        ],
        "summary": "Get a list of Secrets",
        "tags": [
          "kubernetes"
        ]
      }
    },
    "/kubernetes/{id}/secrets/count": {
      "get": {
        "description": "Get the count of Secrets across all namespaces that the user has access to.\n**Access policy**: Authenticated user.",
        "operationId": "GetKubernetesSecretsCount",
        "parameters": [
          {
            "description": "Environment identifier",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "integer"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "type": "integer"
            }
          },
          "400": {
            "description": "Invalid request payload, such as missing required fields or fields not meeting validation criteria."
          },
          "401": {
            "description": "Unauthorized access - the user is not authenticated or does not have the necessary permissions. Ensure that you have provided a valid API key or JWT token, and that you have the required permissions."
          },
          "403": {
            "description": "Permission denied - the user is authenticated but does not have the necessary permissions to access the requested resource or perform the specified operation. Check your user roles and permissions."
          },
          "404": {
            "description": "Unable to find an environment with the specified identifier."
          },
          "500": {
            "description": "Server error occurred while attempting to retrieve the count of all secrets from the cluster."
          }
        },
        "security": [
          {
            "ApiKeyAuth": [],
            "jwt": []
          }
        ],
        "summary": "Get Secrets count",
        "tags": [
          "kubernetes"
        ]
      }
    },
    "/kubernetes/{id}/service_accounts/delete": {
      "post": {
        "consumes": [
          "application/json"
        ],
        "description": "Delete the provided list of service accounts.\n**Access policy**: Authenticated user.",
        "operationId": "DeleteServiceAccounts",
        "parameters": [
          {
            "description": "Environment identifier",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "integer"
          },
          {
            "description": "A map where the key is the namespace and the value is an array of service accounts to delete",
            "in": "body",
            "name": "payload",
            "required": true,
            "schema": {
              "$ref": "#/definitions/kubernetes.K8sServiceAccountDeleteRequests"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Success"
          },
          "400": {
            "description": "Invalid request payload, such as missing required fields or fields not meeting validation criteria."
          },
          "401": {
            "description": "Unauthorized access - the user is not authenticated or does not have the necessary permissions. Ensure that you have provided a valid API key or JWT token, and that you have the required permissions."
          },
          "403": {
            "description": "Permission denied - the user is authenticated but does not have the necessary permissions to access the requested resource or perform the specified operation. Check your user roles and permissions."
          },
          "404": {
            "description": "Unable to find an environment with the specified identifier or unable to find a specific service account."
          },
          "500": {
            "description": "Server error occurred while attempting to delete service accounts."
          }
        },
        "security": [
          {
            "ApiKeyAuth": [],
            "jwt": []
          }
        ],
        "summary": "Delete service accounts",
        "tags": [
          "kubernetes"
        ]
      }
    },
    "/kubernetes/{id}/serviceaccounts": {
      "get": {
        "description": "Get a list of kubernetes service accounts that the user has access to.\n**Access policy**: Authenticated user.",
        "operationId": "GetKubernetesServiceAccounts",
        "parameters": [
          {
            "description": "Environment identifier",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "integer"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "items": {
                "$ref": "#/definitions/kubernetes.K8sServiceAccount"
              },
              "type": "array"
            }
          },
          "400": {
            "description": "Invalid request payload, such as missing required fields or fields not meeting validation criteria."
          },
          "401": {
            "description": "Unauthorized access - the user is not authenticated or does not have the necessary permissions. Ensure that you have provided a valid API key or JWT token, and that you have the required permissions."
          },
          "403": {
            "description": "Permission denied - the user is authenticated but does not have the necessary permissions to access the requested resource or perform the specified operation. Check your user roles and permissions."
          },
          "404": {
            "description": "Unable to find an environment with the specified identifier."
          },
          "500": {
            "description": "Server error occurred while attempting to retrieve the list of service accounts."
          }
        },
        "security": [
          {
            "ApiKeyAuth": [],
            "jwt": []
          }
        ],
        "summary": "Get a list of kubernetes service accounts",
        "tags": [
          "kubernetes"
        ]
      }
    },
    "/kubernetes/{id}/services": {
      "get": {
        "description": "Get a list of services that the user has access to.\n**Access policy**: Authenticated user.",
        "operationId": "GetKubernetesServices",
        "parameters": [
          {
            "description": "Environment identifier",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "integer"
          },
          {
            "description": "Lookup applications associated with each service",
            "in": "query",
            "name": "withApplications",
            "type": "boolean"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "items": {
                "$ref": "#/definitions/kubernetes.K8sServiceInfo"
              },
              "type": "array"
            }
          },
          "400": {
            "description": "Invalid request payload, such as missing required fields or fields not meeting validation criteria."
          },
          "401": {
            "description": "Unauthorized access - the user is not authenticated or does not have the necessary permissions. Ensure that you have provided a valid API key or JWT token, and that you have the required permissions."
          },
          "403": {
            "description": "Permission denied - the user is authenticated but does not have the necessary permissions to access the requested resource or perform the specified operation. Check your user roles and permissions."
          },
          "404": {
            "description": "Unable to find an environment with the specified identifier."
          },
          "500": {
            "description": "Server error occurred while attempting to retrieve all services."
          }
        },
        "security": [
          {
            "ApiKeyAuth": [],
            "jwt": []
          }
        ],
        "summary": "Get a list of services",
        "tags": [
          "kubernetes"
        ]
      }
    },
    "/kubernetes/{id}/services/count": {
      "get": {
        "description": "Get the count of services that the user has access to.\n**Access policy**: Authenticated user.",
        "operationId": "GetAllKubernetesServicesCount",
        "parameters": [
          {
            "description": "Environment identifier",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "integer"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "type": "integer"
            }
          },
          "400": {
            "description": "Invalid request payload, such as missing required fields or fields not meeting validation criteria."
          },
          "401": {
            "description": "Unauthorized access - the user is not authenticated or does not have the necessary permissions. Ensure that you have provided a valid API key or JWT token, and that you have the required permissions."
          },
          "403": {
            "description": "Permission denied - the user is authenticated but does not have the necessary permissions to access the requested resource or perform the specified operation. Check your user roles and permissions."
          },
          "404": {
            "description": "Unable to find an environment with the specified identifier."
          },
          "500": {
            "description": "Server error occurred while attempting to retrieve the total count of all services."
          }
        },
        "security": [
          {
            "ApiKeyAuth": [],
            "jwt": []
          }
        ],
        "summary": "Get services count",
        "tags": [
          "kubernetes"
        ]
      }
    },
    "/kubernetes/{id}/services/delete": {
      "post": {
        "consumes": [
          "application/json"
        ],
        "description": "Delete the provided list of services.\n**Access policy**: Authenticated user.",
        "operationId": "DeleteKubernetesServices",
        "parameters": [
          {
            "description": "Environment identifier",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "integer"
          },
          {
            "description": "A map where the key is the namespace and the value is an array of services to delete",
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/kubernetes.K8sServiceDeleteRequests"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "204": {
            "description": "Success"
          },
          "400": {
            "description": "Invalid request payload, such as missing required fields or fields not meeting validation criteria."
          },
          "401": {
            "description": "Unauthorized access - the user is not authenticated or does not have the necessary permissions. Ensure that you have provided a valid API key or JWT token, and that you have the required permissions."
          },
          "403": {
            "description": "Permission denied - the user is authenticated but does not have the necessary permissions to access the requested resource or perform the specified operation. Check your user roles and permissions."
          },
          "404": {
            "description": "Unable to find an environment with the specified identifier or unable to find a specific service."
          },
          "500": {
            "description": "Server error occurred while attempting to delete services."
          }
        },
        "security": [
          {
            "ApiKeyAuth": [],
            "jwt": []
          }
        ],
        "summary": "Delete services",
        "tags": [
          "kubernetes"
        ]
      }
    },
    "/kubernetes/{id}/volumes": {
      "get": {
        "description": "Get a list of all kubernetes volumes within the given environment (Endpoint). The Endpoint ID must be a valid Portainer environment identifier.\n**Access policy**: Authenticated user.",
        "operationId": "GetAllKubernetesVolumes",
        "parameters": [
          {
            "description": "Environment identifier",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "integer"
          },
          {
            "description": "When set to True, include the applications that are using the volumes. It is set to false by default",
            "in": "query",
            "name": "withApplications",
            "type": "boolean"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "additionalProperties": {
                "$ref": "#/definitions/kubernetes.K8sVolumeInfo"
              },
              "type": "object"
            }
          },
          "400": {
            "description": "Invalid request payload, such as missing required fields or fields not meeting validation criteria."
          },
          "403": {
            "description": "Unauthorized access or operation not allowed."
          },
          "500": {
            "description": "Server error occurred while attempting to retrieve kubernetes volumes."
          }
        },
        "security": [
          {
            "ApiKeyAuth": [],
            "jwt": []
          }
        ],
        "summary": "Get Kubernetes volumes within the given Portainer environment",
        "tags": [
          "kubernetes"
        ]
      }
    },
    "/kubernetes/{id}/volumes/{namespace}/{volume}": {
      "get": {
        "description": "Get a Kubernetes volume within the given environment (Endpoint). The Endpoint ID must be a valid Portainer environment identifier.\n**Access policy**: Authenticated user.",
        "operationId": "GetKubernetesVolume",
        "parameters": [
          {
            "description": "Environment identifier",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "integer"
          },
          {
            "description": "Namespace identifier",
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          },
          {
            "description": "Volume name",
            "in": "path",
            "name": "volume",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/kubernetes.K8sVolumeInfo"
            }
          },
          "400": {
            "description": "Invalid request"
          },
          "500": {
            "description": "Server error"
          }
        },
        "security": [
          {
            "ApiKeyAuth": [],
            "jwt": []
          }
        ],
        "summary": "Get a Kubernetes volume within the given Portainer environment",
        "tags": [
          "kubernetes"
        ]
      }
    },
    "/kubernetes/{id}/volumes/count": {
      "get": {
        "description": "Get the total number of kubernetes volumes within the given environment (Endpoint). The total count depends on the user's role and permissions. The Endpoint ID must be a valid Portainer environment identifier.\n**Access policy**: Authenticated user.",
        "operationId": "getAllKubernetesVolumesCount",
        "parameters": [
          {
            "description": "Environment identifier",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "integer"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "type": "integer"
            }
          },
          "400": {
            "description": "Invalid request payload, such as missing required fields or fields not meeting validation criteria."
          },
          "403": {
            "description": "Unauthorized access or operation not allowed."
          },
          "500": {
            "description": "Server error occurred while attempting to retrieve kubernetes volumes count."
          }
        },
        "security": [
          {
            "ApiKeyAuth": [],
            "jwt": []
          }
        ],
        "summary": "Get the total number of kubernetes volumes within the given Portainer environment.",
        "tags": [
          "kubernetes"
        ]
      }
    },
    "/kubernetes/config": {
      "get": {
        "description": "Generate a kubeconfig file that allows a client to communicate with the Kubernetes API server\n**Access policy**: Authenticated user.",
        "operationId": "GetKubernetesConfig",
        "parameters": [
          {
            "description": "will include only these environments(endpoints)",
            "in": "query",
            "items": {
              "type": "integer"
            },
            "name": "ids",
            "type": "array"
          },
          {
            "description": "will exclude these environments(endpoints)",
            "in": "query",
            "items": {
              "type": "integer"
            },
            "name": "excludeIds",
            "type": "array"
          }
        ],
        "produces": [
          "application/json",
          " application/yaml"
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "type": "object"
            }
          },
          "400": {
            "description": "Invalid request payload, such as missing required fields or fields not meeting validation criteria."
          },
          "401": {
            "description": "Unauthorized access - the user is not authenticated or does not have the necessary permissions. Ensure that you have provided a valid API key or JWT token, and that you have the required permissions."
          },
          "403": {
            "description": "Permission denied - the user is authenticated but does not have the necessary permissions to access the requested resource or perform the specified operation. Check your user roles and permissions."
          },
          "404": {
            "description": "Unable to find an environment with the specified identifier."
          },
          "500": {
            "description": "Server error occurred while attempting to generate the kubeconfig file."
          }
        },
        "security": [
          {
            "ApiKeyAuth": [],
            "jwt": []
          }
        ],
        "summary": "Generate a kubeconfig file",
        "tags": [
          "kubernetes"
        ]
      }
    },
    "/ldap/check": {
      "post": {
        "consumes": [
          "application/json"
        ],
        "description": "Test LDAP connectivity using LDAP details\n**Access policy**: administrator",
        "operationId": "LDAPCheck",
        "parameters": [
          {
            "description": "details",
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ldap.checkPayload"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Success"
          },
          "400": {
            "description": "Invalid request"
          },
          "500": {
            "description": "Server error"
          }
        },
        "security": [
          {
            "ApiKeyAuth": []
          },
          {
            "jwt": []
          }
        ],
        "summary": "Test LDAP connectivity",
        "tags": [
          "ldap"
        ]
      }
    },
    "/motd": {
      "get": {
        "description": "**Access policy**: restricted",
        "operationId": "MOTD",
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/motd.motdResponse"
            }
          }
        },
        "security": [
          {
            "ApiKeyAuth": []
          },
          {
            "jwt": []
          }
        ],
        "summary": "fetches the message of the day",
        "tags": [
          "motd"
        ]
      }
    },
    "/open_amt": {
      "post": {
        "consumes": [
          "application/json"
        ],
        "description": "Enable Portainer's OpenAMT capabilities\n**Access policy**: administrator",
        "operationId": "OpenAMTConfigure",
        "parameters": [
          {
            "description": "OpenAMT Settings",
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/openamt.openAMTConfigurePayload"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "204": {
            "description": "Success"
          },
          "400": {
            "description": "Invalid request"
          },
          "403": {
            "description": "Permission denied to access settings"
          },
          "500": {
            "description": "Server error"
          }
        },
        "security": [
          {
            "jwt": []
          }
        ],
        "summary": "Enable Portainer's OpenAMT capabilities",
        "tags": [
          "intel"
        ]
      }
    },
    "/open_amt/{id}/activate": {
      "post": {
        "description": "Activate OpenAMT device and associate to agent endpoint\n**Access policy**: administrator",
        "operationId": "openAMTActivate",
        "parameters": [
          {
            "description": "Environment identifier",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "integer"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "Success"
          },
          "400": {
            "description": "Invalid request"
          },
          "403": {
            "description": "Permission denied to access settings"
          },
          "500": {
            "description": "Server error"
          }
        },
        "security": [
          {
            "jwt": []
          }
        ],
        "summary": "Activate OpenAMT device and associate to agent endpoint",
        "tags": [
          "intel"
        ]
      }
    },
    "/open_amt/{id}/devices": {
      "get": {
        "description": "Fetch OpenAMT managed devices information for endpoint\n**Access policy**: administrator",
        "operationId": "OpenAMTDevices",
        "parameters": [
          {
            "description": "Environment(Endpoint) identifier",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "integer"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "Success"
          },
          "400": {
            "description": "Invalid request"
          },
          "403": {
            "description": "Permission denied to access settings"
          },
          "500": {
            "description": "Server error"
          }
        },
        "security": [
          {
            "jwt": []
          }
        ],
        "summary": "Fetch OpenAMT managed devices information for endpoint",
        "tags": [
          "intel"
        ]
      }
    },
    "/open_amt/{id}/devices/{deviceId}/action": {
      "post": {
        "consumes": [
          "application/json"
        ],
        "description": "Execute out of band action on an AMT managed device\n**Access policy**: administrator",
        "operationId": "DeviceAction",
        "parameters": [
          {
            "description": "Environment identifier",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "integer"
          },
          {
            "description": "Device identifier",
            "in": "path",
            "name": "deviceId",
            "required": true,
            "type": "integer"
          },
          {
            "description": "Device Action",
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/openamt.deviceActionPayload"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "204": {
            "description": "Success"
          },
          "400": {
            "description": "Invalid request"
          },
          "403": {
            "description": "Permission denied to access settings"
          },
          "500": {
            "description": "Server error"
          }
        },
        "security": [
          {
            "jwt": []
          }
        ],
        "summary": "Execute out of band action on an AMT managed device",
        "tags": [
          "intel"
        ]
      }
    },
    "/open_amt/{id}/devices_features/{deviceId}": {
      "post": {
        "consumes": [
          "application/json"
        ],
        "description": "Enable features on an AMT managed device\n**Access policy**: administrator",
        "operationId": "DeviceFeatures",
        "parameters": [
          {
            "description": "Environment identifier",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "integer"
          },
          {
            "description": "Device identifier",
            "in": "path",
            "name": "deviceId",
            "required": true,
            "type": "integer"
          },
          {
            "description": "Device Features",
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/openamt.deviceFeaturesPayload"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "204": {
            "description": "Success"
          },
          "400": {
            "description": "Invalid request"
          },
          "403": {
            "description": "Permission denied to access settings"
          },
          "500": {
            "description": "Server error"
          }
        },
        "security": [
          {
            "jwt": []
          }
        ],
        "summary": "Enable features on an AMT managed device",
        "tags": [
          "intel"
        ]
      }
    },
    "/open_amt/{id}/info": {
      "get": {
        "description": "Request OpenAMT info from a node\n**Access policy**: administrator",
        "operationId": "OpenAMTHostInfo",
        "parameters": [
          {
            "description": "Environment identifier",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "integer"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "Success"
          },
          "400": {
            "description": "Invalid request"
          },
          "403": {
            "description": "Permission denied to access settings"
          },
          "500": {
            "description": "Server error"
          }
        },
        "security": [
          {
            "jwt": []
          }
        ],
        "summary": "Request OpenAMT info from a node",
        "tags": [
          "intel"
        ]
      }
    },
    "/registries": {
      "get": {
        "description": "List all registries based on the current user authorizations.\nWill return all registries if using an administrator account otherwise it\nwill only return authorized registries.\n**Access policy**: restricted",
        "operationId": "RegistryList",
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "items": {
                "$ref": "#/definitions/portainer.Registry"
              },
              "type": "array"
            }
          },
          "500": {
            "description": "Server error"
          }
        },
        "security": [
          {
            "ApiKeyAuth": []
          },
          {
            "jwt": []
          }
        ],
        "summary": "List Registries",
        "tags": [
          "registries"
        ]
      },
      "post": {
        "consumes": [
          "application/json"
        ],
        "description": "Create a new registry.\n**Access policy**: restricted",
        "operationId": "RegistryCreate",
        "parameters": [
          {
            "description": "Registry details",
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/registries.registryCreatePayload"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/portainer.Registry"
            }
          },
          "400": {
            "description": "Invalid request"
          },
          "409": {
            "description": "Another registry with the same name or same URL & credentials already exists"
          },
          "500": {
            "description": "Server error"
          }
        },
        "security": [
          {
            "ApiKeyAuth": []
          },
          {
            "jwt": []
          }
        ],
        "summary": "Create a new registry",
        "tags": [
          "registries"
        ]
      }
    },
    "/registries/{id}": {
      "delete": {
        "description": "Remove a registry\n**Access policy**: restricted",
        "operationId": "RegistryDelete",
        "parameters": [
          {
            "description": "Registry identifier",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "integer"
          }
        ],
        "responses": {
          "204": {
            "description": "Success"
          },
          "400": {
            "description": "Invalid request"
          },
          "404": {
            "description": "Registry not found"
          },
          "500": {
            "description": "Server error"
          }
        },
        "security": [
          {
            "ApiKeyAuth": []
          },
          {
            "jwt": []
          }
        ],
        "summary": "Remove a registry",
        "tags": [
          "registries"
        ]
      },
      "get": {
        "description": "Retrieve details about a registry.\n**Access policy**: restricted",
        "operationId": "RegistryInspect",
        "parameters": [
          {
            "description": "Registry identifier",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "integer"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/portainer.Registry"
            }
          },
          "400": {
            "description": "Invalid request"
          },
          "403": {
            "description": "Permission denied to access registry"
          },
          "404": {
            "description": "Registry not found"
          },
          "500": {
            "description": "Server error"
          }
        },
        "security": [
          {
            "ApiKeyAuth": []
          },
          {
            "jwt": []
          }
        ],
        "summary": "Inspect a registry",
        "tags": [
          "registries"
        ]
      },
      "put": {
        "consumes": [
          "application/json"
        ],
        "description": "Update a registry\n**Access policy**: restricted",
        "operationId": "RegistryUpdate",
        "parameters": [
          {
            "description": "Registry identifier",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "integer"
          },
          {
            "description": "Registry details",
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/registries.registryUpdatePayload"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/portainer.Registry"
            }
          },
          "400": {
            "description": "Invalid request"
          },
          "404": {
            "description": "Registry not found"
          },
          "409": {
            "description": "Another registry with the same name or same URL & credentials already exists"
          },
          "500": {
            "description": "Server error"
          }
        },
        "security": [
          {
            "ApiKeyAuth": []
          },
          {
            "jwt": []
          }
        ],
        "summary": "Update a registry",
        "tags": [
          "registries"
        ]
      }
    },
    "/registries/{id}/configure": {
      "post": {
        "consumes": [
          "application/json"
        ],
        "description": "Configures a registry.\n**Access policy**: restricted",
        "operationId": "RegistryConfigure",
        "parameters": [
          {
            "description": "Registry identifier",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "integer"
          },
          {
            "description": "Registry configuration",
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/registries.registryConfigurePayload"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "204": {
            "description": "Success"
          },
          "400": {
            "description": "Invalid request"
          },
          "403": {
            "description": "Permission denied"
          },
          "404": {
            "description": "Registry not found"
          },
          "500": {
            "description": "Server error"
          }
        },
        "security": [
          {
            "ApiKeyAuth": []
          },
          {
            "jwt": []
          }
        ],
        "summary": "Configures a registry",
        "tags": [
          "registries"
        ]
      }
    },
    "/resource_controls": {
      "post": {
        "consumes": [
          "application/json"
        ],
        "description": "Create a new resource control to restrict access to a Docker resource.\n**Access policy**: administrator",
        "operationId": "ResourceControlCreate",
        "parameters": [
          {
            "description": "Resource control details",
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/resourcecontrols.resourceControlCreatePayload"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/portainer.ResourceControl"
            }
          },
          "400": {
            "description": "Invalid request"
          },
          "409": {
            "description": "A resource control is already associated to this resource"
          },
          "500": {
            "description": "Server error"
          }
        },
        "security": [
          {
            "ApiKeyAuth": []
          },
          {
            "jwt": []
          }
        ],
        "summary": "Create a new resource control",
        "tags": [
          "resource_controls"
        ]
      }
    },
    "/resource_controls/{id}": {
      "delete": {
        "description": "Remove a resource control.\n**Access policy**: administrator",
        "operationId": "ResourceControlDelete",
        "parameters": [
          {
            "description": "Resource control identifier",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "integer"
          }
        ],
        "responses": {
          "204": {
            "description": "Success"
          },
          "400": {
            "description": "Invalid request"
          },
          "404": {
            "description": "Resource control not found"
          },
          "500": {
            "description": "Server error"
          }
        },
        "security": [
          {
            "ApiKeyAuth": []
          },
          {
            "jwt": []
          }
        ],
        "summary": "Remove a resource control",
        "tags": [
          "resource_controls"
        ]
      },
      "put": {
        "consumes": [
          "application/json"
        ],
        "description": "Update a resource control\n**Access policy**: authenticated",
        "operationId": "ResourceControlUpdate",
        "parameters": [
          {
            "description": "Resource control identifier",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "integer"
          },
          {
            "description": "Resource control details",
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/resourcecontrols.resourceControlUpdatePayload"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/portainer.ResourceControl"
            }
          },
          "400": {
            "description": "Invalid request"
          },
          "403": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Resource control not found"
          },
          "500": {
            "description": "Server error"
          }
        },
        "security": [
          {
            "ApiKeyAuth": []
          },
          {
            "jwt": []
          }
        ],
        "summary": "Update a resource control",
        "tags": [
          "resource_controls"
        ]
      }
    },
    "/restore": {
      "post": {
        "consumes": [
          "application/json"
        ],
        "description": "Triggers a system restore using provided backup file\n**Access policy**: public",
        "operationId": "Restore",
        "parameters": [
          {
            "description": "Restore request payload",
            "in": "body",
            "name": "restorePayload",
            "required": true,
            "schema": {
              "$ref": "#/definitions/backup.restorePayload"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          },
          "400": {
            "description": "Invalid request"
          },
          "500": {
            "description": "Server error"
          }
        },
        "summary": "Triggers a system restore using provided backup file",
        "tags": [
          "backup"
        ]
      }
    },
    "/roles": {
      "get": {
        "description": "List all roles available for use\n**Access policy**: administrator",
        "operationId": "RoleList",
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "items": {
                "$ref": "#/definitions/portainer.Role"
              },
              "type": "array"
            }
          },
          "500": {
            "description": "Server error"
          }
        },
        "security": [
          {
            "ApiKeyAuth": []
          },
          {
            "jwt": []
          }
        ],
        "summary": "List roles",
        "tags": [
          "roles"
        ]
      }
    },
    "/settings": {
      "get": {
        "description": "Retrieve Portainer settings.\n**Access policy**: administrator",
        "operationId": "SettingsInspect",
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/portainer.Settings"
            }
          },
          "500": {
            "description": "Server error"
          }
        },
        "security": [
          {
            "ApiKeyAuth": []
          },
          {
            "jwt": []
          }
        ],
        "summary": "Retrieve Portainer settings",
        "tags": [
          "settings"
        ]
      },
      "put": {
        "consumes": [
          "application/json"
        ],
        "description": "Update Portainer settings.\n**Access policy**: administrator",
        "operationId": "SettingsUpdate",
        "parameters": [
          {
            "description": "New settings",
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/settings.settingsUpdatePayload"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/portainer.Settings"
            }
          },
          "400": {
            "description": "Invalid request"
          },
          "500": {
            "description": "Server error"
          }
        },
        "security": [
          {
            "ApiKeyAuth": []
          },
          {
            "jwt": []
          }
        ],
        "summary": "Update Portainer settings",
        "tags": [
          "settings"
        ]
      }
    },
    "/settings/public": {
      "get": {
        "description": "Retrieve public settings. Returns a small set of settings that are not reserved to administrators only.\n**Access policy**: public",
        "operationId": "SettingsPublic",
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/settings.publicSettingsResponse"
            }
          },
          "500": {
            "description": "Server error"
          }
        },
        "summary": "Retrieve Portainer public settings",
        "tags": [
          "settings"
        ]
      }
    },
    "/ssl": {
      "get": {
        "description": "Retrieve the ssl settings.\n**Access policy**: administrator",
        "operationId": "SSLInspect",
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/portainer.SSLSettings"
            }
          },
          "400": {
            "description": "Invalid request"
          },
          "403": {
            "description": "Permission denied to access settings"
          },
          "500": {
            "description": "Server error"
          }
        },
        "security": [
          {
            "ApiKeyAuth": []
          },
          {
            "jwt": []
          }
        ],
        "summary": "Inspect the ssl settings",
        "tags": [
          "ssl"
        ]
      },
      "put": {
        "consumes": [
          "application/json"
        ],
        "description": "Update the ssl settings.\n**Access policy**: administrator",
        "operationId": "SSLUpdate",
        "parameters": [
          {
            "description": "SSL Settings",
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ssl.sslUpdatePayload"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "204": {
            "description": "Success"
          },
          "400": {
            "description": "Invalid request"
          },
          "403": {
            "description": "Permission denied to access settings"
          },
          "500": {
            "description": "Server error"
          }
        },
        "security": [
          {
            "ApiKeyAuth": []
          },
          {
            "jwt": []
          }
        ],
        "summary": "Update the ssl settings",
        "tags": [
          "ssl"
        ]
      }
    },
    "/stacks": {
      "get": {
        "description": "List all stacks based on the current user authorizations.\nWill return all stacks if using an administrator account otherwise it\nwill only return the list of stacks the user have access to.\nLimited stacks will not be returned by this endpoint.\n**Access policy**: authenticated",
        "operationId": "StackList",
        "parameters": [
          {
            "description": "Filters to process on the stack list. Encoded as JSON (a map[string]string). For example, {'SwarmID': 'jpofkc0i9uo9wtx1zesuk649w'} will only return stacks that are part of the specified Swarm cluster. Available filters: EndpointID, SwarmID.",
            "in": "query",
            "name": "filters",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "items": {
                "$ref": "#/definitions/portainer.Stack"
              },
              "type": "array"
            }
          },
          "204": {
            "description": "Success"
          },
          "400": {
            "description": "Invalid request"
          },
          "500": {
            "description": "Server error"
          }
        },
        "security": [
          {
            "ApiKeyAuth": []
          },
          {
            "jwt": []
          }
        ],
        "summary": "List stacks",
        "tags": [
          "stacks"
        ]
      },
      "post": {
        "consumes": [
          "application/json",
          "multipart/form-data"
        ],
        "deprecated": true,
        "description": "Deploy a new stack into a Docker environment(endpoint) specified via the environment(endpoint) identifier.\n**Access policy**: authenticated",
        "operationId": "StackCreate",
        "parameters": [
          {
            "description": "Stack deployment type. Possible values: 1 (Swarm stack), 2 (Compose stack) or 3 (Kubernetes stack).",
            "enum": [
              1,
              2,
              3
            ],
            "in": "query",
            "name": "type",
            "required": true,
            "type": "integer"
          },
          {
            "description": "Stack deployment method. Possible values: file, string, repository or url.",
            "enum": [
              "string",
              "file",
              "repository",
              "url"
            ],
            "in": "query",
            "name": "method",
            "required": true,
            "type": "string"
          },
          {
            "description": "Identifier of the environment(endpoint) that will be used to deploy the stack",
            "in": "query",
            "name": "endpointId",
            "required": true,
            "type": "integer"
          },
          {
            "description": "for body documentation see the relevant /stacks/create/{type}/{method} endpoint",
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "type": "object"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/portainer.Stack"
            }
          },
          "400": {
            "description": "Invalid request"
          },
          "500": {
            "description": "Server error"
          }
        },
        "security": [
          {
            "ApiKeyAuth": []
          },
          {
            "jwt": []
          }
        ],
        "summary": "Deploy a new stack",
        "tags": [
          "stacks"
        ]
      }
    },
    "/stacks/{id}": {
      "delete": {
        "description": "Remove a stack.\n**Access policy**: restricted",
        "operationId": "StackDelete",
        "parameters": [
          {
            "description": "Stack identifier",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "integer"
          },
          {
            "description": "Set to true to delete an external stack. Only external Swarm stacks are supported",
            "in": "query",
            "name": "external",
            "type": "boolean"
          },
          {
            "description": "Environment identifier",
            "in": "query",
            "name": "endpointId",
            "required": true,
            "type": "integer"
          }
        ],
        "responses": {
          "204": {
            "description": "Success"
          },
          "400": {
            "description": "Invalid request"
          },
          "403": {
            "description": "Permission denied"
          },
          "404": {
            "description": "Not found"
          },
          "500": {
            "description": "Server error"
          }
        },
        "security": [
          {
            "ApiKeyAuth": []
          },
          {
            "jwt": []
          }
        ],
        "summary": "Remove a stack",
        "tags": [
          "stacks"
        ]
      },
      "get": {
        "description": "Retrieve details about a stack.\n**Access policy**: restricted",
        "operationId": "StackInspect",
        "parameters": [
          {
            "description": "Stack identifier",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "integer"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/portainer.Stack"
            }
          },
          "400": {
            "description": "Invalid request"
          },
          "403": {
            "description": "Permission denied"
          },
          "404": {
            "description": "Stack not found"
          },
          "500": {
            "description": "Server error"
          }
        },
        "security": [
          {
            "ApiKeyAuth": []
          },
          {
            "jwt": []
          }
        ],
        "summary": "Inspect a stack",
        "tags": [
          "stacks"
        ]
      },
      "put": {
        "consumes": [
          "application/json"
        ],
        "description": "Update a stack, only for file based stacks.\n**Access policy**: authenticated",
        "operationId": "StackUpdate",
        "parameters": [
          {
            "description": "Stack identifier",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "integer"
          },
          {
            "description": "Environment identifier",
            "in": "query",
            "name": "endpointId",
            "required": true,
            "type": "integer"
          },
          {
            "description": "Stack details",
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/stacks.updateSwarmStackPayload"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/portainer.Stack"
            }
          },
          "400": {
            "description": "Invalid request"
          },
          "403": {
            "description": "Permission denied"
          },
          "404": {
            "description": "Not found"
          },
          "500": {
            "description": "Server error"
          }
        },
        "security": [
          {
            "ApiKeyAuth": []
          },
          {
            "jwt": []
          }
        ],
        "summary": "Update a stack",
        "tags": [
          "stacks"
        ]
      }
    },
    "/stacks/{id}/associate": {
      "put": {
        "description": "**Access policy**: administrator",
        "operationId": "StackAssociate",
        "parameters": [
          {
            "description": "Stack identifier",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "integer"
          },
          {
            "description": "Environment identifier",
            "in": "query",
            "name": "endpointId",
            "required": true,
            "type": "integer"
          },
          {
            "description": "Swarm identifier",
            "in": "query",
            "name": "swarmId",
            "required": true,
            "type": "integer"
          },
          {
            "description": "Indicates whether the stack is orphaned",
            "in": "query",
            "name": "orphanedRunning",
            "required": true,
            "type": "boolean"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/portainer.Stack"
            }
          },
          "400": {
            "description": "Invalid request"
          },
          "403": {
            "description": "Permission denied"
          },
          "404": {
            "description": "Stack not found"
          },
          "500": {
            "description": "Server error"
          }
        },
        "security": [
          {
            "ApiKeyAuth": []
          },
          {
            "jwt": []
          }
        ],
        "summary": "Associate an orphaned stack to a new environment(endpoint)",
        "tags": [
          "stacks"
        ]
      }
    },
    "/stacks/{id}/file": {
      "get": {
        "description": "Get Stack file content.\n**Access policy**: restricted",
        "operationId": "StackFileInspect",
        "parameters": [
          {
            "description": "Stack identifier",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "integer"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/stacks.stackFileResponse"
            }
          },
          "400": {
            "description": "Invalid request"
          },
          "403": {
            "description": "Permission denied"
          },
          "404": {
            "description": "Stack not found"
          },
          "500": {
            "description": "Server error"
          }
        },
        "security": [
          {
            "ApiKeyAuth": []
          },
          {
            "jwt": []
          }
        ],
        "summary": "Retrieve the content of the Stack file for the specified stack",
        "tags": [
          "stacks"
        ]
      }
    },
    "/stacks/{id}/git": {
      "post": {
        "consumes": [
          "application/json"
        ],
        "description": "Update the Git settings in a stack, e.g., RepositoryReferenceName and AutoUpdate\n**Access policy**: authenticated",
        "operationId": "StackUpdateGit",
        "parameters": [
          {
            "description": "Stack identifier",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "integer"
          },
          {
            "description": "Stacks created before version 1.18.0 might not have an associated environment(endpoint) identifier. Use this optional parameter to set the environment(endpoint) identifier used by the stack.",
            "in": "query",
            "name": "endpointId",
            "type": "integer"
          },
          {
            "description": "Git configs for pull and redeploy a stack",
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/stacks.stackGitUpdatePayload"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/portainer.Stack"
            }
          },
          "400": {
            "description": "Invalid request"
          },
          "403": {
            "description": "Permission denied"
          },
          "404": {
            "description": "Not found"
          },
          "500": {
            "description": "Server error"
          }
        },
        "security": [
          {
            "ApiKeyAuth": []
          },
          {
            "jwt": []
          }
        ],
        "summary": "Update a stack's Git configs",
        "tags": [
          "stacks"
        ]
      }
    },
    "/stacks/{id}/git/redeploy": {
      "put": {
        "consumes": [
          "application/json"
        ],
        "description": "Pull and redeploy a stack via Git\n**Access policy**: authenticated",
        "operationId": "StackGitRedeploy",
        "parameters": [
          {
            "description": "Stack identifier",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "integer"
          },
          {
            "description": "Stacks created before version 1.18.0 might not have an associated environment(endpoint) identifier. Use this optional parameter to set the environment(endpoint) identifier used by the stack.",
            "in": "query",
            "name": "endpointId",
            "type": "integer"
          },
          {
            "description": "Git configs for pull and redeploy of a stack. **StackName** may only be populated for Kuberenetes stacks, and if specified with a blank string, it will be set to blank",
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/stacks.stackGitRedployPayload"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/portainer.Stack"
            }
          },
          "400": {
            "description": "Invalid request"
          },
          "403": {
            "description": "Permission denied"
          },
          "404": {
            "description": "Not found"
          },
          "500": {
            "description": "Server error"
          }
        },
        "security": [
          {
            "ApiKeyAuth": []
          },
          {
            "jwt": []
          }
        ],
        "summary": "Redeploy a stack",
        "tags": [
          "stacks"
        ]
      }
    },
    "/stacks/{id}/migrate": {
      "post": {
        "description": "Migrate a stack from an environment(endpoint) to another environment(endpoint). It will re-create the stack inside the target environment(endpoint) before removing the original stack.\n**Access policy**: authenticated",
        "operationId": "StackMigrate",
        "parameters": [
          {
            "description": "Stack identifier",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "integer"
          },
          {
            "description": "Stacks created before version 1.18.0 might not have an associated environment(endpoint) identifier. Use this optional parameter to set the environment(endpoint) identifier used by the stack.",
            "in": "query",
            "name": "endpointId",
            "type": "integer"
          },
          {
            "description": "Stack migration details",
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/stacks.stackMigratePayload"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/portainer.Stack"
            }
          },
          "400": {
            "description": "Invalid request"
          },
          "403": {
            "description": "Permission denied"
          },
          "404": {
            "description": "Stack not found"
          },
          "409": {
            "description": "A stack with the same name is already running on the target environment(endpoint)"
          },
          "500": {
            "description": "Server error"
          }
        },
        "security": [
          {
            "ApiKeyAuth": []
          },
          {
            "jwt": []
          }
        ],
        "summary": "Migrate a stack to another environment(endpoint)",
        "tags": [
          "stacks"
        ]
      }
    },
    "/stacks/{id}/start": {
      "post": {
        "description": "Starts a stopped Stack.\n**Access policy**: authenticated",
        "operationId": "StackStart",
        "parameters": [
          {
            "description": "Stack identifier",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "integer"
          },
          {
            "description": "Environment identifier",
            "in": "query",
            "name": "endpointId",
            "required": true,
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/portainer.Stack"
            }
          },
          "400": {
            "description": "Invalid request"
          },
          "403": {
            "description": "Permission denied"
          },
          "404": {
            "description": "Not found"
          },
          "409": {
            "description": "Stack name is not unique"
          },
          "500": {
            "description": "Server error"
          }
        },
        "security": [
          {
            "ApiKeyAuth": []
          },
          {
            "jwt": []
          }
        ],
        "summary": "Starts a stopped Stack",
        "tags": [
          "stacks"
        ]
      }
    },
    "/stacks/{id}/stop": {
      "post": {
        "description": "Stops a stopped Stack.\n**Access policy**: authenticated",
        "operationId": "StackStop",
        "parameters": [
          {
            "description": "Stack identifier",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "integer"
          },
          {
            "description": "Environment identifier",
            "in": "query",
            "name": "endpointId",
            "required": true,
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/portainer.Stack"
            }
          },
          "400": {
            "description": "Invalid request"
          },
          "403": {
            "description": "Permission denied"
          },
          "404": {
            "description": "Not found"
          },
          "500": {
            "description": "Server error"
          }
        },
        "security": [
          {
            "ApiKeyAuth": []
          },
          {
            "jwt": []
          }
        ],
        "summary": "Stops a stopped Stack",
        "tags": [
          "stacks"
        ]
      }
    },
    "/stacks/create/kubernetes/repository": {
      "post": {
        "description": "Deploy a new stack into a Docker environment specified via the environment identifier.\n**Access policy**: authenticated",
        "operationId": "StackCreateKubernetesGit",
        "parameters": [
          {
            "description": "stack config",
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/stacks.kubernetesGitDeploymentPayload"
            }
          },
          {
            "description": "Identifier of the environment that will be used to deploy the stack",
            "in": "query",
            "name": "endpointId",
            "required": true,
            "type": "integer"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/portainer.Stack"
            }
          },
          "400": {
            "description": "Invalid request"
          },
          "409": {
            "description": "Stack name or webhook ID already exists"
          },
          "500": {
            "description": "Server error"
          }
        },
        "security": [
          {
            "ApiKeyAuth": []
          },
          {
            "jwt": []
          }
        ],
        "summary": "Deploy a new kubernetes stack from a git repository",
        "tags": [
          "stacks"
        ]
      }
    },
    "/stacks/create/kubernetes/string": {
      "post": {
        "description": "Deploy a new stack into a Docker environment specified via the environment identifier.\n**Access policy**: authenticated",
        "operationId": "StackCreateKubernetesFile",
        "parameters": [
          {
            "description": "stack config",
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/stacks.kubernetesStringDeploymentPayload"
            }
          },
          {
            "description": "Identifier of the environment that will be used to deploy the stack",
            "in": "query",
            "name": "endpointId",
            "required": true,
            "type": "integer"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/portainer.Stack"
            }
          },
          "400": {
            "description": "Invalid request"
          },
          "500": {
            "description": "Server error"
          }
        },
        "security": [
          {
            "ApiKeyAuth": []
          },
          {
            "jwt": []
          }
        ],
        "summary": "Deploy a new kubernetes stack from a file",
        "tags": [
          "stacks"
        ]
      }
    },
    "/stacks/create/kubernetes/url": {
      "post": {
        "description": "Deploy a new stack into a Docker environment specified via the environment identifier.\n**Access policy**: authenticated",
        "operationId": "StackCreateKubernetesUrl",
        "parameters": [
          {
            "description": "stack config",
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/stacks.kubernetesManifestURLDeploymentPayload"
            }
          },
          {
            "description": "Identifier of the environment that will be used to deploy the stack",
            "in": "query",
            "name": "endpointId",
            "required": true,
            "type": "integer"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/portainer.Stack"
            }
          },
          "400": {
            "description": "Invalid request"
          },
          "500": {
            "description": "Server error"
          }
        },
        "security": [
          {
            "ApiKeyAuth": []
          },
          {
            "jwt": []
          }
        ],
        "summary": "Deploy a new kubernetes stack from a url",
        "tags": [
          "stacks"
        ]
      }
    },
    "/stacks/create/standalone/file": {
      "post": {
        "consumes": [
          "multipart/form-data"
        ],
        "description": "Deploy a new stack into a Docker environment specified via the environment identifier.\n**Access policy**: authenticated",
        "operationId": "StackCreateDockerStandaloneFile",
        "parameters": [
          {
            "description": "Name of the stack",
            "in": "formData",
            "name": "Name",
            "required": true,
            "type": "string"
          },
          {
            "description": "Environment variables passed during deployment, represented as a JSON array [{'name': 'name', 'value': 'value'}].",
            "in": "formData",
            "name": "Env",
            "type": "string"
          },
          {
            "description": "Stack file",
            "in": "formData",
            "name": "file",
            "type": "file"
          },
          {
            "description": "Identifier of the environment that will be used to deploy the stack",
            "in": "query",
            "name": "endpointId",
            "required": true,
            "type": "integer"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/portainer.Stack"
            }
          },
          "400": {
            "description": "Invalid request"
          },
          "500": {
            "description": "Server error"
          }
        },
        "security": [
          {
            "ApiKeyAuth": []
          },
          {
            "jwt": []
          }
        ],
        "summary": "Deploy a new compose stack from a file",
        "tags": [
          "stacks"
        ]
      }
    },
    "/stacks/create/standalone/repository": {
      "post": {
        "consumes": [
          "application/json"
        ],
        "description": "Deploy a new stack into a Docker environment specified via the environment identifier.\n**Access policy**: authenticated",
        "operationId": "StackCreateDockerStandaloneRepository",
        "parameters": [
          {
            "description": "Identifier of the environment that will be used to deploy the stack",
            "in": "query",
            "name": "endpointId",
            "required": true,
            "type": "integer"
          },
          {
            "description": "stack config",
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/stacks.composeStackFromGitRepositoryPayload"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/portainer.Stack"
            }
          },
          "400": {
            "description": "Invalid request"
          },
          "409": {
            "description": "Stack name or webhook ID already exists"
          },
          "500": {
            "description": "Server error"
          }
        },
        "security": [
          {
            "ApiKeyAuth": []
          },
          {
            "jwt": []
          }
        ],
        "summary": "Deploy a new compose stack from repository",
        "tags": [
          "stacks"
        ]
      }
    },
    "/stacks/create/standalone/string": {
      "post": {
        "consumes": [
          "application/json"
        ],
        "description": "Deploy a new stack into a Docker environment specified via the environment identifier.\n**Access policy**: authenticated",
        "operationId": "StackCreateDockerStandaloneString",
        "parameters": [
          {
            "description": "stack config",
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/stacks.composeStackFromFileContentPayload"
            }
          },
          {
            "description": "Identifier of the environment that will be used to deploy the stack",
            "in": "query",
            "name": "endpointId",
            "required": true,
            "type": "integer"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/portainer.Stack"
            }
          },
          "400": {
            "description": "Invalid request"
          },
          "500": {
            "description": "Server error"
          }
        },
        "security": [
          {
            "ApiKeyAuth": []
          },
          {
            "jwt": []
          }
        ],
        "summary": "Deploy a new compose stack from a text",
        "tags": [
          "stacks"
        ]
      }
    },
    "/stacks/create/swarm/file": {
      "post": {
        "consumes": [
          "multipart/form-data"
        ],
        "description": "Deploy a new stack into a Docker environment specified via the environment identifier.\n**Access policy**: authenticated",
        "operationId": "StackCreateDockerSwarmFile",
        "parameters": [
          {
            "description": "Name of the stack",
            "in": "formData",
            "name": "Name",
            "type": "string"
          },
          {
            "description": "Swarm cluster identifier.",
            "in": "formData",
            "name": "SwarmID",
            "type": "string"
          },
          {
            "description": "Environment variables passed during deployment, represented as a JSON array [{'name': 'name', 'value': 'value'}]. Optional",
            "in": "formData",
            "name": "Env",
            "type": "string"
          },
          {
            "description": "Stack file",
            "in": "formData",
            "name": "file",
            "type": "file"
          },
          {
            "description": "Identifier of the environment that will be used to deploy the stack",
            "in": "query",
            "name": "endpointId",
            "required": true,
            "type": "integer"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/portainer.Stack"
            }
          },
          "400": {
            "description": "Invalid request"
          },
          "500": {
            "description": "Server error"
          }
        },
        "security": [
          {
            "ApiKeyAuth": []
          },
          {
            "jwt": []
          }
        ],
        "summary": "Deploy a new swarm stack from a file",
        "tags": [
          "stacks"
        ]
      }
    },
    "/stacks/create/swarm/repository": {
      "post": {
        "consumes": [
          "application/json"
        ],
        "description": "Deploy a new stack into a Docker environment specified via the environment identifier.\n**Access policy**: authenticated",
        "operationId": "StackCreateDockerSwarmRepository",
        "parameters": [
          {
            "description": "Identifier of the environment that will be used to deploy the stack",
            "in": "query",
            "name": "endpointId",
            "required": true,
            "type": "integer"
          },
          {
            "description": "stack config",
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/stacks.swarmStackFromGitRepositoryPayload"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/portainer.Stack"
            }
          },
          "400": {
            "description": "Invalid request"
          },
          "409": {
            "description": "Stack name or webhook ID already exists"
          },
          "500": {
            "description": "Server error"
          }
        },
        "security": [
          {
            "ApiKeyAuth": []
          },
          {
            "jwt": []
          }
        ],
        "summary": "Deploy a new swarm stack from a git repository",
        "tags": [
          "stacks"
        ]
      }
    },
    "/stacks/create/swarm/string": {
      "post": {
        "consumes": [
          "application/json"
        ],
        "description": "Deploy a new stack into a Docker environment specified via the environment identifier.\n**Access policy**: authenticated",
        "operationId": "StackCreateDockerSwarmString",
        "parameters": [
          {
            "description": "stack config",
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/stacks.swarmStackFromFileContentPayload"
            }
          },
          {
            "description": "Identifier of the environment that will be used to deploy the stack",
            "in": "query",
            "name": "endpointId",
            "required": true,
            "type": "integer"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/portainer.Stack"
            }
          },
          "400": {
            "description": "Invalid request"
          },
          "500": {
            "description": "Server error"
          }
        },
        "security": [
          {
            "ApiKeyAuth": []
          },
          {
            "jwt": []
          }
        ],
        "summary": "Deploy a new swarm stack from a text",
        "tags": [
          "stacks"
        ]
      }
    },
    "/stacks/name/{name}": {
      "delete": {
        "description": "Remove a stack.\n**Access policy**: restricted",
        "operationId": "StackDeleteKubernetesByName",
        "parameters": [
          {
            "description": "Stack name",
            "in": "path",
            "name": "name",
            "required": true,
            "type": "string"
          },
          {
            "description": "Set to true to delete an external stack. Only external Swarm stacks are supported",
            "in": "query",
            "name": "external",
            "type": "boolean"
          },
          {
            "description": "Environment identifier",
            "in": "query",
            "name": "endpointId",
            "required": true,
            "type": "integer"
          }
        ],
        "responses": {
          "204": {
            "description": "Success"
          },
          "400": {
            "description": "Invalid request"
          },
          "403": {
            "description": "Permission denied"
          },
          "404": {
            "description": "Not found"
          },
          "500": {
            "description": "Server error"
          }
        },
        "security": [
          {
            "ApiKeyAuth": []
          },
          {
            "jwt": []
          }
        ],
        "summary": "Remove Kubernetes stacks by name",
        "tags": [
          "stacks"
        ]
      }
    },
    "/stacks/webhooks/{webhookID}": {
      "post": {
        "description": "**Access policy**: public",
        "operationId": "WebhookInvoke",
        "parameters": [
          {
            "description": "Stack identifier",
            "in": "path",
            "name": "webhookID",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          },
          "400": {
            "description": "Invalid request"
          },
          "409": {
            "description": "Autoupdate for the stack isn't available"
          },
          "500": {
            "description": "Server error"
          }
        },
        "summary": "Webhook for triggering stack updates from git",
        "tags": [
          "stacks"
        ]
      }
    },
    "/status": {
      "get": {
        "deprecated": true,
        "description": "Deprecated: use the `/system/status` endpoint instead.\nRetrieve Portainer status\n**Access policy**: public",
        "operationId": "StatusInspect",
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/system.status"
            }
          }
        },
        "summary": "Check Portainer status",
        "tags": [
          "status"
        ]
      }
    },
    "/status/nodes": {
      "get": {
        "deprecated": true,
        "description": "Deprecated: use the `/system/nodes` endpoint instead.\n**Access policy**: authenticated",
        "operationId": "statusNodesCount",
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/system.nodesCountResponse"
            }
          },
          "500": {
            "description": "Server error"
          }
        },
        "security": [
          {
            "ApiKeyAuth": []
          },
          {
            "jwt": []
          }
        ],
        "summary": "Retrieve the count of nodes",
        "tags": [
          "status"
        ]
      }
    },
    "/status/version": {
      "get": {
        "deprecated": true,
        "description": "Deprecated: use the `/system/version` endpoint instead.\nCheck if portainer has an update available\n**Access policy**: authenticated",
        "operationId": "Version",
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/system.versionResponse"
            }
          }
        },
        "security": [
          {
            "ApiKeyAuth": []
          },
          {
            "jwt": []
          }
        ],
        "summary": "Check for portainer updates",
        "tags": [
          "status"
        ]
      }
    },
    "/system/info": {
      "get": {
        "description": "**Access policy**: authenticated",
        "operationId": "systemInfo",
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/system.systemInfoResponse"
            }
          },
          "500": {
            "description": "Server error"
          }
        },
        "security": [
          {
            "ApiKeyAuth": []
          },
          {
            "jwt": []
          }
        ],
        "summary": "Retrieve system info",
        "tags": [
          "system"
        ]
      }
    },
    "/system/nodes": {
      "get": {
        "description": "**Access policy**: authenticated",
        "operationId": "systemNodesCount",
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/system.nodesCountResponse"
            }
          },
          "500": {
            "description": "Server error"
          }
        },
        "security": [
          {
            "ApiKeyAuth": []
          },
          {
            "jwt": []
          }
        ],
        "summary": "Retrieve the count of nodes",
        "tags": [
          "system"
        ]
      }
    },
    "/system/status": {
      "get": {
        "description": "Retrieve Portainer status\n**Access policy**: public",
        "operationId": "systemStatus",
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/system.status"
            }
          }
        },
        "summary": "Check Portainer status",
        "tags": [
          "system"
        ]
      }
    },
    "/system/upgrade": {
      "post": {
        "description": "Upgrade Portainer to BE\n**Access policy**: administrator",
        "operationId": "systemUpgrade",
        "produces": [
          "application/json"
        ],
        "responses": {
          "204": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/system.status"
            }
          }
        },
        "summary": "Upgrade Portainer to BE",
        "tags": [
          "system"
        ]
      }
    },
    "/system/version": {
      "get": {
        "description": "Check if portainer has an update available\n**Access policy**: authenticated",
        "operationId": "systemVersion",
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/system.versionResponse"
            }
          }
        },
        "security": [
          {
            "ApiKeyAuth": []
          },
          {
            "jwt": []
          }
        ],
        "summary": "Check for portainer updates",
        "tags": [
          "system"
        ]
      }
    },
    "/tags": {
      "get": {
        "description": "List tags.\n**Access policy**: authenticated",
        "operationId": "TagList",
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "items": {
                "$ref": "#/definitions/portainer.Tag"
              },
              "type": "array"
            }
          },
          "500": {
            "description": "Server error"
          }
        },
        "security": [
          {
            "ApiKeyAuth": []
          },
          {
            "jwt": []
          }
        ],
        "summary": "List tags",
        "tags": [
          "tags"
        ]
      },
      "post": {
        "consumes": [
          "application/json"
        ],
        "description": "Create a new tag.\n**Access policy**: administrator",
        "operationId": "TagCreate",
        "parameters": [
          {
            "description": "Tag details",
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/tags.tagCreatePayload"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/portainer.Tag"
            }
          },
          "409": {
            "description": "This name is already associated to a tag"
          },
          "500": {
            "description": "Server error"
          }
        },
        "security": [
          {
            "ApiKeyAuth": []
          },
          {
            "jwt": []
          }
        ],
        "summary": "Create a new tag",
        "tags": [
          "tags"
        ]
      }
    },
    "/tags/{id}": {
      "delete": {
        "description": "Remove a tag.\n**Access policy**: administrator",
        "operationId": "TagDelete",
        "parameters": [
          {
            "description": "Tag identifier",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "integer"
          }
        ],
        "responses": {
          "204": {
            "description": "Success"
          },
          "400": {
            "description": "Invalid request"
          },
          "403": {
            "description": "Permission denied"
          },
          "404": {
            "description": "Tag not found"
          },
          "500": {
            "description": "Server error"
          }
        },
        "security": [
          {
            "ApiKeyAuth": []
          },
          {
            "jwt": []
          }
        ],
        "summary": "Remove a tag",
        "tags": [
          "tags"
        ]
      }
    },
    "/team_memberships": {
      "get": {
        "description": "List team memberships. Access is only available to administrators and team leaders.\n**Access policy**: administrator",
        "operationId": "TeamMembershipList",
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "items": {
                "$ref": "#/definitions/portainer.TeamMembership"
              },
              "type": "array"
            }
          },
          "400": {
            "description": "Invalid request"
          },
          "403": {
            "description": "Permission denied"
          },
          "500": {
            "description": "Server error"
          }
        },
        "security": [
          {
            "ApiKeyAuth": []
          },
          {
            "jwt": []
          }
        ],
        "summary": "List team memberships",
        "tags": [
          "team_memberships"
        ]
      },
      "post": {
        "consumes": [
          "application/json"
        ],
        "description": "Create a new team memberships. Access is only available to administrators leaders of the associated team.\n**Access policy**: administrator",
        "operationId": "TeamMembershipCreate",
        "parameters": [
          {
            "description": "Team membership details",
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/teammemberships.teamMembershipCreatePayload"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/portainer.TeamMembership"
            }
          },
          "204": {
            "description": "Success"
          },
          "400": {
            "description": "Invalid request"
          },
          "403": {
            "description": "Permission denied to manage memberships"
          },
          "409": {
            "description": "Team membership already registered"
          },
          "500": {
            "description": "Server error"
          }
        },
        "security": [
          {
            "ApiKeyAuth": []
          },
          {
            "jwt": []
          }
        ],
        "summary": "Create a new team membership",
        "tags": [
          "team_memberships"
        ]
      }
    },
    "/team_memberships/{id}": {
      "delete": {
        "description": "Remove a team membership. Access is only available to administrators leaders of the associated team.\n**Access policy**: administrator",
        "operationId": "TeamMembershipDelete",
        "parameters": [
          {
            "description": "TeamMembership identifier",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "integer"
          }
        ],
        "responses": {
          "204": {
            "description": "Success"
          },
          "400": {
            "description": "Invalid request"
          },
          "403": {
            "description": "Permission denied"
          },
          "404": {
            "description": "TeamMembership not found"
          },
          "500": {
            "description": "Server error"
          }
        },
        "security": [
          {
            "ApiKeyAuth": []
          },
          {
            "jwt": []
          }
        ],
        "summary": "Remove a team membership",
        "tags": [
          "team_memberships"
        ]
      },
      "put": {
        "consumes": [
          "application/json"
        ],
        "description": "Update a team membership. Access is only available to administrators or leaders of the associated team.\n**Access policy**: administrator or leaders of the associated team",
        "operationId": "TeamMembershipUpdate",
        "parameters": [
          {
            "description": "Team membership identifier",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "integer"
          },
          {
            "description": "Team membership details",
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/teammemberships.teamMembershipUpdatePayload"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/portainer.TeamMembership"
            }
          },
          "400": {
            "description": "Invalid request"
          },
          "403": {
            "description": "Permission denied"
          },
          "404": {
            "description": "TeamMembership not found"
          },
          "500": {
            "description": "Server error"
          }
        },
        "security": [
          {
            "ApiKeyAuth": []
          },
          {
            "jwt": []
          }
        ],
        "summary": "Update a team membership",
        "tags": [
          "team_memberships"
        ]
      }
    },
    "/teams": {
      "get": {
        "description": "List teams. For non-administrator users, will only list the teams they are member of.\n**Access policy**: restricted",
        "operationId": "TeamList",
        "parameters": [
          {
            "description": "Only list teams that the user is leader of",
            "in": "query",
            "name": "onlyLedTeams",
            "type": "boolean"
          },
          {
            "description": "Identifier of the environment(endpoint) that will be used to filter the authorized teams",
            "in": "query",
            "name": "environmentId",
            "type": "integer"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "items": {
                "$ref": "#/definitions/portainer.Team"
              },
              "type": "array"
            }
          },
          "500": {
            "description": "Server error"
          }
        },
        "security": [
          {
            "ApiKeyAuth": []
          },
          {
            "jwt": []
          }
        ],
        "summary": "List teams",
        "tags": [
          "teams"
        ]
      },
      "post": {
        "consumes": [
          "application/json"
        ],
        "description": "Create a new team.\n**Access policy**: administrator",
        "operationId": "TeamCreate",
        "parameters": [
          {
            "description": "details",
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/teams.teamCreatePayload"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/portainer.Team"
            }
          },
          "400": {
            "description": "Invalid request"
          },
          "409": {
            "description": "A team with the same name already exists"
          },
          "500": {
            "description": "Server error"
          }
        },
        "security": [
          {
            "ApiKeyAuth": []
          },
          {
            "jwt": []
          }
        ],
        "summary": "Create a new team",
        "tags": [
          "teams"
        ]
      }
    },
    "/teams/{id}": {
      "delete": {
        "description": "Remove a team.\n**Access policy**: administrator",
        "operationId": "TeamDelete",
        "parameters": [
          {
            "description": "Team Id",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "integer"
          }
        ],
        "responses": {
          "204": {
            "description": "Success"
          },
          "400": {
            "description": "Invalid request"
          },
          "403": {
            "description": "Permission denied"
          },
          "404": {
            "description": "Team not found"
          },
          "500": {
            "description": "Server error"
          }
        },
        "security": [
          {
            "ApiKeyAuth": []
          },
          {
            "jwt": []
          }
        ],
        "summary": "Remove a team",
        "tags": [
          "teams"
        ]
      },
      "get": {
        "description": "Retrieve details about a team. Access is only available for administrator and leaders of that team.\n**Access policy**: administrator",
        "operationId": "TeamInspect",
        "parameters": [
          {
            "description": "Team identifier",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "integer"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/portainer.Team"
            }
          },
          "204": {
            "description": "Success"
          },
          "400": {
            "description": "Invalid request"
          },
          "403": {
            "description": "Permission denied"
          },
          "404": {
            "description": "Team not found"
          },
          "500": {
            "description": "Server error"
          }
        },
        "security": [
          {
            "ApiKeyAuth": []
          },
          {
            "jwt": []
          }
        ],
        "summary": "Inspect a team",
        "tags": [
          "teams"
        ]
      },
      "put": {
        "consumes": [
          "application/json"
        ],
        "description": "Update a team.\n**Access policy**: administrator",
        "operationId": "TeamUpdate",
        "parameters": [
          {
            "description": "Team identifier",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "integer"
          },
          {
            "description": "Team details",
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/teams.teamUpdatePayload"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/portainer.Team"
            }
          },
          "204": {
            "description": "Success"
          },
          "400": {
            "description": "Invalid request"
          },
          "403": {
            "description": "Permission denied"
          },
          "404": {
            "description": "Team not found"
          },
          "500": {
            "description": "Server error"
          }
        },
        "security": [
          {
            "ApiKeyAuth": []
          },
          {
            "jwt": []
          }
        ],
        "summary": "Update a team",
        "tags": [
          "teams"
        ]
      }
    },
    "/teams/{id}/memberships": {
      "get": {
        "description": "List team memberships. Access is only available to administrators and team leaders.\n**Access policy**: restricted",
        "operationId": "TeamMemberships",
        "parameters": [
          {
            "description": "Team Id",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "integer"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "items": {
                "$ref": "#/definitions/portainer.TeamMembership"
              },
              "type": "array"
            }
          },
          "400": {
            "description": "Invalid request"
          },
          "403": {
            "description": "Permission denied"
          },
          "500": {
            "description": "Server error"
          }
        },
        "security": [
          {
            "ApiKeyAuth": []
          },
          {
            "jwt": []
          }
        ],
        "summary": "List team memberships",
        "tags": [
          "team_memberships"
        ]
      }
    },
    "/templates": {
      "get": {
        "description": "List available templates.\n**Access policy**: authenticated",
        "operationId": "TemplateList",
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/templates.listResponse"
            }
          },
          "500": {
            "description": "Server error"
          }
        },
        "security": [
          {
            "ApiKeyAuth": []
          },
          {
            "jwt": []
          }
        ],
        "summary": "List available templates",
        "tags": [
          "templates"
        ]
      }
    },
    "/templates/{id}/file": {
      "post": {
        "consumes": [
          "application/json"
        ],
        "description": "Get a template's file\n**Access policy**: authenticated",
        "operationId": "TemplateFile",
        "parameters": [
          {
            "description": "Template identifier",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "integer"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/templates.fileResponse"
            }
          },
          "400": {
            "description": "Invalid request"
          },
          "500": {
            "description": "Server error"
          }
        },
        "security": [
          {
            "ApiKeyAuth": []
          },
          {
            "jwt": []
          }
        ],
        "summary": "Get a template's file",
        "tags": [
          "templates"
        ]
      }
    },
    "/templates/file": {
      "post": {
        "consumes": [
          "application/json"
        ],
        "deprecated": true,
        "description": "Get a template's file\n**Access policy**: authenticated",
        "operationId": "TemplateFileOld",
        "parameters": [
          {
            "description": "File details",
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/templates.filePayload"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/templates.fileResponse"
            }
          },
          "400": {
            "description": "Invalid request"
          },
          "500": {
            "description": "Server error"
          }
        },
        "security": [
          {
            "ApiKeyAuth": []
          },
          {
            "jwt": []
          }
        ],
        "summary": "Get a template's file",
        "tags": [
          "templates"
        ]
      }
    },
    "/templates/helm": {
      "get": {
        "description": "**Access policy**: authenticated",
        "operationId": "HelmRepoSearch",
        "parameters": [
          {
            "description": "Helm repository URL",
            "in": "query",
            "name": "repo",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "type": "string"
            }
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Not found"
          },
          "500": {
            "description": "Server error"
          }
        },
        "security": [
          {
            "ApiKeyAuth": []
          },
          {
            "jwt": []
          }
        ],
        "summary": "Search Helm Charts",
        "tags": [
          "helm"
        ]
      }
    },
    "/templates/helm/{command}": {
      "get": {
        "consumes": [
          "application/json"
        ],
        "description": "**Access policy**: authenticated",
        "operationId": "HelmShow",
        "parameters": [
          {
            "description": "Helm repository URL",
            "in": "query",
            "name": "repo",
            "required": true,
            "type": "string"
          },
          {
            "description": "Chart name",
            "in": "query",
            "name": "chart",
            "required": true,
            "type": "string"
          },
          {
            "description": "chart/values/readme",
            "in": "path",
            "name": "command",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "text/plain"
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "type": "string"
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Environment(Endpoint) or ServiceAccount not found"
          },
          "500": {
            "description": "Server error"
          }
        },
        "security": [
          {
            "ApiKeyAuth": []
          },
          {
            "jwt": []
          }
        ],
        "summary": "Show Helm Chart Information",
        "tags": [
          "helm"
        ]
      }
    },
    "/upload/tls/{certificate}": {
      "post": {
        "consumes": [
          "multipart/form-data"
        ],
        "description": "Use this environment(endpoint) to upload TLS files.\n**Access policy**: administrator",
        "operationId": "UploadTLS",
        "parameters": [
          {
            "description": "TLS file type. Valid values are 'ca', 'cert' or 'key'.",
            "enum": [
              "ca",
              "cert",
              "key"
            ],
            "in": "path",
            "name": "certificate",
            "required": true,
            "type": "string"
          },
          {
            "description": "Folder where the TLS file will be stored. Will be created if not existing",
            "in": "formData",
            "name": "folder",
            "required": true,
            "type": "string"
          },
          {
            "description": "The file to upload",
            "in": "formData",
            "name": "file",
            "required": true,
            "type": "file"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "204": {
            "description": "Success"
          },
          "400": {
            "description": "Invalid request"
          },
          "500": {
            "description": "Server error"
          }
        },
        "security": [
          {
            "ApiKeyAuth": []
          },
          {
            "jwt": []
          }
        ],
        "summary": "Upload TLS files",
        "tags": [
          "upload"
        ]
      }
    },
    "/users": {
      "get": {
        "description": "List Portainer users.\nNon-administrator users will only be able to list other non-administrator user accounts.\nUser passwords are filtered out, and should never be accessible.\n**Access policy**: restricted",
        "operationId": "UserList",
        "parameters": [
          {
            "description": "Identifier of the environment(endpoint) that will be used to filter the authorized users",
            "in": "query",
            "name": "environmentId",
            "type": "integer"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "items": {
                "$ref": "#/definitions/portainer.User"
              },
              "type": "array"
            }
          },
          "400": {
            "description": "Invalid request"
          },
          "500": {
            "description": "Server error"
          }
        },
        "security": [
          {
            "ApiKeyAuth": []
          },
          {
            "jwt": []
          }
        ],
        "summary": "List users",
        "tags": [
          "users"
        ]
      },
      "post": {
        "consumes": [
          "application/json"
        ],
        "description": "Create a new Portainer user.\nOnly administrators can create users.\n**Access policy**: restricted",
        "operationId": "UserCreate",
        "parameters": [
          {
            "description": "User details",
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/users.userCreatePayload"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/portainer.User"
            }
          },
          "400": {
            "description": "Invalid request"
          },
          "403": {
            "description": "Permission denied"
          },
          "409": {
            "description": "User already exists"
          },
          "500": {
            "description": "Server error"
          }
        },
        "security": [
          {
            "ApiKeyAuth": []
          },
          {
            "jwt": []
          }
        ],
        "summary": "Create a new user",
        "tags": [
          "users"
        ]
      }
    },
    "/users/{id}": {
      "delete": {
        "description": "Remove a user.\n**Access policy**: administrator",
        "operationId": "UserDelete",
        "parameters": [
          {
            "description": "User identifier",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "integer"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "204": {
            "description": "Success"
          },
          "400": {
            "description": "Invalid request"
          },
          "403": {
            "description": "Permission denied"
          },
          "404": {
            "description": "User not found"
          },
          "500": {
            "description": "Server error"
          }
        },
        "security": [
          {
            "ApiKeyAuth": []
          },
          {
            "jwt": []
          }
        ],
        "summary": "Remove a user",
        "tags": [
          "users"
        ]
      },
      "get": {
        "description": "Retrieve details about a user.\nUser passwords are filtered out, and should never be accessible.\n**Access policy**: authenticated",
        "operationId": "UserInspect",
        "parameters": [
          {
            "description": "User identifier",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "integer"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/portainer.User"
            }
          },
          "400": {
            "description": "Invalid request"
          },
          "403": {
            "description": "Permission denied"
          },
          "404": {
            "description": "User not found"
          },
          "500": {
            "description": "Server error"
          }
        },
        "security": [
          {
            "ApiKeyAuth": []
          },
          {
            "jwt": []
          }
        ],
        "summary": "Inspect a user",
        "tags": [
          "users"
        ]
      },
      "put": {
        "consumes": [
          "application/json"
        ],
        "description": "Update user details. A regular user account can only update his details.\nA regular user account cannot change their username or role.\n**Access policy**: authenticated",
        "operationId": "UserUpdate",
        "parameters": [
          {
            "description": "User identifier",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "integer"
          },
          {
            "description": "User details",
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/users.userUpdatePayload"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/portainer.User"
            }
          },
          "400": {
            "description": "Invalid request"
          },
          "403": {
            "description": "Permission denied"
          },
          "404": {
            "description": "User not found"
          },
          "409": {
            "description": "Username already exist"
          },
          "500": {
            "description": "Server error"
          }
        },
        "security": [
          {
            "ApiKeyAuth": []
          },
          {
            "jwt": []
          }
        ],
        "summary": "Update a user",
        "tags": [
          "users"
        ]
      }
    },
    "/users/{id}/helm/repositories": {
      "get": {
        "description": "Inspect a user helm repositories.\n**Access policy**: authenticated",
        "operationId": "HelmUserRepositoriesList",
        "parameters": [
          {
            "description": "User identifier",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "integer"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/users.helmUserRepositoryResponse"
            }
          },
          "400": {
            "description": "Invalid request"
          },
          "403": {
            "description": "Permission denied"
          },
          "500": {
            "description": "Server error"
          }
        },
        "security": [
          {
            "ApiKeyAuth": []
          },
          {
            "jwt": []
          }
        ],
        "summary": "List a users helm repositories",
        "tags": [
          "helm"
        ]
      },
      "post": {
        "consumes": [
          "application/json"
        ],
        "description": "Create a user helm repository.\n**Access policy**: authenticated",
        "operationId": "HelmUserRepositoryCreate",
        "parameters": [
          {
            "description": "User identifier",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "integer"
          },
          {
            "description": "Helm Repository",
            "in": "body",
            "name": "payload",
            "required": true,
            "schema": {
              "$ref": "#/definitions/users.addHelmRepoUrlPayload"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/portainer.HelmUserRepository"
            }
          },
          "400": {
            "description": "Invalid request"
          },
          "403": {
            "description": "Permission denied"
          },
          "500": {
            "description": "Server error"
          }
        },
        "security": [
          {
            "ApiKeyAuth": []
          },
          {
            "jwt": []
          }
        ],
        "summary": "Create a user helm repository",
        "tags": [
          "helm"
        ]
      }
    },
    "/users/{id}/helm/repositories/{repositoryID}": {
      "delete": {
        "description": "**Access policy**: authenticated",
        "operationId": "HelmUserRepositoryDelete",
        "parameters": [
          {
            "description": "User identifier",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "integer"
          },
          {
            "description": "Repository identifier",
            "in": "path",
            "name": "repositoryID",
            "required": true,
            "type": "integer"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "204": {
            "description": "Success"
          },
          "400": {
            "description": "Invalid request"
          },
          "403": {
            "description": "Permission denied"
          },
          "500": {
            "description": "Server error"
          }
        },
        "security": [
          {
            "ApiKeyAuth": []
          },
          {
            "jwt": []
          }
        ],
        "summary": "Delete a users helm repositoryies",
        "tags": [
          "helm"
        ]
      }
    },
    "/users/{id}/memberships": {
      "get": {
        "description": "Inspect a user memberships.\n**Access policy**: restricted",
        "operationId": "UserMembershipsInspect",
        "parameters": [
          {
            "description": "User identifier",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "integer"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/portainer.TeamMembership"
            }
          },
          "400": {
            "description": "Invalid request"
          },
          "403": {
            "description": "Permission denied"
          },
          "500": {
            "description": "Server error"
          }
        },
        "security": [
          {
            "ApiKeyAuth": []
          },
          {
            "jwt": []
          }
        ],
        "summary": "Inspect a user memberships",
        "tags": [
          "users"
        ]
      }
    },
    "/users/{id}/passwd": {
      "put": {
        "consumes": [
          "application/json"
        ],
        "description": "Update password for the specified user.\n**Access policy**: authenticated",
        "operationId": "UserUpdatePassword",
        "parameters": [
          {
            "description": "identifier",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "integer"
          },
          {
            "description": "details",
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/users.userUpdatePasswordPayload"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "204": {
            "description": "Success"
          },
          "400": {
            "description": "Invalid request"
          },
          "403": {
            "description": "Permission denied"
          },
          "404": {
            "description": "User not found"
          },
          "500": {
            "description": "Server error"
          }
        },
        "security": [
          {
            "ApiKeyAuth": []
          },
          {
            "jwt": []
          }
        ],
        "summary": "Update password for a user",
        "tags": [
          "users"
        ]
      }
    },
    "/users/{id}/tokens": {
      "get": {
        "description": "Gets all API keys for a user.\nOnly the calling user or admin can retrieve api-keys.\n**Access policy**: authenticated",
        "operationId": "UserGetAPIKeys",
        "parameters": [
          {
            "description": "User identifier",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "integer"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "items": {
                "$ref": "#/definitions/portainer.APIKey"
              },
              "type": "array"
            }
          },
          "400": {
            "description": "Invalid request"
          },
          "403": {
            "description": "Permission denied"
          },
          "404": {
            "description": "User not found"
          },
          "500": {
            "description": "Server error"
          }
        },
        "security": [
          {
            "ApiKeyAuth": []
          },
          {
            "jwt": []
          }
        ],
        "summary": "Get all API keys for a user",
        "tags": [
          "users"
        ]
      },
      "post": {
        "consumes": [
          "application/json"
        ],
        "description": "Generates an API key for a user.\nOnly the calling user can generate a token for themselves.\nPassword is required only for internal authentication.\n**Access policy**: restricted",
        "operationId": "UserGenerateAPIKey",
        "parameters": [
          {
            "description": "User identifier",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "integer"
          },
          {
            "description": "details",
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/users.userAccessTokenCreatePayload"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/users.accessTokenResponse"
            }
          },
          "400": {
            "description": "Invalid request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Permission denied"
          },
          "404": {
            "description": "User not found"
          },
          "500": {
            "description": "Server error"
          }
        },
        "security": [
          {
            "jwt": []
          }
        ],
        "summary": "Generate an API key for a user",
        "tags": [
          "users"
        ]
      }
    },
    "/users/{id}/tokens/{keyID}": {
      "delete": {
        "description": "Remove an api-key associated to a user..\nOnly the calling user or admin can remove api-key.\n**Access policy**: authenticated",
        "operationId": "UserRemoveAPIKey",
        "parameters": [
          {
            "description": "User identifier",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "integer"
          },
          {
            "description": "Api Key identifier",
            "in": "path",
            "name": "keyID",
            "required": true,
            "type": "integer"
          }
        ],
        "responses": {
          "204": {
            "description": "Success"
          },
          "400": {
            "description": "Invalid request"
          },
          "403": {
            "description": "Permission denied"
          },
          "404": {
            "description": "Not found"
          },
          "500": {
            "description": "Server error"
          }
        },
        "security": [
          {
            "ApiKeyAuth": []
          },
          {
            "jwt": []
          }
        ],
        "summary": "Remove an api-key associated to a user",
        "tags": [
          "users"
        ]
      }
    },
    "/users/admin/check": {
      "get": {
        "description": "Check if an administrator account exists in the database.\n**Access policy**: public",
        "operationId": "UserAdminCheck",
        "responses": {
          "204": {
            "description": "Success"
          },
          "404": {
            "description": "User not found"
          }
        },
        "summary": "Check administrator account existence",
        "tags": [
          "users"
        ]
      }
    },
    "/users/admin/init": {
      "post": {
        "consumes": [
          "application/json"
        ],
        "description": "Initialize the 'admin' user account.\n**Access policy**: public",
        "operationId": "UserAdminInit",
        "parameters": [
          {
            "description": "User details",
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/users.adminInitPayload"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/portainer.User"
            }
          },
          "400": {
            "description": "Invalid request"
          },
          "409": {
            "description": "Admin user already initialized"
          },
          "500": {
            "description": "Server error"
          }
        },
        "summary": "Initialize administrator account",
        "tags": [
          "users"
        ]
      }
    },
    "/users/me": {
      "get": {
        "description": "Retrieve details about the current  user.\nUser passwords are filtered out, and should never be accessible.\n**Access policy**: authenticated",
        "operationId": "CurrentUserInspect",
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/portainer.User"
            }
          },
          "400": {
            "description": "Invalid request"
          },
          "403": {
            "description": "Permission denied"
          },
          "404": {
            "description": "User not found"
          },
          "500": {
            "description": "Server error"
          }
        },
        "security": [
          {
            "ApiKeyAuth": []
          },
          {
            "jwt": []
          }
        ],
        "summary": "Inspect the current user user",
        "tags": [
          "users"
        ]
      }
    },
    "/webhooks": {
      "get": {
        "consumes": [
          "application/json"
        ],
        "description": "**Access policy**: authenticated",
        "parameters": [
          {
            "description": "Filters (json-string)",
            "example": "{\"EndpointID\":1,\"ResourceID\":\"abc12345-abcd-2345-ab12-58005b4a0260\"}",
            "in": "query",
            "name": "filters",
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "items": {
                "$ref": "#/definitions/portainer.Webhook"
              },
              "type": "array"
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "500": {
            "description": "Internal Server Error"
          }
        },
        "security": [
          {
            "ApiKeyAuth": []
          },
          {
            "jwt": []
          }
        ],
        "summary": "List webhooks",
        "tags": [
          "webhooks"
        ]
      },
      "post": {
        "consumes": [
          "application/json"
        ],
        "description": "**Access policy**: authenticated",
        "parameters": [
          {
            "description": "Webhook data",
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/webhooks.webhookCreatePayload"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/portainer.Webhook"
            }
          },
          "400": {
            "description": "Invalid request"
          },
          "409": {
            "description": "A webhook for this resource already exists"
          },
          "500": {
            "description": "Server error"
          }
        },
        "security": [
          {
            "ApiKeyAuth": []
          },
          {
            "jwt": []
          }
        ],
        "summary": "Create a webhook",
        "tags": [
          "webhooks"
        ]
      }
    },
    "/webhooks/{id}": {
      "delete": {
        "description": "**Access policy**: authenticated",
        "parameters": [
          {
            "description": "Webhook id",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "integer"
          }
        ],
        "responses": {
          "202": {
            "description": "Webhook deleted"
          },
          "400": {
            "description": "Bad Request"
          },
          "500": {
            "description": "Internal Server Error"
          }
        },
        "security": [
          {
            "ApiKeyAuth": []
          },
          {
            "jwt": []
          }
        ],
        "summary": "Delete a webhook",
        "tags": [
          "webhooks"
        ]
      },
      "post": {
        "description": "Acts on a passed in token UUID to restart the docker service\n**Access policy**: public",
        "parameters": [
          {
            "description": "Webhook token",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "202": {
            "description": "Webhook executed"
          },
          "400": {
            "description": "Bad Request"
          },
          "500": {
            "description": "Internal Server Error"
          }
        },
        "summary": "Execute a webhook",
        "tags": [
          "webhooks"
        ]
      },
      "put": {
        "consumes": [
          "application/json"
        ],
        "description": "**Access policy**: authenticated",
        "parameters": [
          {
            "description": "Webhook id",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "integer"
          },
          {
            "description": "Webhook data",
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/components/webhooks/webhookUpdatePayload"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/portainer.Webhook"
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "409": {
            "description": "Conflict"
          },
          "500": {
            "description": "Internal Server Error"
          }
        },
        "security": [
          {
            "ApiKeyAuth": []
          },
          {
            "jwt": []
          }
        ],
        "summary": "Update a webhook",
        "tags": [
          "webhooks"
        ]
      }
    },
    "/websocket/attach": {
      "get": {
        "consumes": [
          "application/json"
        ],
        "description": "If the nodeName query parameter is present, the request will be proxied to the underlying agent environment(endpoint).\nIf the nodeName query parameter is not specified, the request will be upgraded to the websocket protocol and\nan AttachStart operation HTTP request will be created and hijacked.\n**Access policy**: authenticated",
        "parameters": [
          {
            "description": "environment(endpoint) ID of the environment(endpoint) where the resource is located",
            "in": "query",
            "name": "endpointId",
            "required": true,
            "type": "integer"
          },
          {
            "description": "node name",
            "in": "query",
            "name": "nodeName",
            "type": "string"
          },
          {
            "description": "JWT token used for authentication against this environment(endpoint)",
            "in": "query",
            "name": "token",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "400": {
            "description": "Bad Request"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          },
          "500": {
            "description": "Internal Server Error"
          }
        },
        "security": [
          {
            "ApiKeyAuth": []
          },
          {
            "jwt": []
          }
        ],
        "summary": "Attach a websocket",
        "tags": [
          "websocket"
        ]
      }
    },
    "/websocket/exec": {
      "get": {
        "consumes": [
          "application/json"
        ],
        "description": "If the nodeName query parameter is present, the request will be proxied to the underlying agent environment(endpoint).\nIf the nodeName query parameter is not specified, the request will be upgraded to the websocket protocol and\nan ExecStart operation HTTP request will be created and hijacked.",
        "parameters": [
          {
            "description": "environment(endpoint) ID of the environment(endpoint) where the resource is located",
            "in": "query",
            "name": "endpointId",
            "required": true,
            "type": "integer"
          },
          {
            "description": "node name",
            "in": "query",
            "name": "nodeName",
            "type": "string"
          },
          {
            "description": "JWT token used for authentication against this environment(endpoint)",
            "in": "query",
            "name": "token",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "400": {
            "description": "Bad Request"
          },
          "409": {
            "description": "Conflict"
          },
          "500": {
            "description": "Internal Server Error"
          }
        },
        "security": [
          {
            "ApiKeyAuth": []
          },
          {
            "jwt": []
          }
        ],
        "summary": "Execute a websocket",
        "tags": [
          "websocket"
        ]
      }
    },
    "/websocket/kubernetes-shell": {
      "get": {
        "consumes": [
          "application/json"
        ],
        "description": "The request will be upgraded to the websocket protocol. The request will proxy input from the client to the pod via long-lived websocket connection.\n**Access policy**: authenticated",
        "parameters": [
          {
            "description": "environment(endpoint) ID of the environment(endpoint) where the resource is located",
            "in": "query",
            "name": "endpointId",
            "required": true,
            "type": "integer"
          },
          {
            "description": "JWT token used for authentication against this environment(endpoint)",
            "in": "query",
            "name": "token",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "Success"
          },
          "400": {
            "description": "Invalid request"
          },
          "403": {
            "description": "Permission denied"
          },
          "500": {
            "description": "Server error"
          }
        },
        "security": [
          {
            "ApiKeyAuth": []
          },
          {
            "jwt": []
          }
        ],
        "summary": "Execute a websocket on kubectl shell pod",
        "tags": [
          "websocket"
        ]
      }
    },
    "/websocket/pod": {
      "get": {
        "consumes": [
          "application/json"
        ],
        "description": "The request will be upgraded to the websocket protocol.\n**Access policy**: authenticated",
        "parameters": [
          {
            "description": "environment(endpoint) ID of the environment(endpoint) where the resource is located",
            "in": "query",
            "name": "endpointId",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "400": {
            "description": "Bad Request"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          },
          "500": {
            "description": "Internal Server Error"
          }
        },
        "security": [
          {
            "ApiKeyAuth": []
          },
          {
            "jwt": []
          }
        ],
        "summary": "Execute a websocket on pod",
        "tags": [
          "websocket"
        ]
      }
    }
  },
  "schemes": [
    "http",
    "https"
  ],
  "securityDefinitions": {
    "ApiKeyAuth": {
      "in": "header",
      "name": "X-API-KEY",
      "type": "apiKey"
    },
    "jwt": {
      "in": "header",
      "name": "Authorization",
      "type": "apiKey"
    }
  },
  
  "components": {
    "webhooks": {
      "webhookUpdatePayload": {
        "properties": {
          "registryID": {
            "description": "Registry Identifier",
            "type": "integer"
          }
        },
        "type": "object"
      }
    }
  },
  "swagger": "2.0",
  "tags": [
    {
      "description": "Authenticate against Portainer HTTP API",
      "name": "auth"
    },
    {
      "description": "Manage backups",
      "name": "backup"
    },
    {
      "description": "Manage Custom Templates",
      "name": "custom_templates"
    },
    {
      "description": "Manage Docker resources",
      "name": "docker"
    },
    {
      "description": "Manage Edge related environment(endpoint) settings",
      "name": "edge"
    },
    {
      "description": "Manage Edge Groups",
      "name": "edge_groups"
    },
    {
      "description": "Manage Edge Jobs",
      "name": "edge_jobs"
    },
    {
      "description": "Manage Edge Stacks",
      "name": "edge_stacks"
    },
    {
      "description": "Manage Edge Templates",
      "name": "edge_templates"
    },
    {
      "description": "Manage environment(endpoint) groups",
      "name": "endpoint_groups"
    },
    {
      "description": "Manage Docker environments(endpoints)",
      "name": "endpoints"
    },
    {
      "description": "Operate git repository",
      "name": "gitops"
    },
    {
      "description": "Manage Helm charts",
      "name": "helm"
    },
    {
      "description": "Manage Intel AMT settings",
      "name": "intel"
    },
    {
      "description": "Manage Kubernetes cluster",
      "name": "kubernetes"
    },
    {
      "description": "Manage LDAP settings",
      "name": "ldap"
    },
    {
      "description": "Fetch the message of the day",
      "name": "motd"
    },
    {
      "description": "Manage Docker registries",
      "name": "registries"
    },
    {
      "description": "Manage access control on Docker resources",
      "name": "resource_controls"
    },
    {
      "description": "Manage roles",
      "name": "roles"
    },
    {
      "description": "Manage Portainer settings",
      "name": "settings"
    },
    {
      "description": "Manage ssl settings",
      "name": "ssl"
    },
    {
      "description": "Manage stacks",
      "name": "stacks"
    },
    {
      "description": "Information about the Portainer instance",
      "name": "status"
    },
    {
      "description": "Manage Portainer system",
      "name": "system"
    },
    {
      "description": "Manage tags",
      "name": "tags"
    },
    {
      "description": "Manage team memberships",
      "name": "team_memberships"
    },
    {
      "description": "Manage teams",
      "name": "teams"
    },
    {
      "description": "Manage App Templates",
      "name": "templates"
    },
    {
      "description": "Upload files",
      "name": "upload"
    },
    {
      "description": "Manage users",
      "name": "users"
    },
    {
      "description": "Manage webhooks",
      "name": "webhooks"
    },
    {
      "description": "Create exec sessions using websockets",
      "name": "websocket"
    }
  ]
}